//*****************************************************************************           //06-07-12|0x001f
//*****************************************************************************           //06-07-12|0x001f
//                                                                                        //06-07-12|0x001f
// PRECEDENCE REGISTERS                                                                   //06-07-12|0x001f
//                                                                                        //06-07-12|0x001f
//*****************************************************************************           //06-07-12|0x001f
//*****************************************************************************           //06-07-12|0x001f
//  Copyright: 2006 Robert H. Adams                                                       //06-07-12|0x001f
//*****************************************************************************           //06-07-12|0x001f
//  The purpose of this program as well as instructions regarding its use is              //06-07-12|0x001f
//  defined in the associated manual.                                                     //06-07-12|0x001f
//*****************************************************************************           //06-07-12|0x001f
//  This program is free software; you can redistribute it and/or modify                  //06-07-12|0x001f
//  it under the terms of the GNU General Public License as published by                  //06-07-12|0x001f
//  the Free Software Foundation; either version 2 of the License, or                     //06-07-12|0x001f
//  (at your option) any later version.                                                   //06-07-12|0x001f
//                                                                                        //06-07-12|0x001f
//  This program is distributed in the hope that it will be useful,                       //06-07-12|0x001f
//  but WITHOUT ANY WARRANTY; without even the implied warranty of                        //06-07-12|0x001f
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                         //06-07-12|0x001f
//  GNU General Public License for more details.                                          //06-07-12|0x001f
//                                                                                        //06-07-12|0x001f
//  You should have received a copy of the GNU General Public License                     //06-07-12|0x001f
//  along with this program; if not, write to the Free Software                           //06-07-12|0x001f
//  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA., 02110-1301            //06-07-12|0x001f
//  USA                                                                                   //06-07-12|0x001f
//*****************************************************************************           //06-07-12|0x001f
//  For further information, please contact Robert Adams:                                 //06-07-12|0x001f
//     EMail:    robert.adams@whatifwe.com                                                //06-07-12|0x001f
//     Mail:     PO Box 156, Sun Valley, Ca. 91353-0155, USA                              //06-07-12|0x001f
//  Or visit the website, "www.whatifwe.com".                                             //06-07-12|0x001f
//*****************************************************************************           //06-07-12|0x001f
//*****************************************************************************           //06-07-12|0x001f
#ifdef WIN31_SYSTEM                                                                       //05-24-97|0x0020
#include "precwn31.h"                                                                     //05-24-97|0x0020
#endif                                                                                    //05-24-97|0x0020
#ifdef WIN95_SYSTEM                                                                       //05-24-97|0x0020
#include "precwn95.h"                                                                     //05-24-97|0x0020
#endif                                                                                    //05-24-97|0x0020
#ifdef MSDOS_SYSTEM                                                                       //05-24-97|0x0020
#include "precdos.h"                                                                      //05-24-97|0x0020
#endif                                                                                    //05-24-97|0x0020
#include "prechost.h"                                                                     //05-24-97|0x0020
#include "precreg.h"                                                                      //06-07-12|0x0020
#include "precreg.hxx"                                                                    //06-07-12|0x0020
#include "precreg.hpp"                                                                    //06-07-12|0x0020
#include "precdiag.h"                                                                     //06-07-12|0x0021
#include "srcedict.h"                                                                     //07-02-13|0x0022
#include "global.hxx"                                                                     //07-02-10|0x0023
#define Allocate(k) (k##_FAR) calloc(1,sizeof(k))                                         //06-07-12|0x002b
#define Free(k) free(k)                                                                   //06-07-12|0x002b
#define MemSet(i,j,k) memset(i,j,k)                                                       //06-07-12|0x002b
#define MemCCpy(i,j,k,l) Mem_C_Copy((UCHAR_FAR) i, (UCHAR_FAR) j,k,l)                     //06-07-12|0x002b
#define MemCpy(i,j,k) memcpy(i,j,k)                                                       //06-07-12|0x002b
#define LineEnd 0x0d                                                                      //06-07-12|0x002b
#define StrCmp(i,j) ((strcmp(i,j) == 0) ? 0 : 1)                                          //06-07-12|0x002c
#define StrLen(i) strlen(i)                                                               //06-07-12|0x002c
#define StrCat(i,j) strcat(i,j)                                                           //06-07-12|0x002c
#define StrCpy(i,j) strcpy(i,j)                                                           //06-07-12|0x002c
#define StrChr(i,j) strchr(i,j)                                                           //06-07-12|0x002c
#define StrRChr(i,j) strrchr(i,j)                                                         //06-07-12|0x002c
#define StrToByteInt(i,j) GetInteger(i,&j,0xff)                                           //06-07-12|0x002c
#define StrToInt(i,j) GetInteger(i,&j,0xffff)                                             //06-07-12|0x002c
#define StrToLongInt(i,j) GetInteger(i,&j,0xffffffffL)                                    //06-07-12|0x002c
#define StrToByteHex(i,j) GetHex(i,&j,1)                                                  //06-07-12|0x002c
#define StrToHex(i,j) GetHex(i,&j,2)                                                      //06-07-12|0x002c
#define StrToLongHex(i,j) GetHex(i,&j,4)                                                  //06-07-12|0x002c
#define FindName(i) strrchr(i, '/')                                                       //06-07-12|0x002c
PRECREG prec_reg;                                                                         //06-07-12|0x004a
static UINT test_samples[TestIndex];                                                      //06-07-12|0x005c
//***************************************************************************             //06-07-12|0x0065
//***************************************************************************             //06-07-12|0x0066
//******                                                               ******             //06-07-12|0x0067
//******                        reg_allocate                           ******             //06-07-12|0x0068
//******                                                               ******             //06-07-12|0x0069
//***************************************************************************             //06-07-12|0x006a
//***************************************************************************             //06-07-12|0x006b
//*******************************************************************************         //10-29-97|0x006f
//*******************************************************************************         //10-29-97|0x006f
// reg_allocate                                                                           //06-07-12|0x006f
//*******************************************************************************         //10-29-97|0x006f
//*******************************************************************************         //10-29-97|0x006f
UINT PRECREG::reg_allocate(void) {                                                        //06-07-12|0x006f
//*******************************************************************************         //10-29-97|0x006f
//***************************************************************************             //06-07-12|0x0073
//***************************************************************************             //06-07-12|0x0074
    if(register_addr != 0)                                  ReturnSystemError             //06-07-12|0x0075
    TestSample(reg_allocate_1);                                                           //06-07-12|0x0076
    if((register_addr = Allocate(REGISTERS)) == 0)          ReturnSystemError             //06-07-12|0x0077
//***************************************************************************             //06-07-12|0x0078
    return(Success);                                                                      //06-07-12|0x0079
}                                                                                         //06-07-12|0x007a
//                                                                                        //05-24-97|0x007a
//***************************************************************************             //06-07-12|0x007d
//***************************************************************************             //06-07-12|0x007e
//******                                                               ******             //06-07-12|0x007f
//******                          reg_free                             ******             //06-07-12|0x0080
//******                                                               ******             //06-07-12|0x0081
//***************************************************************************             //06-07-12|0x0082
//***************************************************************************             //06-07-12|0x0083
//*******************************************************************************         //10-29-97|0x0087
//*******************************************************************************         //10-29-97|0x0087
// reg_free                                                                               //06-07-12|0x0087
//*******************************************************************************         //10-29-97|0x0087
//*******************************************************************************         //10-29-97|0x0087
UINT PRECREG::reg_free(void) {                                                            //06-07-12|0x0087
//*******************************************************************************         //10-29-97|0x0087
//***************************************************************************             //06-07-12|0x008b
//***************************************************************************             //06-07-12|0x008c
    if(register_addr == 0)                                  ReturnSystemError             //06-07-12|0x008d
    Free(register_addr);                                                                  //06-07-12|0x008e
    register_addr = 0;                                                                    //06-07-12|0x008f
//***************************************************************************             //06-07-12|0x0090
    return_test(reg_free_1);                                                              //06-07-12|0x0091
}                                                                                         //06-07-12|0x0092
//                                                                                        //05-24-97|0x0092
//***************************************************************************             //07-02-13|0x0095
//***************************************************************************             //07-02-13|0x0096
//******                                                               ******             //07-02-13|0x0097
//******                          reg_initial                          ******             //07-02-13|0x0098
//******                                                               ******             //07-02-13|0x0099
//***************************************************************************             //07-02-13|0x009a
//***************************************************************************             //07-02-13|0x009b
//*******************************************************************************         //10-29-97|0x00a1
//*******************************************************************************         //10-29-97|0x00a1
// reg_initial                                                                            //07-02-13|0x00a1
//*******************************************************************************         //10-29-97|0x00a1
//*******************************************************************************         //10-29-97|0x00a1
UINT PRECREG::reg_initial(void) {                                                         //07-02-13|0x00a1
//*******************************************************************************         //10-29-97|0x00a1
//***************************************************************************             //07-02-13|0x00a5
//***************************************************************************             //07-02-13|0x00a6
    if(register_addr == 0)                                  ReturnSystemError             //07-06-30|0x00a7
    TestSample(reg_initial_1);                                                            //07-02-13|0x00a8
    MemSet(register_addr,0,sizeof(REGISTERS));                                            //07-02-13|0x00a9
    StackLevel = 0;                                                                       //07-06-30|0x00aa
//***************************************************************************             //07-02-13|0x00ab
    return(Success);                                                                      //07-02-13|0x00ac
}                                                                                         //07-02-13|0x00ad
//                                                                                        //05-24-97|0x00ad
//***************************************************************************             //07-02-13|0x00b0
//***************************************************************************             //07-02-13|0x00b1
//******                                                               ******             //07-02-13|0x00b2
//******                          reg_save                             ******             //07-02-13|0x00b3
//******                                                               ******             //07-02-13|0x00b4
//***************************************************************************             //07-02-13|0x00b5
//***************************************************************************             //07-02-13|0x00b6
//*******************************************************************************         //10-29-97|0x00bc
//*******************************************************************************         //10-29-97|0x00bc
// reg_save                                                                               //07-05-04|0x00bc
//*******************************************************************************         //10-29-97|0x00bc
//*******************************************************************************         //10-29-97|0x00bc
UINT PRECREG::reg_save(void) {                                                            //07-05-04|0x00bc
//*******************************************************************************         //10-29-97|0x00bc
//***************************************************************************             //07-02-13|0x00c0
//***************************************************************************             //07-02-13|0x00c1
  STRING_DATA_FAR addr;                                                              //07-02-13|0x00c2
  WORDS reg_no;                                                                      //07-02-13|0x00c3
//***************************************************************************             //07-02-13|0x00c4
//***************************************************************************             //07-02-13|0x00c5
    if(register_addr == 0)                                  ReturnSystemError             //07-06-30|0x00c6
//---------------------------------------------------------------------------             //07-02-13|0x00c7
    reg_no.ulong = ProjParm;                                                              //07-02-13|0x00c8
//---------------------------------------------------------------------------             //07-02-13|0x00c9
    switch(dict_name(reg_no.char0,  StackLevel))                 _SwitchGroup             //07-05-04|0x00ca
//***************************************************************************             //07-02-13|0x00cb
//***************************************************************************             //07-02-13|0x00cc
    for(reg_no.ulong=PermReg; reg_no.ulong<ProjParm; ++reg_no.ulong)                      //07-04-28|0x00cd
      {                                                                                   //07-02-13|0x00ce
        if((addr = reg_addr(reg_no.word0)) == 0)            ReturnSystemError             //07-02-13|0x00cf
        if(AddrLength != 0)                                                               //07-02-13|0x00d0
          {                                                                               //07-02-13|0x00d1
//***************************************************************************             //07-02-13|0x00d2
            MacroChar(2, 0) = reg_no.char0;                                               //07-02-13|0x00d3
            MacroLength(2)  = 1;                                                          //07-02-13|0x00d4
            MacroType(2)    = I_REGISTER;                                                 //07-04-28|0x00d5
//---------------------------------------------------------------------------             //07-02-13|0x00d6
            switch(SrceDictExists(MacroTokenAddr(1)))                                     //07-02-13|0x00d7
              {                                                                           //07-02-13|0x00d8
//---------------------------------------------------------------------------             //07-02-13|0x00d9
                case Yes:                                                                 //07-02-13|0x00da
                  if(SrceDictUpdate(&macro) !=Success)      ReturnSystemError             //07-02-13|0x00db
                  break;                                                                  //07-02-13|0x00dc
//---------------------------------------------------------------------------             //07-02-13|0x00dd
                case No:                                                                  //07-02-13|0x00de
                  if(SrceDictAdd(&macro) != Success)        ReturnSystemError             //07-02-13|0x00df
                  break;                                                                  //07-02-13|0x00e0
//---------------------------------------------------------------------------             //07-02-13|0x00e1
                default:                                    ReturnSystemError             //07-02-13|0x00e2
                }                                                                         //07-02-13|0x00e3
//***************************************************************************             //07-02-13|0x00e4
            MacroNoTokens                 = 4;                                            //07-02-13|0x00e5
            MacroChar(1,MacroLength(1)-1) = reg_no.char0;                                 //07-02-13|0x00e6
            MemCpy(MacroTokenAddr(3), addr, sizeof(STRING_DATA));                         //07-02-13|0x00e7
            }                                                                             //07-02-13|0x00e8
        }                                                                                 //07-02-13|0x00e9
//***************************************************************************             //07-02-13|0x00ea
//***************************************************************************             //07-02-13|0x00eb
    MacroChar(2, 0) = reg_no.char0;                                                       //07-02-13|0x00ec
    MacroLength(2)  = 1;                                                                  //07-02-13|0x00ed
    MacroType(2)    = I_REGISTER;                                                         //07-04-28|0x00ee
//---------------------------------------------------------------------------             //07-02-13|0x00ef
    switch(SrceDictExists(MacroTokenAddr(1)))                                             //07-02-13|0x00f0
      {                                                                                   //07-02-13|0x00f1
//---------------------------------------------------------------------------             //07-02-13|0x00f2
        case Yes:                                                                         //07-02-13|0x00f3
          if(SrceDictUpdate(&macro) !=Success)              ReturnSystemError             //07-02-13|0x00f4
          break;                                                                          //07-02-13|0x00f5
//---------------------------------------------------------------------------             //07-02-13|0x00f6
        case No:                                                                          //07-02-13|0x00f7
          if(SrceDictAdd(&macro) != Success)                ReturnSystemError             //07-02-13|0x00f8
          break;                                                                          //07-02-13|0x00f9
//---------------------------------------------------------------------------             //07-02-13|0x00fa
        default:                                            ReturnSystemError             //07-02-13|0x00fb
        }                                                                                 //07-02-13|0x00fc
//***************************************************************************             //07-06-30|0x00fd
    if((++StackLevel) >= 0x8000)                            ReturnSystemError             //07-06-30|0x00fe
    MemSet(register_addr,0,sizeof(REGISTERS));                                            //07-06-30|0x00ff
//***************************************************************************             //07-02-13|0x0100
    return_test(reg_save_1);                                                              //07-02-13|0x0101
}                                                                                         //07-02-13|0x0102
//                                                                                        //05-24-97|0x0102
//***************************************************************************             //07-02-13|0x0105
//***************************************************************************             //07-02-13|0x0106
//******                                                               ******             //07-02-13|0x0107
//******                          reg_restore                          ******             //07-02-13|0x0108
//******                                                               ******             //07-02-13|0x0109
//***************************************************************************             //07-02-13|0x010a
//***************************************************************************             //07-02-13|0x010b
//*******************************************************************************         //10-29-97|0x0112
//*******************************************************************************         //10-29-97|0x0112
// reg_restore                                                                            //07-04-28|0x0112
//*******************************************************************************         //10-29-97|0x0112
//*******************************************************************************         //10-29-97|0x0112
UINT PRECREG::reg_restore(void) {                                                         //07-04-28|0x0112
//*******************************************************************************         //10-29-97|0x0112
//***************************************************************************             //07-02-13|0x0116
//***************************************************************************             //07-02-13|0x0117
  STRING_DATA_FAR addr;                                                              //07-02-13|0x0118
  WORDS reg_no;                                                                      //07-02-13|0x0119
  ULONG size;                                                                        //07-02-13|0x011a
//***************************************************************************             //07-02-13|0x011b
//***************************************************************************             //07-02-13|0x011c
    if(register_addr == 0)                                  ReturnSystemError             //09-12-26|0x011d
//---------------------------------------------------------------------------             //07-02-13|0x011e
    MemSet(register_addr,0,sizeof(REGISTERS));                                            //09-12-26|0x011f
//---------------------------------------------------------------------------             //07-02-13|0x0120
    if((--StackLevel) >= 0x8000)                            ReturnSystemError             //09-12-26|0x0121
//---------------------------------------------------------------------------             //07-02-13|0x0122
    reg_no.ulong = ProjParm;                                                              //07-02-13|0x0123
//---------------------------------------------------------------------------             //07-02-13|0x0124
    switch(dict_name(reg_no.char0, StackLevel))                  _SwitchGroup             //07-05-04|0x0125
//***************************************************************************             //07-02-13|0x0126
//***************************************************************************             //07-02-13|0x0127
    switch(SrceDictExists(MacroTokenAddr(1)))                                             //07-02-13|0x0128
      {                                                                                   //07-02-13|0x0129
        case No:                                  return_test(reg_restore_1);             //07-02-13|0x012a
        case Yes:                                                      break;             //07-02-13|0x012b
        default:                                            ReturnSystemError             //07-02-13|0x012c
        }                                                                                 //07-02-13|0x012d
//***************************************************************************             //07-02-13|0x012e
    switch(SrceDictGet(MacroTokenAddr(2),MacroTokenAddr(1),1))                            //07-02-13|0x012f
      {                                                                                   //07-02-13|0x0130
        case Success:                                               break;                //07-02-13|0x0131
        default:                                            ReturnSystemError             //07-02-13|0x0132
        }                                                                                 //07-02-13|0x0133
//***************************************************************************             //07-02-13|0x0134
//***************************************************************************             //07-02-13|0x0135
loop:                                                                                     //07-02-13|0x0136
//***************************************************************************             //07-02-13|0x0137
    if(MacroLength(2) != 1)                                 ReturnSystemError             //07-02-13|0x0138
    reg_no.ulong = 0;                                                                     //07-02-13|0x0139
    reg_no.char0 = MacroChar(2,0);                                                        //07-02-13|0x013a
    if(reg_no.ulong < PermReg)                              ReturnSystemError             //07-02-13|0x013b
    if(reg_no.ulong > ProjParm)                             ReturnSystemError             //07-04-28|0x013c
    if(reg_no.ulong == ProjParm)                  return_test(reg_restore_2);             //07-04-28|0x013d
//---------------------------------------------------------------------------             //07-02-13|0x013e
    MacroChar(1,MacroLength(1)-1) = reg_no.char0;                                         //07-02-13|0x013f
//---------------------------------------------------------------------------             //07-02-13|0x0140
    if((addr = reg_addr(reg_no.word0)) == 0)                ReturnSystemError             //07-02-13|0x0141
    if(AddrLength != 0)                                     ReturnSystemError             //07-02-13|0x0142
//---------------------------------------------------------------------------             //07-02-13|0x0143
    switch(SrceDictGet(addr,MacroTokenAddr(1),2))                                         //07-02-13|0x0144
      {                                                                                   //07-02-13|0x0145
        case Success:                                               break;                //07-02-13|0x0146
        default:                                            ReturnSystemError             //07-02-13|0x0147
        }                                                                                 //07-02-13|0x0148
//---------------------------------------------------------------------------             //07-02-13|0x0149
    if(AddrLength           == 0)                           ReturnSystemError             //07-02-13|0x014a
    if(AddrLength            > 256)                         ReturnSystemError             //07-02-13|0x014b
    if(AddrChar(AddrLength) != 0)                           ReturnSystemError             //07-02-13|0x014c
    size = AddrLength;                                                                    //07-02-13|0x014d
    if(size != strlen(AddrLineAddr))                        ReturnSystemError             //07-02-13|0x014e
//---------------------------------------------------------------------------             //07-02-13|0x014f
    switch(SrceDictGet(MacroTokenAddr(2),MacroTokenAddr(1),1))                            //07-02-13|0x0150
      {                                                                                   //07-02-13|0x0151
        case Success:                                               break;                //07-02-13|0x0152
        default:                                            ReturnSystemError             //07-02-13|0x0153
        }                                                                                 //07-02-13|0x0154
//---------------------------------------------------------------------------             //07-02-13|0x0155
    goto loop;                                                                            //07-02-13|0x0156
}                                                                                         //07-02-13|0x0158
//                                                                                        //05-24-97|0x0158
//***************************************************************************             //06-09-28|0x015b
//***************************************************************************             //06-09-28|0x015c
//******                                                               ******             //06-09-28|0x015d
//******                          reg_store                            ******             //06-09-28|0x015e
//******                                                               ******             //06-09-28|0x015f
//***************************************************************************             //06-09-28|0x0160
//***************************************************************************             //06-09-28|0x0161
//*******************************************************************************         //10-29-97|0x0167
//*******************************************************************************         //10-29-97|0x0167
// reg_store                                                                              //06-09-28|0x0167
//*******************************************************************************         //10-29-97|0x0167
//*******************************************************************************         //10-29-97|0x0167
UINT PRECREG::reg_store(                                                                  //06-09-28|0x0167
    UINT Parm,                                                                            //06-09-28|0x0167
    STRING_DATA_FAR Input                                                                 //06-09-28|0x0167
    ) {                                                                                   //06-09-28|0x0167
//*******************************************************************************         //10-29-97|0x0167
//***************************************************************************             //06-09-28|0x016b
//***************************************************************************             //06-09-28|0x016c
  STRING_DATA_FAR addr;                                                              //06-09-28|0x016d
//***************************************************************************             //06-09-28|0x016e
//***************************************************************************             //06-09-28|0x016f
    if(register_addr == 0)                                  ReturnSystemError             //09-12-26|0x0170
//---------------------------------------------------------------------------             //07-02-13|0x0171
    TestSample(reg_store_1);                                                              //06-09-28|0x0172
//***************************************************************************             //06-09-28|0x0173
    switch(InputType)                                                                     //06-09-28|0x0174
      {                                                                                   //06-09-28|0x0175
        case I_NAME:                                                   break;             //07-04-28|0x0176
        case I_TOKEN:                                                  break;             //07-04-28|0x0177
        case I_STRING:                                                 break;             //07-04-28|0x0178
        default:                                            ReturnSystemError             //07-04-28|0x0179
        }                                                                                 //07-04-28|0x017a
//***************************************************************************             //06-09-28|0x017b
    if((addr = reg_addr(Parm)) == 0)                        ReturnSystemError             //06-09-28|0x017c
    if(AddrLength != 0)                   ReturnFinish("Register Not Empty");             //06-09-28|0x017d
    MemCpy(addr, Input, sizeof(STRING_DATA));                                             //06-09-28|0x017e
//***************************************************************************             //06-09-28|0x017f
    return(Success);                                                                      //06-09-28|0x0180
}                                                                                         //06-09-28|0x0181
//                                                                                        //05-24-97|0x0181
//***************************************************************************             //06-09-28|0x0184
//***************************************************************************             //06-09-28|0x0185
//******                                                               ******             //06-09-28|0x0186
//******                          reg_read                             ******             //06-09-28|0x0187
//******                                                               ******             //06-09-28|0x0188
//***************************************************************************             //06-09-28|0x0189
//***************************************************************************             //06-09-28|0x018a
//*******************************************************************************         //10-29-97|0x0190
//*******************************************************************************         //10-29-97|0x0190
// reg_read                                                                               //06-09-28|0x0190
//*******************************************************************************         //10-29-97|0x0190
//*******************************************************************************         //10-29-97|0x0190
UINT PRECREG::reg_read(                                                                   //06-09-28|0x0190
    STRING_DATA_FAR Work,                                                                 //06-09-28|0x0190
    UINT Parm,                                                                            //06-09-28|0x0190
    UINT_FAR TypeFar                                                                      //06-09-28|0x0190
    ) {                                                                                   //06-09-28|0x0190
//*******************************************************************************         //10-29-97|0x0190
//***************************************************************************             //06-09-28|0x0194
//***************************************************************************             //06-09-28|0x0195
  STRING_DATA_FAR addr;                                                              //06-09-28|0x0196
  UINT index;                                                                        //06-09-28|0x0197
//***************************************************************************             //06-09-28|0x0198
//***************************************************************************             //06-09-28|0x0199
    if(register_addr == 0)                                  ReturnSystemError             //09-12-26|0x019a
//---------------------------------------------------------------------------             //07-02-13|0x019b
    TestSample(reg_read_1);                                                               //06-09-28|0x019c
//***************************************************************************             //06-09-28|0x019d
    if((addr = reg_addr(Parm)) == 0)                        ReturnSystemError             //06-09-28|0x019e
    *TypeFar  = AddrType;                                                                 //06-09-28|0x019f
    if(AddrLength == 0)                       ReturnFinish("Register Empty");             //06-09-28|0x01a0
    if(AddrLength >  255)                                   ReturnSystemError             //06-09-28|0x01a1
    if(WorkChar(WorkLength) != 0)                           ReturnSystemError             //06-09-28|0x01a2
//***************************************************************************             //06-09-28|0x01a3
    for(index=0; index<AddrLength; ++index)                                               //06-09-28|0x01a4
      {                                                                                   //06-09-28|0x01a5
        if(AddrChar(index) == 0)                            ReturnSystemError             //06-09-28|0x01a6
        if(WorkLength      >= 255)      ReturnFinish("Output Text Too Long");             //11-03-18|0x01a7
        WorkChar(WorkLength) = AddrChar(index);                                           //06-09-28|0x01a8
        ++WorkLength;                                                                     //06-09-28|0x01a9
        if(WorkChar(WorkLength) != 0)                       ReturnSystemError             //06-09-28|0x01aa
        }                                                                                 //06-09-28|0x01ab
//***************************************************************************             //06-09-28|0x01ac
    if(Parm >= OnceReg) MemSet(addr, 0x00, sizeof(STRING_DATA));                          //06-09-28|0x01ad
//***************************************************************************             //06-09-28|0x01ae
    return(Success);                                                                      //06-09-28|0x01af
}                                                                                         //06-09-28|0x01b0
//                                                                                        //05-24-97|0x01b0
//***************************************************************************             //06-09-29|0x01b3
//***************************************************************************             //06-09-29|0x01b4
//******                                                               ******             //06-09-29|0x01b5
//******                          reg_clear                            ******             //06-09-29|0x01b6
//******                                                               ******             //06-09-29|0x01b7
//***************************************************************************             //06-09-29|0x01b8
//***************************************************************************             //06-09-29|0x01b9
//*******************************************************************************         //10-29-97|0x01bf
//*******************************************************************************         //10-29-97|0x01bf
// reg_clear                                                                              //06-09-29|0x01bf
//*******************************************************************************         //10-29-97|0x01bf
//*******************************************************************************         //10-29-97|0x01bf
UINT PRECREG::reg_clear(                                                                  //06-09-29|0x01bf
    UINT Parm                                                                             //06-09-29|0x01bf
    ) {                                                                                   //06-09-29|0x01bf
//*******************************************************************************         //10-29-97|0x01bf
//***************************************************************************             //06-09-29|0x01c3
//***************************************************************************             //06-09-29|0x01c4
  STRING_DATA_FAR addr;                                                              //06-09-29|0x01c5
//***************************************************************************             //06-09-29|0x01c6
//***************************************************************************             //06-09-29|0x01c7
    if(register_addr == 0)                                  ReturnSystemError             //09-12-26|0x01c8
//---------------------------------------------------------------------------             //07-02-13|0x01c9
    TestSample(reg_clear_1);                                                              //06-09-29|0x01ca
//***************************************************************************             //06-09-29|0x01cb
    if((addr = reg_addr(Parm)) == 0)                        ReturnSystemError             //06-09-29|0x01cc
    MemSet(addr, 0x00, sizeof(STRING_DATA));                                              //06-09-29|0x01cd
//***************************************************************************             //06-09-29|0x01ce
    return(Success);                                                                      //06-09-29|0x01cf
}                                                                                         //06-09-29|0x01d0
//                                                                                        //05-24-97|0x01d0
//***************************************************************************             //07-03-21|0x01d3
//***************************************************************************             //07-03-21|0x01d4
//******                                                               ******             //07-03-21|0x01d5
//******                           dict_name                           ******             //07-03-21|0x01d6
//******                                                               ******             //07-03-21|0x01d7
//***************************************************************************             //07-03-21|0x01d8
//***************************************************************************             //07-03-21|0x01d9
//*******************************************************************************         //10-29-97|0x01de
//*******************************************************************************         //10-29-97|0x01de
// dict_name                                                                              //check  |0x01de
//*******************************************************************************         //10-29-97|0x01de
//*******************************************************************************         //10-29-97|0x01de
UINT PRECREG::dict_name(                                                                  //check  |0x01de
    SCHAR RegNo,                                                                          //check  |0x01de
    UINT StackLevel                                                                       //check  |0x01de
    ) {                                                                                   //check  |0x01de
//*******************************************************************************         //10-29-97|0x01de
//***************************************************************************             //07-03-21|0x01e1
//***************************************************************************             //07-03-21|0x01e2
    if(register_addr == 0)                                  ReturnSystemError             //09-12-26|0x01e3
//---------------------------------------------------------------------------             //07-02-13|0x01e4
    MemSet(&macro, 0x00, sizeof(TOKENS));                                                 //07-03-21|0x01e5
    MacroNoTokens = 3;                                                                    //07-03-21|0x01e6
//***************************************************************************             //07-03-21|0x01e7
    sprintf(MacroLineAddr(1), "0x%08x",  StackLevel);                                     //07-05-04|0x01e8
    MacroChar(1,10) = 0x09;                                                               //07-05-04|0x01e9
    MacroChar(1,11) = RegNo;                                                              //07-05-04|0x01ea
    MacroLength(1)  = 12;                                                                 //07-05-04|0x01eb
    MacroType(1)    = I_REGISTER;                                                         //07-05-04|0x01ec
//***************************************************************************             //07-03-21|0x01ed
    if(StrLen(MacroLineAddr(1)) != 12)                      ReturnSystemError             //07-05-04|0x01ee
//***************************************************************************             //07-03-21|0x01ef
    return_test(dict_name_1);                                                             //07-03-21|0x01f0
}                                                                                         //07-03-21|0x01f1
//                                                                                        //05-24-97|0x01f1
//***************************************************************************             //06-09-28|0x01f4
//***************************************************************************             //06-09-28|0x01f5
//******                                                               ******             //06-09-28|0x01f6
//******                           reg_addr                            ******             //06-09-28|0x01f7
//******                                                               ******             //06-09-28|0x01f8
//***************************************************************************             //06-09-28|0x01f9
//***************************************************************************             //06-09-28|0x01fa
//*******************************************************************************         //10-29-97|0x0200
//*******************************************************************************         //10-29-97|0x0200
// reg_addr                                                                               //98-03-28|0x0200
//*******************************************************************************         //10-29-97|0x0200
//*******************************************************************************         //10-29-97|0x0200
STRING_DATA_FAR PRECREG::reg_addr(                                                        //98-03-28|0x0200
    UINT index                                                                            //98-03-28|0x0200
    ) {                                                                                   //98-03-28|0x0200
//*******************************************************************************         //10-29-97|0x0200
//***************************************************************************             //06-09-28|0x0203
//***************************************************************************             //06-09-28|0x0204
  STRING_DATA_FAR addr;                                                              //06-09-28|0x0205
//***************************************************************************             //06-09-28|0x0206
//***************************************************************************             //06-09-28|0x0207
    if(register_addr == 0)                              ReturnSystemAddrError             //09-12-26|0x0208
    addr = 0;                                                                             //09-12-26|0x0209
//---------------------------------------------------------------------------             //07-02-13|0x020a
    TestSample(reg_addr_1);                                                               //06-09-28|0x020b
    if(index <  PermReg)                                ReturnSystemAddrError             //06-09-28|0x020c
    if(index >= ProjParm)                               ReturnSystemAddrError             //06-09-28|0x020d
    if(index < OnceReg)                                                                   //06-09-28|0x020e
      {                                                                                   //06-09-28|0x020f
        index -= PermReg;                                                                 //06-09-29|0x0210
        addr = &(register_addr->global[index]);                                           //06-09-29|0x0211
        TestSample(reg_addr_2);                                                           //06-09-29|0x0212
        }                                                                                 //06-09-29|0x0213
      else {                                                                              //06-09-28|0x0214
        index -= OnceReg;                                                                 //06-09-28|0x0215
        addr = &(register_addr->local[index]);                                            //06-09-28|0x0216
        TestSample(reg_addr_3);                                                           //06-09-28|0x0217
        }                                                                                 //06-09-28|0x0218
//***************************************************************************             //06-09-28|0x0219
    return(addr);                                                                         //06-09-28|0x021a
}                                                                                         //06-09-28|0x021b
//                                                                                        //05-24-97|0x021b
//***************************************************************************             //06-07-14|0x021e
//***************************************************************************             //06-07-14|0x021f
//******                                                               ******             //06-07-14|0x0220
//******                       TEST WRAPPERS                           ******             //06-07-14|0x0221
//******                                                               ******             //06-07-14|0x0222
//***************************************************************************             //06-07-14|0x0223
//***************************************************************************             //06-07-14|0x0224
//*******************************************************************************         //10-29-97|0x0225
//*******************************************************************************         //10-29-97|0x0225
// precreg_test_reset                                                                     //06-07-14|0x0225
//*******************************************************************************         //10-29-97|0x0225
//*******************************************************************************         //10-29-97|0x0225
UINT PRECREG::precreg_test_reset(void) {                                                  //06-07-14|0x0225
//*******************************************************************************         //10-29-97|0x0225
//************************************************************************                //06-07-14|0x0225
    switch(BasicTestReset())                                                              //06-07-14|0x0225
      {                                                                                   //06-07-14|0x0225
        case Success:                                     return(Success);                //06-07-14|0x0225
        default:                                        ReturnSystemError;                //06-07-14|0x0225
        }                                                                                 //06-07-14|0x0225
}                                                                                         //06-07-14|0x0225
//                                                                                        //05-24-97|0x0225
//***************************************************************************             //06-07-14|0x0226
//*******************************************************************************         //10-29-97|0x0227
//*******************************************************************************         //10-29-97|0x0227
// precreg_test_read                                                                      //06-07-14|0x0227
//*******************************************************************************         //10-29-97|0x0227
//*******************************************************************************         //10-29-97|0x0227
UINT PRECREG::precreg_test_read(void) {                                                   //06-07-14|0x0227
//*******************************************************************************         //10-29-97|0x0227
//************************************************************************                //06-07-14|0x0227
    switch(BasicTestRead(&test_samples[0], test_samples[0]))                              //06-07-14|0x0227
      {                                                                                   //06-07-14|0x0227
        case Success:                                     return(Success);                //06-07-14|0x0227
        default:                                        ReturnSystemError;                //06-07-14|0x0227
        }                                                                                 //06-07-14|0x0227
}                                                                                         //06-07-14|0x0227
//                                                                                        //05-24-97|0x0227
//***************************************************************************             //06-07-14|0x0228
//*******************************************************************************         //10-29-97|0x0229
//*******************************************************************************         //10-29-97|0x0229
// precreg_test_write                                                                     //06-07-14|0x0229
//*******************************************************************************         //10-29-97|0x0229
//*******************************************************************************         //10-29-97|0x0229
UINT PRECREG::precreg_test_write(void) {                                                  //06-07-14|0x0229
//*******************************************************************************         //10-29-97|0x0229
//************************************************************************                //06-07-14|0x0229
    switch(BasicTestWrite(&test_samples[0]))                                              //06-07-14|0x0229
      {                                                                                   //06-07-14|0x0229
        case Success:                                     return(Success);                //06-07-14|0x0229
        default:                                        ReturnSystemError;                //06-07-14|0x0229
        }                                                                                 //06-07-14|0x0229
}                                                                                         //06-07-14|0x0229
//                                                                                        //05-24-97|0x0229
//***************************************************************************             //06-07-14|0x022a
//*******************************************************************************         //10-29-97|0x022b
//*******************************************************************************         //10-29-97|0x022b
// precreg_test_report                                                                    //06-07-14|0x022b
//*******************************************************************************         //10-29-97|0x022b
//*******************************************************************************         //10-29-97|0x022b
UINT PRECREG::precreg_test_report(void) {                                                 //06-07-14|0x022b
//*******************************************************************************         //10-29-97|0x022b
//************************************************************************                //06-07-14|0x022b
    switch(BasicTestReport(&test_samples[0], "PRECREG"))                                  //06-07-14|0x022b
      {                                                                                   //06-07-14|0x022b
        case Success:                                     return(Success);                //06-07-14|0x022b
        default:                                        ReturnSystemError;                //06-07-14|0x022b
        }                                                                                 //06-07-14|0x022b
}                                                                                         //06-07-14|0x022b
//                                                                                        //05-24-97|0x022b
//***************************************************************************             //06-07-12|0x022c
//***************************************************************************             //06-07-12|0x022d
//******                                                               ******             //06-07-12|0x022e
//******                        constructor                            ******             //06-07-12|0x022f
//******                                                               ******             //06-07-12|0x0230
//***************************************************************************             //06-07-12|0x0231
//***************************************************************************             //06-07-12|0x0232
//*******************************************************************************         //10-29-97|0x0233
//*******************************************************************************         //10-29-97|0x0233
// CONSTRUCTOR                                                                            //06-07-12|0x0233
//*******************************************************************************         //10-29-97|0x0233
//*******************************************************************************         //10-29-97|0x0233
PRECREG::PRECREG() {                                                                      //06-07-12|0x0233
//***************************************************************************             //06-07-12|0x0234
//***************************************************************************             //06-07-12|0x0235
    register_addr = 0;                                                                    //06-07-12|0x0236
//***************************************************************************             //06-07-12|0x0237
    { ULONG i;                                                                            //06-07-12|0x0238
      test_samples[NoTestSamples] = TestIndex;                                            //06-07-12|0x0238
      i = 1;                                                                              //06-07-12|0x0238
      while(i<TestIndex)                                                                  //06-07-12|0x0238
        {                                                                                 //06-07-12|0x0238
          test_samples[i] = 0;                                                            //06-07-12|0x0238
          ++i;                                                                            //06-07-12|0x0238
          }                                                                               //06-07-12|0x0238
      }                                                                                   //06-07-12|0x0238
}                                                                                         //06-07-12|0x0239
//                                                                                        //05-24-97|0x0239
//*******************************************************************************         //05-24-97|0x023e
//*******************************************************************************         //05-24-97|0x023e
//****                       END OF FILE                                     ****         //05-24-97|0x023e
//*******************************************************************************         //05-24-97|0x023e
//*******************************************************************************         //05-24-97|0x023e
