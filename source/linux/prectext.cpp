//*****************************************************************************           //06-09-29|0x001f
//*****************************************************************************           //06-09-29|0x001f
//                                                                                        //06-09-29|0x001f
// PDE TEXT EXPRESSION ROUTINES                                                           //06-09-29|0x001f
//                                                                                        //06-09-29|0x001f
//*****************************************************************************           //06-09-29|0x001f
//*****************************************************************************           //06-09-29|0x001f
//  Copyright: 2006 Robert H. Adams                                                       //06-09-29|0x001f
//*****************************************************************************           //06-09-29|0x001f
//  The purpose of this program as well as instructions regarding its use is              //06-09-29|0x001f
//  defined in the associated manual.                                                     //06-09-29|0x001f
//*****************************************************************************           //06-09-29|0x001f
//  This program is free software; you can redistribute it and/or modify                  //06-09-29|0x001f
//  it under the terms of the GNU General Public License as published by                  //06-09-29|0x001f
//  the Free Software Foundation; either version 2 of the License, or                     //06-09-29|0x001f
//  (at your option) any later version.                                                   //06-09-29|0x001f
//                                                                                        //06-09-29|0x001f
//  This program is distributed in the hope that it will be useful,                       //06-09-29|0x001f
//  but WITHOUT ANY WARRANTY; without even the implied warranty of                        //06-09-29|0x001f
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                         //06-09-29|0x001f
//  GNU General Public License for more details.                                          //06-09-29|0x001f
//                                                                                        //06-09-29|0x001f
//  You should have received a copy of the GNU General Public License                     //06-09-29|0x001f
//  along with this program; if not, write to the Free Software                           //06-09-29|0x001f
//  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA., 02110-1301            //06-09-29|0x001f
//  USA                                                                                   //06-09-29|0x001f
//*****************************************************************************           //06-09-29|0x001f
//  For further information, please contact Robert Adams:                                 //06-09-29|0x001f
//     EMail:    robert.adams@whatifwe.com                                                //06-09-29|0x001f
//     Mail:     PO Box 156, Sun Valley, Ca. 91353-0155, USA                              //06-09-29|0x001f
//  Or visit the website, "www.whatifwe.com".                                             //06-09-29|0x001f
//*****************************************************************************           //06-09-29|0x001f
//*****************************************************************************           //06-09-29|0x001f
#ifdef WIN31_SYSTEM                                                                       //05-24-97|0x0022
#include "precwn31.h"                                                                     //05-24-97|0x0022
#endif                                                                                    //05-24-97|0x0022
#ifdef WIN95_SYSTEM                                                                       //05-24-97|0x0022
#include "precwn95.h"                                                                     //05-24-97|0x0022
#endif                                                                                    //05-24-97|0x0022
#ifdef MSDOS_SYSTEM                                                                       //05-24-97|0x0022
#include "precdos.h"                                                                      //05-24-97|0x0022
#endif                                                                                    //05-24-97|0x0022
#include "prechost.h"                                                                     //05-24-97|0x0022
#include "prectext.h"                                                                     //05-14-97|0x0022
#include "prectext.hxx"                                                                   //05-14-97|0x0022
#include "prectext.hpp"                                                                   //05-14-97|0x0022
#include "precdiag.h"                                                                     //06-09-29|0x0023
#include "preccall.h"                                                                     //05-04-07|0x0024
#include "precform.h"                                                                     //05-14-97|0x0025
#include "precreg.h"                                                                      //06-09-29|0x0026
#include "global.hxx"                                                                     //07-02-10|0x0027
#define Allocate(k) (k##_FAR) calloc(1,sizeof(k))                                         //04-10-05|0x002f
#define Free(k) free(k)                                                                   //04-10-05|0x002f
#define MemSet(i,j,k) memset(i,j,k)                                                       //04-10-05|0x002f
#define MemCCpy(i,j,k,l) Mem_C_Copy((UCHAR_FAR) i, (UCHAR_FAR) j,k,l)                     //04-10-05|0x002f
#define MemCpy(i,j,k) memcpy(i,j,k)                                                       //04-10-05|0x002f
#define LineEnd 0x0d                                                                      //04-10-05|0x002f
#define StrCmp(i,j) ((strcmp(i,j) == 0) ? 0 : 1)                                          //04-10-05|0x0030
#define StrLen(i) strlen(i)                                                               //04-10-05|0x0030
#define StrCat(i,j) strcat(i,j)                                                           //04-10-05|0x0030
#define StrCpy(i,j) strcpy(i,j)                                                           //04-10-05|0x0030
#define StrChr(i,j) strchr(i,j)                                                           //04-10-05|0x0030
#define StrRChr(i,j) strrchr(i,j)                                                         //04-10-05|0x0030
#define StrToByteInt(i,j) GetInteger(i,&j,0xff)                                           //04-10-05|0x0030
#define StrToInt(i,j) GetInteger(i,&j,0xffff)                                             //04-10-05|0x0030
#define StrToLongInt(i,j) GetInteger(i,&j,0xffffffffL)                                    //04-10-05|0x0030
#define StrToByteHex(i,j) GetHex(i,&j,1)                                                  //04-10-05|0x0030
#define StrToHex(i,j) GetHex(i,&j,2)                                                      //04-10-05|0x0030
#define StrToLongHex(i,j) GetHex(i,&j,4)                                                  //04-10-05|0x0030
#define FindName(i) strrchr(i, '/')                                                       //04-10-05|0x0030
PRECTEXT prec_text;                                                                       //06-09-29|0x004d
static UINT test_samples[TestIndex];                                                      //06-09-29|0x0057
//***************************************************************************             //06-09-29|0x0060
//***************************************************************************             //06-09-29|0x0061
//******                                                               ******             //06-09-29|0x0062
//******                          clear_reg                            ******             //06-09-29|0x0063
//******                                                               ******             //06-09-29|0x0064
//***************************************************************************             //06-09-29|0x0065
//***************************************************************************             //06-09-29|0x0066
//*******************************************************************************         //10-29-97|0x006c
//*******************************************************************************         //10-29-97|0x006c
// clear_reg                                                                              //06-09-29|0x006c
//*******************************************************************************         //10-29-97|0x006c
//*******************************************************************************         //10-29-97|0x006c
UINT PRECTEXT::clear_reg(                                                                 //06-09-29|0x006c
    STRING_DATA_FAR Addr                                                                  //06-09-29|0x006c
    ) {                                                                                   //06-09-29|0x006c
//*******************************************************************************         //10-29-97|0x006c
//***************************************************************************             //06-09-29|0x0070
//***************************************************************************             //06-09-29|0x0071
  UINT parm;                                                                         //06-09-29|0x0072
//***************************************************************************             //06-09-29|0x0073
//***************************************************************************             //06-09-29|0x0074
    parm = get_parm(AddrLineAddr);                                                        //06-09-29|0x0075
    if(parm  == 0xffff)           ReturnFinish("Illegal Register Specifier");             //06-09-29|0x0076
    if(parm  >= ProjParm)         ReturnFinish("Illegal Register Specifier");             //06-09-29|0x0077
    if(parm  <  PermReg)          ReturnFinish("Illegal Register Specifier");             //06-09-29|0x0078
    if(AddrLength != 2)           ReturnFinish("Illegal Register Specifier");             //06-09-29|0x0079
//***************************************************************************             //06-09-29|0x007a
//***************************************************************************             //06-09-29|0x007b
    switch(PrecRegClear(parm))                                   _SwitchGroup             //06-09-29|0x007c
    return_test(clear_reg_1);                                                             //06-09-29|0x007d
}                                                                                         //06-09-29|0x007e
//                                                                                        //05-24-97|0x007e
//***************************************************************************             //06-09-30|0x0081
//***************************************************************************             //06-09-30|0x0082
//******                                                               ******             //06-09-30|0x0083
//******                          test_parm                            ******             //06-09-30|0x0084
//******                                                               ******             //06-09-30|0x0085
//***************************************************************************             //06-09-30|0x0086
//***************************************************************************             //06-09-30|0x0087
//*******************************************************************************         //10-29-97|0x0090
//*******************************************************************************         //10-29-97|0x0090
// test_parm                                                                              //06-09-30|0x0090
//*******************************************************************************         //10-29-97|0x0090
//*******************************************************************************         //10-29-97|0x0090
UINT PRECTEXT::test_parm(                                                                 //06-09-30|0x0090
    STRING_DATA_FAR Addr                                                                  //06-09-30|0x0090
    ) {                                                                                   //06-09-30|0x0090
//*******************************************************************************         //10-29-97|0x0090
//***************************************************************************             //06-09-30|0x0094
//***************************************************************************             //06-09-30|0x0095
  UINT parm;                                                                         //06-09-30|0x0096
//***************************************************************************             //06-09-30|0x0097
//***************************************************************************             //06-09-30|0x0098
    parm = get_parm(AddrLineAddr);                                                        //06-09-30|0x0099
    if(parm  == 0xffff)          ReturnFinish("Illegal Parameter Specifier");             //06-09-30|0x009a
    if(parm  >= ErrorParm)                                 ReturnSystemError;             //06-09-30|0x009b
//***************************************************************************             //06-09-30|0x009c
    TestSample(test_parm_1);                                                              //06-09-30|0x009d
    if(parm >= CmdLnParm)                                                                 //07-02-10|0x009e
      {                                                                                   //07-02-10|0x009f
        parm -= CmdLnParm;                                                                //07-02-10|0x00a0
        switch(CallCmdParmTest(parm))                            _SwitchYesNo             //07-02-10|0x00a1
        }                                                                                 //07-02-10|0x00a2
//***************************************************************************             //06-09-30|0x00a3
    TestSample(test_parm_2);                                                              //06-09-30|0x00a4
    if(parm >= ProjParm)                                                                  //07-02-10|0x00a5
      {                                                                                   //07-02-10|0x00a6
        parm -= ProjParm;                                                                 //07-02-10|0x00a7
        switch(CallSrcParmTest(parm))                            _SwitchYesNo             //07-02-10|0x00a8
        }                                                                                 //07-02-10|0x00a9
//***************************************************************************             //06-09-30|0x00aa
    TestSample(test_parm_3);                                                              //06-09-30|0x00ab
    if(parm >= PermReg)          ReturnFinish("Illegal Parameter Specifier");             //07-02-10|0x00ac
//***************************************************************************             //06-09-30|0x00ad
    TestSample(test_parm_4);                                                              //06-09-30|0x00ae
    if(parm >= CallParm)         switch(CallParmTest(parm))      _SwitchYesNo             //06-09-30|0x00af
//***************************************************************************             //06-09-30|0x00b0
    ReturnFinish("Illegal Parameter Specifier");                                          //06-09-30|0x00b1
}                                                                                         //06-09-30|0x00b2
//                                                                                        //05-24-97|0x00b2
//***************************************************************************             //06-09-28|0x00b5
//***************************************************************************             //06-09-28|0x00b6
//******                                                               ******             //06-09-28|0x00b7
//******                          store_reg                            ******             //06-09-28|0x00b8
//******                                                               ******             //06-09-28|0x00b9
//***************************************************************************             //06-09-28|0x00ba
//***************************************************************************             //06-09-28|0x00bb
//*******************************************************************************         //10-29-97|0x00c2
//*******************************************************************************         //10-29-97|0x00c2
// store_reg                                                                              //06-09-28|0x00c2
//*******************************************************************************         //10-29-97|0x00c2
//*******************************************************************************         //10-29-97|0x00c2
UINT PRECTEXT::store_reg(                                                                 //06-09-28|0x00c2
    STRING_DATA_FAR Addr,                                                                 //06-09-28|0x00c2
    STRING_DATA_FAR Source                                                                //06-09-28|0x00c2
    ) {                                                                                   //06-09-28|0x00c2
//*******************************************************************************         //10-29-97|0x00c2
//***************************************************************************             //06-09-28|0x00c6
//***************************************************************************             //06-09-28|0x00c7
  UINT parm;                                                                         //06-09-28|0x00c8
//***************************************************************************             //06-09-28|0x00c9
//***************************************************************************             //06-09-28|0x00ca
    if(AddrLength != 2)           ReturnFinish("Illegal Register Specifier");             //06-09-28|0x00cb
//---------------------------------------------------------------------------             //06-09-28|0x00cc
    parm = get_parm(AddrLineAddr);                                                        //06-09-28|0x00cd
    if(parm       == 0xffff)      ReturnFinish("Illegal Register Specifier");             //06-09-28|0x00ce
//***************************************************************************             //06-09-28|0x00cf
    if(parm       == 0)                                                                   //07-02-10|0x00d0
      {                                                                                   //07-02-10|0x00d1
        switch(CallReturnStore(Source))                          _SwitchGroup             //07-02-10|0x00d2
        return_test(store_reg_1);                                                         //07-02-10|0x00d3
        }                                                                                 //07-02-10|0x00d4
//***************************************************************************             //06-09-28|0x00d5
    if(parm        <  PermReg)    ReturnFinish("Illegal Register Specifier");             //06-09-28|0x00d6
    if(parm       >= ProjParm)    ReturnFinish("Illegal Register Specifier");             //06-09-28|0x00d7
//---------------------------------------------------------------------------             //06-09-28|0x00d8
    switch(PrecRegStore(parm, Source))                           _SwitchGroup             //06-09-28|0x00d9
    return_test(store_reg_1);                                                             //06-09-28|0x00da
}                                                                                         //06-09-28|0x00db
//                                                                                        //05-24-97|0x00db
//***************************************************************************             //06-09-28|0x00de
//***************************************************************************             //06-09-29|0x00df
//******                                                               ******             //06-09-29|0x00e0
//******                          read_reg                             ******             //06-09-29|0x00e1
//******                                                               ******             //06-09-29|0x00e2
//***************************************************************************             //06-09-29|0x00e3
//***************************************************************************             //06-09-29|0x00e4
//*******************************************************************************         //10-29-97|0x00ea
//*******************************************************************************         //10-29-97|0x00ea
// read_reg                                                                               //06-09-29|0x00ea
//*******************************************************************************         //10-29-97|0x00ea
//*******************************************************************************         //10-29-97|0x00ea
UINT PRECTEXT::read_reg(                                                                  //06-09-29|0x00ea
    STRING_DATA_FAR Addr,                                                                 //06-09-29|0x00ea
    STRING_DATA_FAR Source                                                                //06-09-29|0x00ea
    ) {                                                                                   //06-09-29|0x00ea
//*******************************************************************************         //10-29-97|0x00ea
//***************************************************************************             //06-09-29|0x00ee
//***************************************************************************             //06-09-29|0x00ef
  UINT parm;                                                                         //06-09-29|0x00f0
//***************************************************************************             //06-09-29|0x00f1
//***************************************************************************             //06-09-29|0x00f2
    parm = get_parm(SourceLineAddr);                                                      //06-09-29|0x00f3
    if(parm         == 0xffff)    ReturnFinish("Illegal Register Specifier");             //06-09-29|0x00f4
    if(parm         >= ProjParm)  ReturnFinish("Illegal Register Specifier");             //06-09-29|0x00f5
    if(parm          <  PermReg)  ReturnFinish("Illegal Register Specifier");             //06-09-29|0x00f6
    if(SourceLength != 2)         ReturnFinish("Illegal Register Specifier");             //06-09-29|0x00f7
//***************************************************************************             //06-09-29|0x00f8
//***************************************************************************             //06-09-29|0x00f9
    switch(PrecRegRead(Addr,  parm, &AddrType))                  _SwitchGroup             //06-09-29|0x00fa
    return_test(read_reg_1);                                                              //06-09-29|0x00fb
}                                                                                         //06-09-29|0x00fc
//                                                                                        //05-24-97|0x00fc
//***************************************************************************             //06-07-22|0x00ff
//***************************************************************************             //06-07-22|0x0100
//******                                                               ******             //06-07-22|0x0101
//******                       prepare_tokens                          ******             //06-07-22|0x0102
//******                                                               ******             //06-07-22|0x0103
//***************************************************************************             //06-07-22|0x0104
//***************************************************************************             //06-07-22|0x0105
//*******************************************************************************         //10-29-97|0x0109
//*******************************************************************************         //10-29-97|0x0109
// prepare_tokens                                                                         //06-07-22|0x0109
//*******************************************************************************         //10-29-97|0x0109
//*******************************************************************************         //10-29-97|0x0109
UINT PRECTEXT::prepare_tokens(                                                            //06-07-22|0x0109
    TOKENS_FAR TokenAddr,                                                                 //06-07-22|0x0109
    UINT StartingIndex                                                                    //06-07-22|0x0109
    ) {                                                                                   //06-07-22|0x0109
//*******************************************************************************         //10-29-97|0x0109
//***************************************************************************             //06-07-22|0x010d
//***************************************************************************             //06-07-22|0x010e
  STRING_DATA string_data;                                                           //06-07-22|0x010f
  STRING_DATA_FAR addr;                                                              //06-07-22|0x0110
  UINT token_no;                                                                     //06-07-22|0x0111
//***************************************************************************             //06-07-22|0x0112
//***************************************************************************             //06-07-22|0x0113
    if(TokenNoTokens == 0)                                 ReturnSystemError;             //06-07-22|0x0114
    if(TokenNoTokens >  10)                                ReturnSystemError;             //06-07-22|0x0115
//***************************************************************************             //06-07-22|0x0116
//***************************************************************************             //06-07-22|0x0117
    for(token_no=StartingIndex; token_no<TokenNoTokens; ++token_no)                       //06-07-22|0x0118
      {                                                                                   //06-07-22|0x0119
        addr = TokenTokenAddr(token_no);                                                  //06-07-22|0x011a
        MemCpy(&string_data, addr,  sizeof(STRING_DATA));                                 //06-07-22|0x011b
        MemSet(addr,         0x00,  sizeof(STRING_DATA));                                 //06-07-22|0x011c
        switch(TextPrepare(addr, &string_data))                  _SwitchGroup             //06-07-22|0x011d
        }                                                                                 //06-07-22|0x011e
//***************************************************************************             //06-07-22|0x011f
    return(Success);                                                                      //06-07-22|0x0120
}                                                                                         //06-07-22|0x0121
//                                                                                        //05-24-97|0x0121
//***************************************************************************             //04-08-23|0x0124
//***************************************************************************             //04-08-23|0x0125
//******                                                               ******             //04-08-23|0x0126
//******                       prepare_text                            ******             //04-08-23|0x0127
//******                                                               ******             //04-08-23|0x0128
//***************************************************************************             //04-08-23|0x0129
//***************************************************************************             //04-08-23|0x012a
//*******************************************************************************         //10-29-97|0x012f
//*******************************************************************************         //10-29-97|0x012f
// text_prepare                                                                           //06-07-22|0x012f
//*******************************************************************************         //10-29-97|0x012f
//*******************************************************************************         //10-29-97|0x012f
UINT PRECTEXT::text_prepare(                                                              //06-07-22|0x012f
    STRING_DATA_FAR Addr,                                                                 //06-07-22|0x012f
    STRING_DATA_FAR Source                                                                //06-07-22|0x012f
    ) {                                                                                   //06-07-22|0x012f
//*******************************************************************************         //10-29-97|0x012f
//***************************************************************************             //04-08-23|0x0133
//***************************************************************************             //04-08-23|0x0134
    TestSample(text_prepare_1);                                                           //04-11-14|0x0135
    switch(AssembleText(Addr, Source))                           _SwitchGroup             //06-07-22|0x0136
//***************************************************************************             //04-11-14|0x0137
    return(Success);                                                                      //06-07-22|0x0138
}                                                                                         //06-07-22|0x0139
//                                                                                        //05-24-97|0x0139
//***************************************************************************             //04-09-10|0x013c
//***************************************************************************             //04-09-10|0x013d
//******                                                               ******             //04-09-10|0x013e
//******                        assemble_text                          ******             //04-09-10|0x013f
//******                                                               ******             //04-09-10|0x0140
//***************************************************************************             //04-09-10|0x0141
//***************************************************************************             //04-09-10|0x0142
//*******************************************************************************         //10-29-97|0x014a
//*******************************************************************************         //10-29-97|0x014a
// assemble_text                                                                          //98-03-28|0x014a
//*******************************************************************************         //10-29-97|0x014a
//*******************************************************************************         //10-29-97|0x014a
UINT PRECTEXT::assemble_text(                                                             //98-03-28|0x014a
    STRING_DATA_FAR Addr,                                                                 //98-03-28|0x014a
    STRING_DATA_FAR Source                                                                //98-03-28|0x014a
    ) {                                                                                   //98-03-28|0x014a
//*******************************************************************************         //10-29-97|0x014a
//***************************************************************************             //04-09-10|0x014e
//***************************************************************************             //04-09-10|0x014f
    SourcePosition = 0;                                                                   //06-07-22|0x0150
//---------------------------------------------------------------------------             //04-09-10|0x0151
    AddrMacroLineNo = SourceMacroLineNo;                                                  //11-03-18|0x0152
    AddrType        = SourceType;                                                         //06-07-22|0x0153
    AddrLength      = 0;                                                                  //05-14-97|0x0154
    AddrStartCol    = SourceStartCol;                                                     //06-07-22|0x0155
//---------------------------------------------------------------------------             //04-09-10|0x0156
    MemSet(&(AddrLine), 0, 257);                                                          //06-07-22|0x0157
//***************************************************************************             //06-07-22|0x0158
//***************************************************************************             //06-07-22|0x0159
    while(SourcePosition < SourceLength)                                                  //06-07-22|0x015a
      {                                                                                   //06-07-22|0x015b
        switch(SourceChar(SourcePosition))                                                //06-07-22|0x015c
          {                                                                               //05-14-97|0x015d
            case 0x00:                                    ReturnSystemError;              //04-09-21|0x015e
//---------------------------------------------------------------------------             //04-09-21|0x015f
            case '\\':                                                                    //04-09-21|0x0160
              TestSample(AssembleText2);                                                  //04-10-05|0x0161
              switch(ProcessBackSlash(Addr, Source, 0))         _SwitchBreak;             //06-07-22|0x0162
//---------------------------------------------------------------------------             //04-09-10|0x0163
            case '$':                                                                     //05-14-97|0x0164
              TestSample(AssembleText3);                                                  //04-10-05|0x0165
              switch(argument_copy(Addr, &SourceChar(SourcePosition)))                    //06-07-22|0x0166
                {                                                                         //06-07-22|0x0167
                  case SystemError:                         ReturnSystemError             //06-07-22|0x0168
                  case UserError:                          return(UserError);             //06-07-22|0x0169
                  case 0x0002:  SourcePosition += 2;                   break;             //06-09-29|0x016a
                  case 0x0003:  SourcePosition += 3;                   break;             //06-07-22|0x016b
                  default:                                  ReturnSystemError             //06-07-22|0x016c
                  }                                                                       //06-07-22|0x016d
              break;                                                                      //06-07-22|0x016e
//---------------------------------------------------------------------------             //04-09-10|0x016f
            default:                                                                      //05-14-97|0x0170
              TestSample(AssembleText6);                                                  //04-11-14|0x0171
              if(AddrLength >= 255)     ReturnFinish("Output Text Too Long");             //check   |0x0172
              AddrChar((AddrLength++)) = SourceChar(SourcePosition++);                    //06-07-22|0x0173
              break;                                                                      //06-07-22|0x0174
              }                                                                           //05-14-97|0x0175
        }                                                                                 //06-07-22|0x0176
//***************************************************************************             //06-07-22|0x0177
//***************************************************************************             //06-07-22|0x0178
    TestSample(AssembleText1);                                                            //06-07-22|0x0179
    AddrStartCall = 1;                                                                    //07-02-10|0x017a
    if(SourceChar(SourcePosition) != 0)                    ReturnSystemError;             //06-07-22|0x017b
    return(Success);                                                                      //06-07-22|0x017c
}                                                                                         //06-07-22|0x017d
//                                                                                        //05-24-97|0x017d
//***************************************************************************             //04-09-10|0x0180
//***************************************************************************             //04-09-10|0x0181
//******                                                               ******             //04-09-10|0x0182
//******                        argument_copy                          ******             //04-09-10|0x0183
//******                                                               ******             //04-09-10|0x0184
//***************************************************************************             //04-09-10|0x0185
//***************************************************************************             //04-09-10|0x0186
//*******************************************************************************         //10-29-97|0x0190
//*******************************************************************************         //10-29-97|0x0190
// argument_copy                                                                          //06-08-17|0x0190
//*******************************************************************************         //10-29-97|0x0190
//*******************************************************************************         //10-29-97|0x0190
UINT PRECTEXT::argument_copy(                                                             //06-08-17|0x0190
    STRING_DATA_FAR Addr,                                                                 //06-08-17|0x0190
    SCHAR_FAR Source                                                                      //06-08-17|0x0190
    ) {                                                                                   //06-08-17|0x0190
//*******************************************************************************         //10-29-97|0x0190
//***************************************************************************             //04-09-10|0x0191
//***************************************************************************             //04-09-10|0x0192
  UINT parm;                                                                         //05-14-97|0x0193
  UINT type;                                                                         //05-06-13|0x0194
//***************************************************************************             //04-09-10|0x0195
//***************************************************************************             //04-09-10|0x0196
    parm = get_parm(Source);                                                              //05-14-97|0x0197
    if(parm == 0xffff)            ReturnFinish("Illegal Argument Specifier");             //05-14-97|0x0198
//***************************************************************************             //04-09-10|0x0199
    if(parm >= CmdLnParm)                                                                 //06-07-22|0x019a
      {                                                                                   //05-04-07|0x019b
        TestSample(ArgumentCopy1);                                                        //05-04-07|0x019c
        parm -= CmdLnParm;                                                                //06-07-22|0x019d
        switch(CopyCmdArg(Addr, parm))                           _SwitchGroup             //05-06-13|0x019e
        switch(check_type(Addr, I_TOKEN))                        _SwitchGroup             //05-06-13|0x019f
        return(3);                                                                        //05-06-13|0x01a0
        }                                                                                 //05-04-07|0x01a1
//---------------------------------------------------------------------------             //04-09-10|0x01a2
    if(parm >= ProjParm)                                                                  //06-08-17|0x01a3
      {                                                                                   //04-09-13|0x01a4
        TestSample(ArgumentCopy2);                                                        //06-08-17|0x01a5
        parm -= ProjParm;                                                                 //04-09-13|0x01a6
        switch(CopySrcArg(Addr, parm, &type))                    _SwitchGroup             //06-08-17|0x01a7
        switch(check_type(Addr, type))                           _SwitchGroup             //05-06-13|0x01a8
        return(3);                                                                        //05-06-13|0x01a9
        }                                                                                 //04-09-13|0x01aa
//***************************************************************************             //04-09-10|0x01ab
    if(parm >= OnceReg)                                                                   //05-14-97|0x01ac
      {                                                                                   //05-14-97|0x01ad
        TestSample(ArgumentCopy3);                                                        //05-04-06|0x01ae
        switch(PrecRegRead(Addr, parm, &type))                   _SwitchGroup             //07-02-10|0x01af
        switch(check_type(Addr, type))                           _SwitchGroup             //05-06-13|0x01b0
        return(2);                                                                        //05-06-13|0x01b1
        }                                                                                 //04-09-10|0x01b2
//***************************************************************************             //04-09-10|0x01b3
    if(parm >= PermReg)                                                                   //05-14-97|0x01b4
      {                                                                                   //05-14-97|0x01b5
        TestSample(ArgumentCopy4);                                                        //05-04-06|0x01b6
        switch(PrecRegRead(Addr, parm, &type))                   _SwitchGroup             //07-02-10|0x01b7
        switch(check_type(Addr, type))                           _SwitchGroup             //05-06-06|0x01b8
        return(2);                                                                        //04-09-10|0x01b9
        }                                                                                 //04-09-10|0x01ba
//***************************************************************************             //04-09-10|0x01bb
    if(parm >= CallParm)                                                                  //05-14-97|0x01bc
      {                                                                                   //05-14-97|0x01bd
        TestSample(ArgumentCopy5);                                                        //05-04-06|0x01be
        switch(CallCopyArg(Addr, parm,  &type))                  _SwitchGroup             //05-06-13|0x01bf
        switch(check_type(Addr, type))                           _SwitchGroup             //05-06-13|0x01c0
        return(2);                                                                        //05-06-13|0x01c1
        }                                                                                 //04-12-28|0x01c2
//***************************************************************************             //04-09-10|0x01c3
    TestSample(ArgumentCopy6);                                                            //07-02-10|0x01c4
    switch(PrecReturnRead(Addr, &type))                          _SwitchGroup             //07-02-10|0x01c5
    switch(check_type(Addr, type))                               _SwitchGroup             //07-02-10|0x01c6
    return(2);                                                                            //07-02-10|0x01c7
//***************************************************************************             //04-12-28|0x01c8
}                                                                                         //05-06-13|0x01c9
//                                                                                        //05-24-97|0x01c9
//***************************************************************************             //05-04-06|0x01cc
//***************************************************************************             //05-04-06|0x01cd
//******                                                               ******             //05-04-06|0x01ce
//******                          get_parm                             ******             //05-04-06|0x01cf
//******                                                               ******             //05-04-06|0x01d0
//***************************************************************************             //05-04-06|0x01d1
//***************************************************************************             //05-04-06|0x01d2
//*******************************************************************************         //10-29-97|0x01d7
//*******************************************************************************         //10-29-97|0x01d7
// get_parm                                                                               //06-07-22|0x01d7
//*******************************************************************************         //10-29-97|0x01d7
//*******************************************************************************         //10-29-97|0x01d7
UINT PRECTEXT::get_parm(                                                                  //06-07-22|0x01d7
    SCHAR_FAR Addr                                                                        //06-07-22|0x01d7
    ) {                                                                                   //06-07-22|0x01d7
//*******************************************************************************         //10-29-97|0x01d7
//***************************************************************************             //05-04-06|0x01da
//***************************************************************************             //05-04-06|0x01db
    TestSample(GetParm_1);                                                                //05-04-06|0x01dc
    if(StrLen(Addr) < 2)                                      return(0xffff);             //05-04-06|0x01dd
    if(*(Addr++) != '$')                                   return(0xffff);                //05-04-06|0x01de
//***************************************************************************             //05-04-06|0x01df
    switch(*Addr)                                                                         //05-04-06|0x01e0
      {                                                                                   //05-04-06|0x01e1
        case '#':                                                                         //05-04-07|0x01e2
          if(StrLen((Addr++)) < 2)                            return(0xffff);             //05-04-07|0x01e3
          if(*Addr < '0')                                   return(0xffff);               //05-04-07|0x01e4
          if(*Addr > '9')                                   return(0xffff);               //05-04-07|0x01e5
          return((UINT) (*Addr - '0' + CmdLnParm));                                       //06-07-22|0x01e6
//---------------------------------------------------------------------------             //05-04-06|0x01e7
        case '$':                                                                         //05-04-06|0x01e8
          if(StrLen((Addr++)) < 2)                            return(0xffff);             //05-04-06|0x01e9
          if(*Addr < '0')                                   return(0xffff);               //05-04-06|0x01ea
          if(*Addr > '9')                                   return(0xffff);               //05-04-06|0x01eb
          return((UINT) (*Addr - '0' + ProjParm));                                        //05-04-06|0x01ec
//---------------------------------------------------------------------------             //05-04-06|0x01ed
        default:                                                                          //05-04-06|0x01ee
          if(*Addr < '0')                                   return(0xffff);               //05-04-06|0x01ef
          if(*Addr <= '9')       return((UINT) (*Addr - '0'));                            //05-04-06|0x01f0
          if(*Addr <  'A')                                  return(0xffff);               //05-04-06|0x01f1
          if(*Addr <= 'Z')       return((UINT) (*Addr - 'A' + PermReg));                  //07-02-10|0x01f2
          if(*Addr <  'a')                                  return(0xffff);               //05-04-06|0x01f3
          if(*Addr <= 'z')       return((UINT) (*Addr - 'a' + OnceReg));                  //07-02-10|0x01f4
          return(0xffff);                                                                 //05-04-06|0x01f5
          }                                                                               //05-04-06|0x01f6
}                                                                                         //98-03-28|0x01f7
//                                                                                        //05-24-97|0x01f7
//***************************************************************************             //05-06-06|0x01fa
//***************************************************************************             //05-06-06|0x01fb
//******                                                               ******             //05-06-06|0x01fc
//******                          check_type                           ******             //05-06-06|0x01fd
//******                                                               ******             //05-06-06|0x01fe
//***************************************************************************             //05-06-06|0x01ff
//***************************************************************************             //05-06-06|0x0200
//***************************************************************************             //05-06-06|0x0202
//***************************************************************************             //05-06-06|0x0203
//*******************************************************************************         //10-29-97|0x0204
//*******************************************************************************         //10-29-97|0x0204
// check_type                                                                             //05-06-06|0x0204
//*******************************************************************************         //10-29-97|0x0204
//*******************************************************************************         //10-29-97|0x0204
UINT PRECTEXT::check_type(                                                                //05-06-06|0x0204
    STRING_DATA_FAR Addr,                                                                 //05-06-06|0x0204
    UINT InsertType                                                                       //05-06-06|0x0204
    ) {                                                                                   //05-06-06|0x0204
//*******************************************************************************         //10-29-97|0x0204
//***************************************************************************             //05-06-06|0x0205
//***************************************************************************             //05-06-06|0x0206
  UINT tokens;                                                                       //05-06-06|0x0207
//***************************************************************************             //05-06-06|0x0208
//***************************************************************************             //05-06-06|0x0209
    tokens = AddrType * 256 + InsertType;                                                 //05-06-06|0x020a
    switch(tokens)                                                                        //05-06-06|0x020b
      {                                                                                   //05-06-13|0x020c
//***************************************************************************             //05-06-13|0x020d
        CaseNameName:                                        return(Success);             //05-06-06|0x020e
//---------------------------------------------------------------------------             //05-06-13|0x020f
        CaseNameToken:              ReturnFinish("Illegal Token in Name");                //05-06-06|0x0210
        CaseNameString:             ReturnFinish("Illegal String in Name");               //05-06-13|0x0211
//***************************************************************************             //05-06-13|0x0212
        CaseTokenName:                                       return(Success);             //05-06-06|0x0213
        CaseTokenToken:                                      return(Success);             //05-06-06|0x0214
        CaseTokenString:                                     return(Success);             //05-06-13|0x0215
//***************************************************************************             //05-06-13|0x0216
        CaseStringToken:                                     return(Success);             //05-06-13|0x0217
        CaseStringName:                                      return(Success);             //05-06-13|0x0218
//---------------------------------------------------------------------------             //05-06-13|0x0219
        CaseStringString:           ReturnFinish("Illegal String in String");             //05-06-13|0x021a
//***************************************************************************             //05-06-13|0x021b
        default:                                           ReturnSystemError;             //05-06-13|0x021c
        }                                                                                 //05-06-13|0x021d
}                                                                                         //05-06-13|0x021e
//                                                                                        //05-24-97|0x021e
//***************************************************************************             //04-10-05|0x0221
//***************************************************************************             //04-10-05|0x0222
//******                                                               ******             //04-10-05|0x0223
//******                       TEST WRAPPERS                           ******             //04-10-05|0x0224
//******                                                               ******             //04-10-05|0x0225
//***************************************************************************             //04-10-05|0x0226
//***************************************************************************             //04-10-05|0x0227
//*******************************************************************************         //10-29-97|0x0228
//*******************************************************************************         //10-29-97|0x0228
// prectext_test_reset                                                                    //04-10-05|0x0228
//*******************************************************************************         //10-29-97|0x0228
//*******************************************************************************         //10-29-97|0x0228
UINT PRECTEXT::prectext_test_reset(void) {                                                //04-10-05|0x0228
//*******************************************************************************         //10-29-97|0x0228
//************************************************************************                //04-10-05|0x0228
    switch(BasicTestReset())                                                              //04-10-05|0x0228
      {                                                                                   //04-10-05|0x0228
        case Success:                                     return(Success);                //04-10-05|0x0228
        default:                                        ReturnSystemError;                //04-10-05|0x0228
        }                                                                                 //04-10-05|0x0228
}                                                                                         //04-10-05|0x0228
//                                                                                        //05-24-97|0x0228
//***************************************************************************             //04-10-05|0x0229
//*******************************************************************************         //10-29-97|0x022a
//*******************************************************************************         //10-29-97|0x022a
// prectext_test_read                                                                     //04-10-05|0x022a
//*******************************************************************************         //10-29-97|0x022a
//*******************************************************************************         //10-29-97|0x022a
UINT PRECTEXT::prectext_test_read(void) {                                                 //04-10-05|0x022a
//*******************************************************************************         //10-29-97|0x022a
//************************************************************************                //04-10-05|0x022a
    switch(BasicTestRead(&test_samples[0], test_samples[0]))                              //04-10-05|0x022a
      {                                                                                   //04-10-05|0x022a
        case Success:                                     return(Success);                //04-10-05|0x022a
        default:                                        ReturnSystemError;                //04-10-05|0x022a
        }                                                                                 //04-10-05|0x022a
}                                                                                         //04-10-05|0x022a
//                                                                                        //05-24-97|0x022a
//***************************************************************************             //04-10-05|0x022b
//*******************************************************************************         //10-29-97|0x022c
//*******************************************************************************         //10-29-97|0x022c
// prectext_test_write                                                                    //04-10-05|0x022c
//*******************************************************************************         //10-29-97|0x022c
//*******************************************************************************         //10-29-97|0x022c
UINT PRECTEXT::prectext_test_write(void) {                                                //04-10-05|0x022c
//*******************************************************************************         //10-29-97|0x022c
//************************************************************************                //04-10-05|0x022c
    switch(BasicTestWrite(&test_samples[0]))                                              //04-10-05|0x022c
      {                                                                                   //04-10-05|0x022c
        case Success:                                     return(Success);                //04-10-05|0x022c
        default:                                        ReturnSystemError;                //04-10-05|0x022c
        }                                                                                 //04-10-05|0x022c
}                                                                                         //04-10-05|0x022c
//                                                                                        //05-24-97|0x022c
//***************************************************************************             //04-10-05|0x022d
//*******************************************************************************         //10-29-97|0x022e
//*******************************************************************************         //10-29-97|0x022e
// prectexttest_report                                                                    //04-10-05|0x022e
//*******************************************************************************         //10-29-97|0x022e
//*******************************************************************************         //10-29-97|0x022e
UINT PRECTEXT::prectexttest_report(void) {                                                //04-10-05|0x022e
//*******************************************************************************         //10-29-97|0x022e
//************************************************************************                //04-10-05|0x022e
    switch(BasicTestReport(&test_samples[0], "PRECTEXT"))                                 //04-10-05|0x022e
      {                                                                                   //04-10-05|0x022e
        case Success:                                     return(Success);                //04-10-05|0x022e
        default:                                        ReturnSystemError;                //04-10-05|0x022e
        }                                                                                 //04-10-05|0x022e
}                                                                                         //04-10-05|0x022e
//                                                                                        //05-24-97|0x022e
//***************************************************************************             //04-10-05|0x022f
//***************************************************************************             //04-10-05|0x0230
//******                                                               ******             //04-10-05|0x0231
//******                        constructor                            ******             //04-10-05|0x0232
//******                                                               ******             //04-10-05|0x0233
//***************************************************************************             //04-10-05|0x0234
//***************************************************************************             //04-10-05|0x0235
//*******************************************************************************         //10-29-97|0x0236
//*******************************************************************************         //10-29-97|0x0236
// CONSTRUCTOR                                                                            //04-10-05|0x0236
//*******************************************************************************         //10-29-97|0x0236
//*******************************************************************************         //10-29-97|0x0236
PRECTEXT::PRECTEXT() {                                                                    //04-10-05|0x0236
//***************************************************************************             //04-10-05|0x0237
//***************************************************************************             //04-10-05|0x0238
    { ULONG i;                                                                            //04-10-05|0x0239
      test_samples[NoTestSamples] = TestIndex;                                            //04-10-05|0x0239
      i = 1;                                                                              //04-10-05|0x0239
      while(i<TestIndex)                                                                  //04-10-05|0x0239
        {                                                                                 //04-10-05|0x0239
          test_samples[i] = 0;                                                            //04-10-05|0x0239
          ++i;                                                                            //04-10-05|0x0239
          }                                                                               //04-10-05|0x0239
      }                                                                                   //04-10-05|0x0239
}                                                                                         //04-10-05|0x023a
//                                                                                        //05-24-97|0x023a
//*******************************************************************************         //05-24-97|0x023f
//*******************************************************************************         //05-24-97|0x023f
//****                       END OF FILE                                     ****         //05-24-97|0x023f
//*******************************************************************************         //05-24-97|0x023f
//*******************************************************************************         //05-24-97|0x023f
