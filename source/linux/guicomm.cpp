//*****************************************************************************           //06-08-29|0x001e
//*****************************************************************************           //06-08-29|0x001e
//                                                                                        //06-08-29|0x001e
// GRAPHICS USER INTERFACE SUB-SYSTEM                                                     //06-08-29|0x001e
//                                                                                        //06-08-29|0x001e
//*****************************************************************************           //06-08-29|0x001e
//*****************************************************************************           //06-08-29|0x001e
//  Copyright: 2006 Robert H. Adams                                                       //06-08-29|0x001e
//*****************************************************************************           //06-08-29|0x001e
//  The purpose of this program as well as instructions regarding its use is              //06-08-29|0x001e
//  defined in the associated manual.                                                     //06-08-29|0x001e
//*****************************************************************************           //06-08-29|0x001e
//  This program is free software; you can redistribute it and/or modify                  //06-08-29|0x001e
//  it under the terms of the GNU General Public License as published by                  //06-08-29|0x001e
//  the Free Software Foundation; either version 2 of the License, or                     //06-08-29|0x001e
//  (at your option) any later version.                                                   //06-08-29|0x001e
//                                                                                        //06-08-29|0x001e
//  This program is distributed in the hope that it will be useful,                       //06-08-29|0x001e
//  but WITHOUT ANY WARRANTY; without even the implied warranty of                        //06-08-29|0x001e
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                         //06-08-29|0x001e
//  GNU General Public License for more details.                                          //06-08-29|0x001e
//                                                                                        //06-08-29|0x001e
//  You should have received a copy of the GNU General Public License                     //06-08-29|0x001e
//  along with this program; if not, write to the Free Software                           //06-08-29|0x001e
//  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA., 02110-1301            //06-08-29|0x001e
//  USA                                                                                   //06-08-29|0x001e
//*****************************************************************************           //06-08-29|0x001e
//  For further information, please contact Robert Adams:                                 //06-08-29|0x001e
//     EMail:    robert.adams@whatifwe.com                                                //06-08-29|0x001e
//     Mail:     PO Box 156, Sun Valley, Ca. 91353-0155, USA                              //06-08-29|0x001e
//  Or visit the website, "www.whatifwe.com".                                             //06-08-29|0x001e
//*****************************************************************************           //06-08-29|0x001e
//*****************************************************************************           //06-08-29|0x001e
#ifdef WIN31_SYSTEM                                                                       //05-24-97|0x0021
#include "precwn31.h"                                                                     //05-24-97|0x0021
#endif                                                                                    //05-24-97|0x0021
#ifdef WIN95_SYSTEM                                                                       //05-24-97|0x0021
#include "precwn95.h"                                                                     //05-24-97|0x0021
#endif                                                                                    //05-24-97|0x0021
#ifdef MSDOS_SYSTEM                                                                       //05-24-97|0x0021
#include "precdos.h"                                                                      //05-24-97|0x0021
#endif                                                                                    //05-24-97|0x0021
#include "prechost.h"                                                                     //05-24-97|0x0021
#include "guicomm.h"                                                                      //06-08-29|0x0021
#include "guicomm.hxx"                                                                    //06-08-29|0x0021
#include "guicomm.hpp"                                                                    //06-08-29|0x0021
#include "precutil.h"                                                                     //12-05-21|0x0024
#include "precdiag.h"                                                                     //06-08-29|0x0025
#include "precfile.h"                                                                     //12-05-21|0x0026
#define Allocate(k) (k##_FAR) calloc(1,sizeof(k))                                         //06-08-29|0x002e
#define Free(k) free(k)                                                                   //06-08-29|0x002e
#define MemSet(i,j,k) memset(i,j,k)                                                       //06-08-29|0x002e
#define MemCCpy(i,j,k,l) Mem_C_Copy((UCHAR_FAR) i, (UCHAR_FAR) j,k,l)                     //06-08-29|0x002e
#define MemCpy(i,j,k) memcpy(i,j,k)                                                       //06-08-29|0x002e
#define LineEnd 0x0d                                                                      //06-08-29|0x002e
#define StrLen(i) strlen(i)                                                               //06-08-29|0x002f
#define StrCat(i,j) strcat(i,j)                                                           //06-08-29|0x002f
#define StrCpy(i,j) strcpy(i,j)                                                           //06-08-29|0x002f
#define StrCmp(i,j) Str_Comp((SCHAR_FAR)i,j,256)                                          //06-08-29|0x002f
#define StrRChr(i,j) strrchr(i,j)                                                         //06-08-29|0x002f
#define StrChr(i,j) strchr(i,j)                                                           //06-08-29|0x002f
#define StrToByteInt(i,j) GetInteger(i,&j,0xff)                                           //06-08-29|0x002f
#define StrToInt(i,j) GetInteger(i,&j,0xffff)                                             //06-08-29|0x002f
#define StrToLongInt(i,j) GetInteger(i,&j,0xffffffffL)                                    //06-08-29|0x002f
#define StrToByteHex(i,j) GetHex(i,&j,1)                                                  //06-08-29|0x002f
#define StrToHex(i,j) GetHex(i,&j,2)                                                      //06-08-29|0x002f
#define StrToLongHex(i,j) GetHex(i,&j,4)                                                  //06-08-29|0x002f
#define FindName(i) strrchr(i, '/')                                                       //06-08-29|0x002f
//***************************************************************************             //06-08-29|0x0045
//***************************************************************************             //06-08-29|0x0046
//******                                                               ******             //06-08-29|0x0047
//******                   CLASS BEGIN                                 ******             //06-08-29|0x0048
//******                                                               ******             //06-08-29|0x0049
//***************************************************************************             //06-08-29|0x004a
//***************************************************************************             //06-08-29|0x004b
GUICOMM gui_comm;                                                                         //06-08-29|0x004c
//***************************************************************************             //12-05-18|0x005d
//***************************************************************************             //12-05-18|0x005e
//******                                                               ******             //12-05-18|0x005f
//******                   load_name                                   ******             //12-05-18|0x0060
//******                                                               ******             //12-05-18|0x0061
//***************************************************************************             //12-05-18|0x0062
//***************************************************************************             //12-05-18|0x0063
//*******************************************************************************         //10-29-97|0x0064
//*******************************************************************************         //10-29-97|0x0064
// load_name                                                                              //12-05-18|0x0064
//*******************************************************************************         //10-29-97|0x0064
//*******************************************************************************         //10-29-97|0x0064
UINT GUICOMM::load_name(                                                                  //12-05-18|0x0064
    STRING_DATA_FAR report_name                                                           //12-05-18|0x0064
    ) {                                                                                   //12-05-18|0x0064
//*******************************************************************************         //10-29-97|0x0064
//***************************************************************************             //12-05-18|0x0066
//***************************************************************************             //12-05-18|0x0067
    SCHAR       extent[256];                                                              //12-05-18|0x0068
    ULONG       date;                                                                     //12-05-18|0x0069
    ULONG       min;                                                                      //12-05-18|0x006a
    ULONG       hour;                                                                     //12-05-18|0x006b
    ULONG       day;                                                                      //12-05-18|0x006c
    ULONG       month;                                                                    //12-05-18|0x006d
    ULONG       year;                                                                     //12-05-18|0x006e
//***************************************************************************             //12-05-18|0x006f
//******                                                               ******             //12-05-18|0x0070
//****** Get the date and time                                         ******             //12-05-18|0x0071
//******                                                               ******             //12-05-18|0x0072
//***************************************************************************             //12-05-18|0x0073
      {  time_t   long_time;                                                              //12-05-18|0x0074
         struct tm *local_time;                                                           //12-05-18|0x0074
         time(&long_time);                                                                //12-05-18|0x0074
         local_time = localtime(&long_time);                                              //12-05-18|0x0074
         date =  local_time->tm_year;                                                     //12-05-18|0x0074
         date -= 80;                                                                      //12-05-18|0x0074
         date *= 16;                                                                      //12-05-18|0x0074
         date += local_time->tm_mon;                                                      //12-05-18|0x0074
         date *= 32;                                                                      //12-05-18|0x0074
         date += local_time->tm_mday;                                                     //12-05-18|0x0074
         date *= 32;                                                                      //12-05-18|0x0074
         date += local_time->tm_hour;                                                     //12-05-18|0x0074
         date *= 64;                                                                      //12-05-18|0x0074
         date += local_time->tm_min;                                                      //12-05-18|0x0074
         date *= 32;                                                                      //12-05-18|0x0074
         date += (local_time->tm_sec / 2);                                                //12-05-18|0x0074
         }                                                                                //12-05-18|0x0074
//---------------------------------------------------------------------------             //12-05-18|0x0075
    date    /=  32;                                                                       //12-05-18|0x0076
//---------------------------------------------------------------------------             //12-05-18|0x0077
    min      =  date % 64;                                                                //12-05-18|0x0078
    date    /=  64;                                                                       //12-05-18|0x0079
//---------------------------------------------------------------------------             //12-05-18|0x007a
    hour     =  date % 32;                                                                //12-05-18|0x007b
    date    /=  32;                                                                       //12-05-18|0x007c
//---------------------------------------------------------------------------             //12-05-18|0x007d
    day      =  date % 32;                                                                //12-05-18|0x007e
    date    /=  32;                                                                       //12-05-18|0x007f
//---------------------------------------------------------------------------             //12-05-18|0x0080
    month    =  (date % 16) + 1;                                                          //12-05-18|0x0081
    date    /=  16;                                                                       //12-05-18|0x0082
//---------------------------------------------------------------------------             //12-05-18|0x0083
    year     =  date + 1980;                                                              //12-05-18|0x0084
//***************************************************************************             //12-05-18|0x0085
//******                                                               ******             //12-05-18|0x0086
//****** Prepare the extent and name                                   ******             //12-05-18|0x0087
//******                                                               ******             //12-05-18|0x0088
//***************************************************************************             //12-05-18|0x0089
    sprintf(extent, "_%04d_%02d_%02d_%02d_%02d", year,month, day, hour, min);             //12-05-18|0x008a
    StrCat(extent,  RPT_EXTENT);                                                          //12-05-18|0x008b
//---------------------------------------------------------------------------             //12-05-18|0x008c
    if(ReportNameChar(ReportNameLength) != 0)              ReturnSystemError;             //12-05-18|0x008d
    if(StrLen(ReportNameLineAddr) != ReportNameLength)     ReturnSystemError;             //12-05-18|0x008e
//***************************************************************************             //12-05-18|0x008f
    if(FileInitialText(&report_file) != Success)           ReturnSystemError;             //12-05-18|0x0090
    switch(FileEnterName(ReportNameLineAddr, extent))                                     //12-05-18|0x0091
      {                                                                                   //12-05-18|0x0092
//---------------------------------------------------------------------------             //12-05-18|0x0093
        case Success:                                                                     //12-05-18|0x0094
          report_flag = 1;                                                                //12-05-18|0x0095
          if(FileRelease() != Success)                     ReturnSystemError;             //12-05-18|0x0096
          return(Success);                                                                //12-05-18|0x0097
//---------------------------------------------------------------------------             //12-05-18|0x0098
        case UserError:                                                                   //12-05-21|0x0099
          if(FileRelease() != Success)                     ReturnSystemError;             //12-05-21|0x009a
          return(UserError);                                                              //12-05-21|0x009b
//---------------------------------------------------------------------------             //12-05-18|0x009c
        default:                                           ReturnSystemError;             //12-05-18|0x009d
        }                                                                                 //12-05-18|0x009e
}                                                                                         //12-05-18|0x009f
//                                                                                        //05-24-97|0x009f
//***************************************************************************             //12-05-18|0x00a2
//***************************************************************************             //12-05-18|0x00a3
//******                                                               ******             //12-05-18|0x00a4
//******                   enable_file                                 ******             //12-05-18|0x00a5
//******                                                               ******             //12-05-18|0x00a6
//***************************************************************************             //12-05-18|0x00a7
//***************************************************************************             //12-05-18|0x00a8
//*******************************************************************************         //10-29-97|0x00a9
//*******************************************************************************         //10-29-97|0x00a9
// enable_file                                                                            //12-05-18|0x00a9
//*******************************************************************************         //10-29-97|0x00a9
//*******************************************************************************         //10-29-97|0x00a9
void GUICOMM::enable_file(void) {                                                         //12-05-18|0x00a9
//*******************************************************************************         //10-29-97|0x00a9
//***************************************************************************             //12-05-18|0x00ab
//***************************************************************************             //12-05-18|0x00ac
    if(report_flag > 0)                                                                   //12-05-18|0x00ad
      {                                                                                   //12-05-18|0x00ae
        report_flag = 3;                                                                  //12-05-18|0x00af
        }                                                                                 //12-05-18|0x00b0
}                                                                                         //12-05-18|0x00b1
//                                                                                        //05-24-97|0x00b1
//***************************************************************************             //12-05-21|0x00b4
//***************************************************************************             //12-05-21|0x00b5
//******                                                               ******             //12-05-21|0x00b6
//******                   disable_file                                ******             //12-05-21|0x00b7
//******                                                               ******             //12-05-21|0x00b8
//***************************************************************************             //12-05-21|0x00b9
//***************************************************************************             //12-05-21|0x00ba
//*******************************************************************************         //10-29-97|0x00bb
//*******************************************************************************         //10-29-97|0x00bb
// disable_file                                                                           //12-05-21|0x00bb
//*******************************************************************************         //10-29-97|0x00bb
//*******************************************************************************         //10-29-97|0x00bb
void GUICOMM::disable_file(void) {                                                        //12-05-21|0x00bb
//*******************************************************************************         //10-29-97|0x00bb
//***************************************************************************             //12-05-21|0x00bd
//***************************************************************************             //12-05-21|0x00be
    if(report_flag == 3)                                                                  //12-05-21|0x00bf
      {                                                                                   //12-05-21|0x00c0
        report_flag = 2;                                                                  //12-05-21|0x00c1
        }                                                                                 //12-05-21|0x00c2
}                                                                                         //12-05-21|0x00c3
//                                                                                        //05-24-97|0x00c3
//***************************************************************************             //06-10-01|0x00c6
//***************************************************************************             //06-10-01|0x00c7
//******                                                               ******             //06-10-01|0x00c8
//******                   write_line                                  ******             //06-10-01|0x00c9
//******                                                               ******             //06-10-01|0x00ca
//***************************************************************************             //06-10-01|0x00cb
//***************************************************************************             //06-10-01|0x00cc
//*******************************************************************************         //10-29-97|0x00cd
//*******************************************************************************         //10-29-97|0x00cd
// write_line                                                                             //06-10-01|0x00cd
//*******************************************************************************         //10-29-97|0x00cd
//*******************************************************************************         //10-29-97|0x00cd
UINT GUICOMM::write_line(                                                                 //06-10-01|0x00cd
    SCHAR_FAR line                                                                        //06-10-01|0x00cd
    ) {                                                                                   //06-10-01|0x00cd
//*******************************************************************************         //10-29-97|0x00cd
//***************************************************************************             //06-10-01|0x00cf
//***************************************************************************             //06-10-01|0x00d0
    if(buffer[BufferSize]     != 0x00)                     ReturnSystemError;             //06-10-01|0x00d1
    if(buffer[0]              != 0x00)                     ReturnSystemError;             //06-10-01|0x00d2
//***************************************************************************             //06-10-01|0x00d3
    if(MemCCpy(&buffer[0], line, 0x00, BufferSize) == 0)   ReturnSystemError;             //06-10-01|0x00d4
//***************************************************************************             //06-10-01|0x00d5
    StrCat(&buffer[0], "\n");                                                             //06-10-01|0x00d6
    return(Success);                                                                      //06-10-01|0x00d7
}                                                                                         //06-10-01|0x00d8
//                                                                                        //05-24-97|0x00d8
//***************************************************************************             //06-10-02|0x00db
//***************************************************************************             //06-10-02|0x00dc
//******                                                               ******             //06-10-02|0x00dd
//******                   write_keybrd                                ******             //06-10-02|0x00de
//******                                                               ******             //06-10-02|0x00df
//***************************************************************************             //06-10-02|0x00e0
//***************************************************************************             //06-10-02|0x00e1
//*******************************************************************************         //10-29-97|0x00e2
//*******************************************************************************         //10-29-97|0x00e2
// write_keybrd                                                                           //06-10-02|0x00e2
//*******************************************************************************         //10-29-97|0x00e2
//*******************************************************************************         //10-29-97|0x00e2
UINT GUICOMM::write_keybrd(                                                               //06-10-02|0x00e2
    SCHAR_FAR line                                                                        //06-10-02|0x00e2
    ) {                                                                                   //06-10-02|0x00e2
//*******************************************************************************         //10-29-97|0x00e2
//***************************************************************************             //06-10-02|0x00e4
//***************************************************************************             //06-10-02|0x00e5
    if(buffer[BufferSize]     != 0x00)                     ReturnSystemError;             //06-10-02|0x00e6
    if(buffer[0]              != 0x00)                     ReturnSystemError;             //06-10-02|0x00e7
//***************************************************************************             //06-10-02|0x00e8
    if(MemCCpy(&buffer[0], line, 0x00, BufferSize) == 0)   ReturnSystemError;             //06-10-02|0x00e9
//***************************************************************************             //06-10-02|0x00ea
    return(Success);                                                                      //06-10-02|0x00eb
}                                                                                         //06-10-02|0x00ec
//                                                                                        //05-24-97|0x00ec
//***************************************************************************             //06-10-01|0x00ef
//***************************************************************************             //06-10-01|0x00f0
//******                                                               ******             //06-10-01|0x00f1
//******                   append_line                                 ******             //06-10-01|0x00f2
//******                                                               ******             //06-10-01|0x00f3
//***************************************************************************             //06-10-01|0x00f4
//***************************************************************************             //06-10-01|0x00f5
//*******************************************************************************         //10-29-97|0x00f6
//*******************************************************************************         //10-29-97|0x00f6
// append_line                                                                            //06-10-01|0x00f6
//*******************************************************************************         //10-29-97|0x00f6
//*******************************************************************************         //10-29-97|0x00f6
UINT GUICOMM::append_line(                                                                //06-10-01|0x00f6
    SCHAR_FAR line                                                                        //06-10-01|0x00f6
    ) {                                                                                   //06-10-01|0x00f6
//*******************************************************************************         //10-29-97|0x00f6
//***************************************************************************             //06-10-01|0x00f8
//***************************************************************************             //06-10-01|0x00f9
  ULONG pos;                                                                         //06-10-01|0x00fa
//***************************************************************************             //06-10-01|0x00fb
//***************************************************************************             //06-10-01|0x00fc
    if(buffer[BufferSize]     != 0x00)                     ReturnSystemError;             //06-10-01|0x00fd
    pos = StrLen(buffer);                                                                 //06-10-01|0x00fe
//***************************************************************************             //06-10-01|0x00ff
    if(pos                    >= BufferSize-3)             ReturnSystemError;             //06-10-01|0x0100
    if(pos                    == 0)                        ReturnSystemError;             //06-10-01|0x0101
    if(buffer[pos]            != 0x00)                     ReturnSystemError;             //06-10-01|0x0102
//***************************************************************************             //06-10-01|0x0103
    if(MemCCpy(&buffer[pos], line, 0x00, BufferSize-pos) == 0)                            //06-10-01|0x0104
                                                           ReturnSystemError;             //06-10-01|0x0105
//***************************************************************************             //06-10-01|0x0106
    StrCat(&buffer[0], "\n");                                                             //06-10-01|0x0107
    return(Success);                                                                      //06-10-01|0x0108
}                                                                                         //06-10-01|0x0109
//                                                                                        //05-24-97|0x0109
//***************************************************************************             //07-03-23|0x010c
//***************************************************************************             //07-03-23|0x010d
//******                                                               ******             //07-03-23|0x010e
//******                   test_empty                                  ******             //07-03-23|0x010f
//******                                                               ******             //07-03-23|0x0110
//***************************************************************************             //07-03-23|0x0111
//***************************************************************************             //07-03-23|0x0112
//*******************************************************************************         //10-29-97|0x0113
//*******************************************************************************         //10-29-97|0x0113
// test_empty                                                                             //07-03-23|0x0113
//*******************************************************************************         //10-29-97|0x0113
//*******************************************************************************         //10-29-97|0x0113
UINT GUICOMM::test_empty(void) {                                                          //07-03-23|0x0113
//*******************************************************************************         //10-29-97|0x0113
//***************************************************************************             //07-03-23|0x0115
//***************************************************************************             //07-03-23|0x0116
    if(buffer[0]  == 0x00)                                       return(Yes);             //07-03-23|0x0117
    return(No);                                                                           //07-03-23|0x0118
}                                                                                         //07-03-23|0x0119
//                                                                                        //05-24-97|0x0119
//***************************************************************************             //06-08-29|0x011c
//***************************************************************************             //06-08-29|0x011d
//******                                                               ******             //06-08-29|0x011e
//******                   read_line                                   ******             //06-08-29|0x011f
//******                                                               ******             //06-08-29|0x0120
//***************************************************************************             //06-08-29|0x0121
//***************************************************************************             //06-08-29|0x0122
//*******************************************************************************         //10-29-97|0x0123
//*******************************************************************************         //10-29-97|0x0123
// read_line                                                                              //06-08-29|0x0123
//*******************************************************************************         //10-29-97|0x0123
//*******************************************************************************         //10-29-97|0x0123
UINT GUICOMM::read_line(                                                                  //06-08-29|0x0123
    SCHAR_FAR line,                                                                       //06-08-29|0x0123
    ULONG max_chars                                                                       //06-08-29|0x0123
    ) {                                                                                   //06-08-29|0x0123
//*******************************************************************************         //10-29-97|0x0123
//***************************************************************************             //06-08-29|0x0125
//***************************************************************************             //06-08-29|0x0126
  SCHAR_FAR addr;                                                                    //06-08-29|0x0127
//***************************************************************************             //06-08-29|0x0128
//***************************************************************************             //06-08-29|0x0129
    if(buffer[BufferSize] != 0x00)                         ReturnSystemError;             //06-08-29|0x012a
    if(max_chars          >= 4096)                         ReturnSystemError;             //06-08-29|0x012b
//***************************************************************************             //06-08-29|0x012c
    switch(buffer[0])                                                                     //06-08-29|0x012d
      {                                                                                   //06-08-29|0x012e
        case 0x00:  MemSet(buffer, 0x00, BufferSize);            return(Yes);             //06-08-29|0x012f
        default:                                                      break;              //06-08-29|0x0130
        }                                                                                 //06-08-29|0x0131
//***************************************************************************             //06-08-29|0x0132
    MemSet(line, 0x00, max_chars);                                                        //06-08-29|0x0133
    if(MemCCpy(line, buffer, 0x0a, max_chars-1) == 0)      ReturnSystemError;             //06-08-29|0x0134
//***************************************************************************             //12-05-21|0x0135
    if(report_flag == 3)                                                                  //12-05-21|0x0136
      {                                                                                   //12-05-21|0x0137
        switch(write_report(buffer, max_chars))                  _SwitchGroup             //12-05-21|0x0138
        }                                                                                 //12-05-21|0x0139
//***************************************************************************             //06-08-29|0x013a
    if((addr = StrChr(buffer, 0x0a)) == 0)                 ReturnSystemError;             //06-08-29|0x013b
    if(MemCCpy(buffer, addr+1, 0x00, BufferSize) == 0)     ReturnSystemError;             //06-08-29|0x013c
    return(No);                                                                           //06-08-29|0x013d
}                                                                                         //06-08-29|0x013e
//                                                                                        //05-24-97|0x013e
//***************************************************************************             //12-05-21|0x0141
//***************************************************************************             //12-05-21|0x0142
//******                                                               ******             //12-05-21|0x0143
//******                   write_report                                ******             //12-05-21|0x0144
//******                                                               ******             //12-05-21|0x0145
//***************************************************************************             //12-05-21|0x0146
//***************************************************************************             //12-05-21|0x0147
//*******************************************************************************         //10-29-97|0x0148
//*******************************************************************************         //10-29-97|0x0148
// write_report                                                                           //12-05-21|0x0148
//*******************************************************************************         //10-29-97|0x0148
//*******************************************************************************         //10-29-97|0x0148
UINT GUICOMM::write_report(                                                               //12-05-21|0x0148
    SCHAR_FAR line,                                                                       //12-05-21|0x0148
    ULONG max_chars                                                                       //12-05-21|0x0148
    ) {                                                                                   //12-05-21|0x0148
//*******************************************************************************         //10-29-97|0x0148
//***************************************************************************             //12-05-21|0x0149
//***************************************************************************             //12-05-21|0x014a
  SWORD size;                                                                        //check   |0x014b
  STRING_DATA report_string;                                                         //12-05-21|0x014c
//***************************************************************************             //12-05-21|0x014d
    if(*line != 0x0a)                                                                     //12-05-21|0x014e
      {                                                                                   //12-05-21|0x014f
        MemSet(&report_string, 0x00, sizeof(STRING_DATA));                                //12-05-21|0x0150
        if(MemCCpy(ReportStringLineAddr, line, 0x0a, max_chars-1) == 0)                   //12-05-21|0x0151
        size = StrLen(ReportStringLineAddr);                                              //check   |0x0152
        if(TruncSintInt(&ReportStringLength, size) != Success)                            //check   |0x0153
                                                           ReturnSystemError;             //check   |0x0154
        if((--ReportStringLength) == 0)                    ReturnSystemError;             //12-05-21|0x0155
        if(ReportStringChar(ReportStringLength) != 0x0a)   ReturnSystemError;             //12-05-21|0x0156
        ReportStringChar(ReportStringLength) = 0x00;                                      //12-05-21|0x0157
//---------------------------------------------------------------------------             //12-05-21|0x0158
        switch(FileCommitText(&report_file))                     _SwitchGroup             //12-05-21|0x0159
        switch(FilePutText(&report_string))                                               //12-05-21|0x015a
          {                                                                               //12-05-21|0x015b
            case Success:                                            break;               //12-05-21|0x015c
            case UserError:                                                               //12-05-21|0x015d
              switch(FileRelease())                              _SwitchGroup             //12-05-21|0x015e
              return(UserError);                                                          //12-05-21|0x015f
            default:                                       ReturnSystemError;             //12-05-21|0x0160
            }                                                                             //12-05-21|0x0161
        switch(FileRelease())                                    _SwitchGroup             //12-05-21|0x0162
        }                                                                                 //12-05-21|0x0163
//***************************************************************************             //12-05-21|0x0164
    switch(FileCommitText(&report_file))                         _SwitchGroup             //12-05-21|0x0165
    switch(FilePutCRLF())                                                                 //12-05-21|0x0166
      {                                                                                   //12-05-21|0x0167
        case Success:                                                break;               //12-05-21|0x0168
        case UserError:                                                                   //12-05-21|0x0169
          switch(FileRelease())                                  _SwitchGroup             //12-05-21|0x016a
          return(UserError);                                                              //12-05-21|0x016b
        default:                                           ReturnSystemError;             //12-05-21|0x016c
        }                                                                                 //12-05-21|0x016d
    switch(FileRelease())                                        _SwitchGroup             //12-05-21|0x016e
    return(Success);                                                                      //06-10-01|0x016f
}                                                                                         //06-10-01|0x0170
//                                                                                        //05-24-97|0x0170
//***************************************************************************             //12-05-21|0x0173
//***************************************************************************             //12-05-21|0x0174
//******                                                               ******             //12-05-21|0x0175
//******                   close_report                                ******             //12-05-21|0x0176
//******                                                               ******             //12-05-21|0x0177
//***************************************************************************             //12-05-21|0x0178
//***************************************************************************             //12-05-21|0x0179
//*******************************************************************************         //10-29-97|0x017a
//*******************************************************************************         //10-29-97|0x017a
// close_report                                                                           //12-05-21|0x017a
//*******************************************************************************         //10-29-97|0x017a
//*******************************************************************************         //10-29-97|0x017a
UINT GUICOMM::close_report(void) {                                                        //12-05-21|0x017a
//*******************************************************************************         //10-29-97|0x017a
//***************************************************************************             //12-05-21|0x017c
//***************************************************************************             //12-05-21|0x017d
    if(report_flag >=2)                                                                   //12-05-21|0x017e
      {                                                                                   //12-05-21|0x017f
        report_flag = 0;                                                                  //12-05-21|0x0180
        switch(FileCommitText(&report_file))                   _SwitchGroup               //12-05-21|0x0181
        switch(delete_menu())                                                             //12-05-21|0x0182
          {                                                                               //12-05-21|0x0183
            case No:  switch(FileDelete())                     _SwitchBreak;              //12-05-21|0x0184
            case Yes: switch(FileClose())                      _SwitchBreak;              //12-05-21|0x0185
            default:                                       ReturnSystemError;             //12-05-21|0x0186
            }                                                                             //12-05-21|0x0187
        switch(FileRelease())                                    _SwitchGroup             //12-05-21|0x0188
        }                                                                                 //12-05-21|0x0189
    report_flag = 0;                                                                      //12-05-21|0x018a
    return(Success);                                                                      //12-05-21|0x018b
}                                                                                         //12-05-21|0x018c
//                                                                                        //05-24-97|0x018c
//***************************************************************************             //12-05-21|0x018f
//***************************************************************************             //12-05-21|0x0190
//******                                                               ******             //12-05-21|0x0191
//******                   delete_menu                                 ******             //12-05-21|0x0192
//******                                                               ******             //12-05-21|0x0193
//***************************************************************************             //12-05-21|0x0194
//***************************************************************************             //12-05-21|0x0195
//*******************************************************************************         //10-29-97|0x0196
//*******************************************************************************         //10-29-97|0x0196
// delete_menu                                                                            //12-05-21|0x0196
//*******************************************************************************         //10-29-97|0x0196
//*******************************************************************************         //10-29-97|0x0196
UINT GUICOMM::delete_menu(void) {                                                         //12-05-21|0x0196
//*******************************************************************************         //10-29-97|0x0196
//***************************************************************************             //12-05-21|0x0197
//***************************************************************************             //12-05-21|0x0198
//***************************************************************************             //12-05-21|0x0199
//***************************************************************************             //12-05-21|0x019a
  SCHAR keystroke[17];                                                               //12-05-21|0x019b
//***************************************************************************             //12-05-21|0x019c
loop:                                                                                     //12-05-21|0x019d
    printf("\nKeep the Console Record File?\n");                                          //12-05-21|0x019e
    puts("Y-Yes, N-No:  Depress Key Followed by Enter");                                  //12-05-21|0x019f
    MemSet(&keystroke[0], 0, 16);                                                         //12-05-21|0x01a0
    fgets(&keystroke[0], 16, stdin);                                                      //12-05-21|0x01a1
    switch(keystroke[0])                                                                  //12-05-21|0x01a2
      {                                                                                   //12-05-21|0x01a3
        case 'Y': printf("\n");                             return(Yes);                  //12-05-21|0x01a4
        case 'N': printf("\n");                             return(No);                   //12-05-21|0x01a5
        default:                                                  goto loop;              //12-05-21|0x01a6
        }                                                                                 //12-05-21|0x01a7
}                                                                                         //12-05-21|0x01a8
//                                                                                        //05-24-97|0x01a8
//***************************************************************************             //12-05-21|0x01ab
//***************************************************************************             //12-05-21|0x01ac
//******                                                               ******             //12-05-21|0x01ad
//******                        constructor                            ******             //12-05-21|0x01ae
//******                                                               ******             //12-05-21|0x01af
//***************************************************************************             //12-05-21|0x01b0
//***************************************************************************             //12-05-21|0x01b1
//*******************************************************************************         //10-29-97|0x01b2
//*******************************************************************************         //10-29-97|0x01b2
// CONSTRUCTOR                                                                            //12-05-21|0x01b2
//*******************************************************************************         //10-29-97|0x01b2
//*******************************************************************************         //10-29-97|0x01b2
GUICOMM::GUICOMM() {                                                                      //12-05-21|0x01b2
//***************************************************************************             //12-05-21|0x01b3
//***************************************************************************             //12-05-21|0x01b4
    report_flag = 0;                                                                      //12-05-21|0x01b5
    MemSet(&report_file, 0, sizeof(TEXT_FILE_DATA));                                      //12-05-21|0x01b6
}                                                                                         //12-05-21|0x01b7
//                                                                                        //05-24-97|0x01b7
//*******************************************************************************         //05-24-97|0x01b9
//*******************************************************************************         //05-24-97|0x01b9
//****                       END OF FILE                                     ****         //05-24-97|0x01b9
//*******************************************************************************         //05-24-97|0x01b9
//*******************************************************************************         //05-24-97|0x01b9
