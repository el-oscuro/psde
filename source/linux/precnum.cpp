//*****************************************************************************           //06-09-28|0x001f
//*****************************************************************************           //06-09-28|0x001f
//                                                                                        //06-09-28|0x001f
// NUMERICAL MANAGEMENT ROUTINES                                                          //06-09-28|0x001f
//                                                                                        //06-09-28|0x001f
//*****************************************************************************           //06-09-28|0x001f
//*****************************************************************************           //06-09-28|0x001f
//  Copyright: 2006 Robert H. Adams                                                       //06-09-28|0x001f
//*****************************************************************************           //06-09-28|0x001f
//  The purpose of this program as well as instructions regarding its use is              //06-09-28|0x001f
//  defined in the associated manual.                                                     //06-09-28|0x001f
//*****************************************************************************           //06-09-28|0x001f
//  This program is free software; you can redistribute it and/or modify                  //06-09-28|0x001f
//  it under the terms of the GNU General Public License as published by                  //06-09-28|0x001f
//  the Free Software Foundation; either version 2 of the License, or                     //06-09-28|0x001f
//  (at your option) any later version.                                                   //06-09-28|0x001f
//                                                                                        //06-09-28|0x001f
//  This program is distributed in the hope that it will be useful,                       //06-09-28|0x001f
//  but WITHOUT ANY WARRANTY; without even the implied warranty of                        //06-09-28|0x001f
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                         //06-09-28|0x001f
//  GNU General Public License for more details.                                          //06-09-28|0x001f
//                                                                                        //06-09-28|0x001f
//  You should have received a copy of the GNU General Public License                     //06-09-28|0x001f
//  along with this program; if not, write to the Free Software                           //06-09-28|0x001f
//  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA., 02110-1301            //06-09-28|0x001f
//  USA                                                                                   //06-09-28|0x001f
//*****************************************************************************           //06-09-28|0x001f
//  For further information, please contact Robert Adams:                                 //06-09-28|0x001f
//     EMail:    robert.adams@whatifwe.com                                                //06-09-28|0x001f
//     Mail:     PO Box 156, Sun Valley, Ca. 91353-0155, USA                              //06-09-28|0x001f
//  Or visit the website, "www.whatifwe.com".                                             //06-09-28|0x001f
//*****************************************************************************           //06-09-28|0x001f
//*****************************************************************************           //06-09-28|0x001f
#ifdef WIN31_SYSTEM                                                                       //05-24-97|0x0020
#include "precwn31.h"                                                                     //05-24-97|0x0020
#endif                                                                                    //05-24-97|0x0020
#ifdef WIN95_SYSTEM                                                                       //05-24-97|0x0020
#include "precwn95.h"                                                                     //05-24-97|0x0020
#endif                                                                                    //05-24-97|0x0020
#ifdef MSDOS_SYSTEM                                                                       //05-24-97|0x0020
#include "precdos.h"                                                                      //05-24-97|0x0020
#endif                                                                                    //05-24-97|0x0020
#include "prechost.h"                                                                     //05-24-97|0x0020
#include "precnum.h"                                                                      //06-09-28|0x0020
#include "precnum.hxx"                                                                    //06-09-28|0x0020
#include "precnum.hpp"                                                                    //06-09-28|0x0020
#include "precutil.h"                                                                     //06-09-28|0x0021
#include "precdiag.h"                                                                     //06-09-28|0x0022
#include "prectext.h"                                                                     //06-09-28|0x0023
#include "precreg.h"                                                                      //06-09-28|0x0024
#include "global.hxx"                                                                     //check   |0x0025
#define StrCmp(i,j) ((strcmp(i,j) == 0) ? 0 : 1)                                          //06-09-29|0x002d
#define StrLen(i) strlen(i)                                                               //06-09-29|0x002d
#define StrCat(i,j) strcat(i,j)                                                           //06-09-29|0x002d
#define StrCpy(i,j) strcpy(i,j)                                                           //06-09-29|0x002d
#define StrChr(i,j) strchr(i,j)                                                           //06-09-29|0x002d
#define StrRChr(i,j) strrchr(i,j)                                                         //06-09-29|0x002d
#define StrToByteInt(i,j) GetInteger(i,&j,0xff)                                           //06-09-29|0x002d
#define StrToInt(i,j) GetInteger(i,&j,0xffff)                                             //06-09-29|0x002d
#define StrToLongInt(i,j) GetInteger(i,&j,0xffffffffL)                                    //06-09-29|0x002d
#define StrToByteHex(i,j) GetHex(i,&j,1)                                                  //06-09-29|0x002d
#define StrToHex(i,j) GetHex(i,&j,2)                                                      //06-09-29|0x002d
#define StrToLongHex(i,j) GetHex(i,&j,4)                                                  //06-09-29|0x002d
#define FindName(i) strrchr(i, '/')                                                       //06-09-29|0x002d
PRECNUM prec_num;                                                                         //06-09-29|0x004a
static UINT test_samples[TestIndex];                                                      //06-09-29|0x0054
//***************************************************************************             //04-08-23|0x005b
//***************************************************************************             //04-08-23|0x005c
//******                                                               ******             //04-08-23|0x005d
//******                        numeric_text_in                        ******             //04-08-23|0x005e
//******                                                               ******             //04-08-23|0x005f
//***************************************************************************             //04-08-23|0x0060
//***************************************************************************             //04-08-23|0x0061
//*******************************************************************************         //10-29-97|0x0069
//*******************************************************************************         //10-29-97|0x0069
// numeric_text_in                                                                        //06-09-29|0x0069
//*******************************************************************************         //10-29-97|0x0069
//*******************************************************************************         //10-29-97|0x0069
UINT PRECNUM::numeric_text_in(                                                            //06-09-29|0x0069
    ARITH_DATA_FAR NumOut,                                                                //06-09-29|0x0069
    STRING_DATA_FAR Addr                                                                  //06-09-29|0x0069
    ) {                                                                                   //06-09-29|0x0069
//*******************************************************************************         //10-29-97|0x0069
//***************************************************************************             //04-08-23|0x006b
//***************************************************************************             //04-08-23|0x006c
    if(NumOutType != 0)                                    ReturnSystemError;             //05-06-27|0x006d
//***************************************************************************             //04-08-23|0x006e
//*****                                                                 *****             //04-08-23|0x006f
//*****  1-Byte Conversion                                              *****             //04-08-23|0x0070
//*****                                                                 *****             //04-08-23|0x0071
//***************************************************************************             //04-08-23|0x0072
    NumOutType = 1;                                                                       //05-06-27|0x0073
//---------------------------------------------------------------------------             //05-06-27|0x0074
    TestSample(numeric_text_in1);                                                         //05-06-27|0x0075
    if(StrToByteHex(&(AddrLine), NumOutUlong))               return(Success);             //05-06-27|0x0076
//***************************************************************************             //04-08-23|0x0077
//*****                                                                 *****             //04-08-23|0x0078
//*****  2-Byte Conversion                                              *****             //04-08-23|0x0079
//*****                                                                 *****             //04-08-23|0x007a
//***************************************************************************             //04-08-23|0x007b
    NumOutType = 2;                                                                       //04-10-05|0x007c
//---------------------------------------------------------------------------             //04-08-23|0x007d
    TestSample(numeric_text_in3);                                                         //04-12-28|0x007e
    if(StrToHex(&(AddrLine), NumOutUlong))                   return(Success);             //05-06-27|0x007f
//---------------------------------------------------------------------------             //04-08-23|0x0080
    TestSample(numeric_text_in4);                                                         //04-10-05|0x0081
    if(StrToInt(&(AddrLine), NumOutUlong))                   return(Success);             //05-06-27|0x0082
//***************************************************************************             //05-06-27|0x0083
//*****                                                                 *****             //05-06-27|0x0084
//*****  4-Byte Conversion                                              *****             //05-06-27|0x0085
//*****                                                                 *****             //05-06-27|0x0086
//***************************************************************************             //05-06-27|0x0087
    NumOutType = 4;                                                                       //05-06-27|0x0088
//---------------------------------------------------------------------------             //05-06-27|0x0089
    TestSample(numeric_text_in5);                                                         //05-06-27|0x008a
    if(StrToLongHex(&(AddrLine), NumOutUlong))               return(Success);             //05-06-27|0x008b
//---------------------------------------------------------------------------             //05-06-27|0x008c
    TestSample(numeric_text_in6);                                                         //05-06-27|0x008d
    if(StrToLongInt(&(AddrLine), NumOutUlong))               return(Success);             //05-06-27|0x008e
//***************************************************************************             //05-06-27|0x008f
    NumOutType = 0;                                                                       //06-09-29|0x0090
    return(Success);                                                                      //06-09-29|0x0091
}                                                                                         //98-03-28|0x0092
//                                                                                        //05-24-97|0x0092
//***************************************************************************             //04-08-23|0x0095
//***************************************************************************             //04-08-23|0x0096
//******                                                               ******             //04-08-23|0x0097
//******                           numeric_out                         ******             //04-08-23|0x0098
//******                                                               ******             //04-08-23|0x0099
//***************************************************************************             //04-08-23|0x009a
//***************************************************************************             //04-08-23|0x009b
//*******************************************************************************         //10-29-97|0x00a2
//*******************************************************************************         //10-29-97|0x00a2
// numeric_out                                                                            //06-09-29|0x00a2
//*******************************************************************************         //10-29-97|0x00a2
//*******************************************************************************         //10-29-97|0x00a2
UINT PRECNUM::numeric_out(                                                                //06-09-29|0x00a2
    STRING_DATA_FAR Addr,                                                                 //06-09-29|0x00a2
    ARITH_DATA_FAR NumIn                                                                  //06-09-29|0x00a2
    ) {                                                                                   //06-09-29|0x00a2
//*******************************************************************************         //10-29-97|0x00a2
//***************************************************************************             //04-08-23|0x00a7
//***************************************************************************             //04-08-23|0x00a8
    switch(NumInType)                                                                     //05-06-27|0x00a9
      {                                                                                   //05-06-27|0x00aa
//---------------------------------------------------------------------------             //05-06-27|0x00ab
        case 1:   NumInUlong &= 0xff;                                                     //check   |0x00ac
                  sprintf(&AddrLine, "0x%02x", NumInUlong);                               //check   |0x00ad
                  AddrLength = 4;                                                         //check   |0x00ae
                  TestSample(numeric_out_1);                                              //check   |0x00af
                  break;                                                                  //05-06-27|0x00b0
//---------------------------------------------------------------------------             //05-06-27|0x00b1
        case 2:   NumInUlong &=  0xffff;                                                  //check   |0x00b2
                  sprintf(&AddrLine, "0x%04x", NumInUlong);                               //06-09-29|0x00b3
                  AddrLength = 6;                                                         //06-09-29|0x00b4
                  TestSample(numeric_out_2);                                              //06-09-29|0x00b5
                  break;                                                                  //05-06-27|0x00b6
//---------------------------------------------------------------------------             //05-06-27|0x00b7
        case 4:   sprintf(&AddrLine, "0x%08x",  NumInUlong);                              //check   |0x00b8
                  AddrLength = 10;                                                        //check   |0x00b9
                  TestSample(numeric_out_3);                                              //check   |0x00ba
                  break;                                                                  //05-06-27|0x00bb
//---------------------------------------------------------------------------             //05-06-27|0x00bc
        default:                                           ReturnSystemError;             //05-06-27|0x00bd
        }                                                                                 //05-06-27|0x00be
//***************************************************************************             //04-08-23|0x00bf
    AddrType     = I_NAME;                                                                //05-06-13|0x00c0
    return(Success);                                                                      //06-09-29|0x00c1
}                                                                                         //98-08-01|0x00c2
//                                                                                        //05-24-97|0x00c2
//***************************************************************************             //04-08-23|0x00c6
//***************************************************************************             //04-08-23|0x00c7
//******                                                               ******             //04-08-23|0x00c8
//******  get_integer                                                  ******             //04-08-23|0x00c9
//******                                                               ******             //04-08-23|0x00ca
//***************************************************************************             //04-08-23|0x00cb
//***************************************************************************             //04-08-23|0x00cc
//*******************************************************************************         //10-29-97|0x00ce
//*******************************************************************************         //10-29-97|0x00ce
// get_integer                                                                            //check   |0x00ce
//*******************************************************************************         //10-29-97|0x00ce
//*******************************************************************************         //10-29-97|0x00ce
UINT PRECNUM::get_integer(                                                                //check   |0x00ce
    SCHAR_FAR In,                                                                         //check   |0x00ce
    ULONG_FAR Out,                                                                        //check   |0x00ce
    ULONG MaxValue                                                                        //check   |0x00ce
    ) {                                                                                   //check   |0x00ce
//*******************************************************************************         //10-29-97|0x00ce
//***************************************************************************             //05-04-22|0x00d0
  WORDS work;                                                                        //05-04-22|0x00d1
  WORDS work_char;                                                                   //05-04-22|0x00d2
  ULONG measure;                                                                     //05-04-22|0x00d3
  ULONG char_no;                                                                     //05-04-22|0x00d4
  UINT flag;                                                                         //05-04-22|0x00d5
//***************************************************************************             //05-04-22|0x00d6
  work.ulong  = 0;                                                                        //05-04-22|0x00d7
  work.char0  = *In;                                                                      //05-04-22|0x00d8
  work.slong -= 0x30;                                                                     //05-04-22|0x00d9
//---------------------------------------------------------------------------             //05-04-22|0x00da
  flag        = ((work.slong < 0) || (work.slong > 9)) ? 0x0000 : 0x0001;                 //05-04-22|0x00db
  char_no   = 1;                                                                          //05-04-22|0x00dc
//***************************************************************************             //05-04-22|0x00dd
  work_char.ulong   = 0;                                                                  //05-04-22|0x00de
  work_char.char0   = *(In+char_no);                                                      //05-04-22|0x00df
  work_char.ulong  -= 0x30;                                                               //05-04-22|0x00e0
//---------------------------------------------------------------------------             //05-04-22|0x00e1
  while(   (work_char.slong >= 0)                                                         //05-04-22|0x00e2
        && (work_char.slong <= 9)                                                         //05-04-22|0x00e3
        && (flag            == 1))                                                        //05-04-22|0x00e4
    {                                                                                     //05-04-22|0x00e5
//---------------------------------------------------------------------------             //05-04-22|0x00e6
      work.ulong       *= 10;                                                             //05-04-22|0x00e7
//---------------------------------------------------------------------------             //05-04-22|0x00e8
      measure           = MaxValue;                                                       //check   |0x00e9
      measure          -= work.ulong;                                                     //check   |0x00ea
//---------------------------------------------------------------------------             //check   |0x00eb
      if(measure <  work_char.ulong)                                                      //check   |0x00ec
        {                                                                                 //check   |0x00ed
          flag = 0x0000;                                                                  //check   |0x00ee
          }                                                                               //check   |0x00ef
//---------------------------------------------------------------------------             //check   |0x00f0
        else {                                                                            //check   |0x00f1
          work.ulong       += work_char.ulong;                                            //check   |0x00f2
          work_char.ulong   = 0;                                                          //check   |0x00f3
          char_no          += 1;                                                          //check   |0x00f4
          work_char.char0   = *(In+char_no);                                              //check   |0x00f5
          work_char.ulong  -= 0x30;                                                       //check   |0x00f6
          }                                                                               //check   |0x00f7
      }                                                                                   //check   |0x00f8
//---------------------------------------------------------------------------             //05-04-22|0x00f9
  if(*(In+char_no) != 0)                                                                  //check   |0x00fa
                            flag = 0;                                                     //check   |0x00fb
//---------------------------------------------------------------------------             //05-04-22|0x00fc
  *Out = (flag != 0) ? work.ulong : 0;                                                    //check   |0x00fd
  return(flag);                                                                           //05-04-22|0x00fe
}                                                                                         //05-04-22|0x00ff
//                                                                                        //05-24-97|0x00ff
//***************************************************************************             //04-10-05|0x0102
//***************************************************************************             //04-10-05|0x0103
//******                                                               ******             //04-10-05|0x0104
//******                       TEST WRAPPERS                           ******             //04-10-05|0x0105
//******                                                               ******             //04-10-05|0x0106
//***************************************************************************             //04-10-05|0x0107
//***************************************************************************             //04-10-05|0x0108
//*******************************************************************************         //10-29-97|0x0109
//*******************************************************************************         //10-29-97|0x0109
// precnum_test_reset                                                                     //04-10-05|0x0109
//*******************************************************************************         //10-29-97|0x0109
//*******************************************************************************         //10-29-97|0x0109
UINT PRECNUM::precnum_test_reset(void) {                                                  //04-10-05|0x0109
//*******************************************************************************         //10-29-97|0x0109
//************************************************************************                //04-10-05|0x0109
    switch(BasicTestReset())                                                              //04-10-05|0x0109
      {                                                                                   //04-10-05|0x0109
        case Success:                                     return(Success);                //04-10-05|0x0109
        default:                                        ReturnSystemError;                //04-10-05|0x0109
        }                                                                                 //04-10-05|0x0109
}                                                                                         //04-10-05|0x0109
//                                                                                        //05-24-97|0x0109
//***************************************************************************             //04-10-05|0x010a
//*******************************************************************************         //10-29-97|0x010b
//*******************************************************************************         //10-29-97|0x010b
// precnum_test_read                                                                      //04-10-05|0x010b
//*******************************************************************************         //10-29-97|0x010b
//*******************************************************************************         //10-29-97|0x010b
UINT PRECNUM::precnum_test_read(void) {                                                   //04-10-05|0x010b
//*******************************************************************************         //10-29-97|0x010b
//************************************************************************                //04-10-05|0x010b
    switch(BasicTestRead(&test_samples[0], test_samples[0]))                              //04-10-05|0x010b
      {                                                                                   //04-10-05|0x010b
        case Success:                                     return(Success);                //04-10-05|0x010b
        default:                                        ReturnSystemError;                //04-10-05|0x010b
        }                                                                                 //04-10-05|0x010b
}                                                                                         //04-10-05|0x010b
//                                                                                        //05-24-97|0x010b
//***************************************************************************             //04-10-05|0x010c
//*******************************************************************************         //10-29-97|0x010d
//*******************************************************************************         //10-29-97|0x010d
// precnum_test_write                                                                     //04-10-05|0x010d
//*******************************************************************************         //10-29-97|0x010d
//*******************************************************************************         //10-29-97|0x010d
UINT PRECNUM::precnum_test_write(void) {                                                  //04-10-05|0x010d
//*******************************************************************************         //10-29-97|0x010d
//************************************************************************                //04-10-05|0x010d
    switch(BasicTestWrite(&test_samples[0]))                                              //04-10-05|0x010d
      {                                                                                   //04-10-05|0x010d
        case Success:                                     return(Success);                //04-10-05|0x010d
        default:                                        ReturnSystemError;                //04-10-05|0x010d
        }                                                                                 //04-10-05|0x010d
}                                                                                         //04-10-05|0x010d
//                                                                                        //05-24-97|0x010d
//***************************************************************************             //04-10-05|0x010e
//*******************************************************************************         //10-29-97|0x010f
//*******************************************************************************         //10-29-97|0x010f
// precnum_test_report                                                                    //04-10-05|0x010f
//*******************************************************************************         //10-29-97|0x010f
//*******************************************************************************         //10-29-97|0x010f
UINT PRECNUM::precnum_test_report(void) {                                                 //04-10-05|0x010f
//*******************************************************************************         //10-29-97|0x010f
//************************************************************************                //04-10-05|0x010f
    switch(BasicTestReport(&test_samples[0], "PRECNUM"))                                  //04-10-05|0x010f
      {                                                                                   //04-10-05|0x010f
        case Success:                                     return(Success);                //04-10-05|0x010f
        default:                                        ReturnSystemError;                //04-10-05|0x010f
        }                                                                                 //04-10-05|0x010f
}                                                                                         //04-10-05|0x010f
//                                                                                        //05-24-97|0x010f
//***************************************************************************             //04-10-05|0x0110
//***************************************************************************             //04-10-05|0x0111
//******                                                               ******             //04-10-05|0x0112
//******                        constructor                            ******             //04-10-05|0x0113
//******                                                               ******             //04-10-05|0x0114
//***************************************************************************             //04-10-05|0x0115
//***************************************************************************             //04-10-05|0x0116
//*******************************************************************************         //10-29-97|0x0117
//*******************************************************************************         //10-29-97|0x0117
// CONSTRUCTOR                                                                            //04-10-05|0x0117
//*******************************************************************************         //10-29-97|0x0117
//*******************************************************************************         //10-29-97|0x0117
PRECNUM::PRECNUM() {                                                                      //04-10-05|0x0117
//***************************************************************************             //04-10-05|0x0118
//***************************************************************************             //04-10-05|0x0119
    { ULONG i;                                                                            //04-10-05|0x011a
      test_samples[NoTestSamples] = TestIndex;                                            //04-10-05|0x011a
      i = 1;                                                                              //04-10-05|0x011a
      while(i<TestIndex)                                                                  //04-10-05|0x011a
        {                                                                                 //04-10-05|0x011a
          test_samples[i] = 0;                                                            //04-10-05|0x011a
          ++i;                                                                            //04-10-05|0x011a
          }                                                                               //04-10-05|0x011a
      }                                                                                   //04-10-05|0x011a
}                                                                                         //04-10-05|0x011b
//                                                                                        //05-24-97|0x011b
//*******************************************************************************         //05-24-97|0x0120
//*******************************************************************************         //05-24-97|0x0120
//****                       END OF FILE                                     ****         //05-24-97|0x0120
//*******************************************************************************         //05-24-97|0x0120
//*******************************************************************************         //05-24-97|0x0120
