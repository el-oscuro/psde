//*****************************************************************************           //07-04-16|0x000b
//*****************************************************************************           //07-04-16|0x000b
//                                                                                        //07-04-16|0x000b
// DICTIONARY MANAGER UTILITY                                                             //07-04-16|0x000b
//                                                                                        //07-04-16|0x000b
//*****************************************************************************           //07-04-16|0x000b
//*****************************************************************************           //07-04-16|0x000b
//  Copyright: 2006 Robert H. Adams                                                       //07-04-16|0x000b
//*****************************************************************************           //07-04-16|0x000b
//  The purpose of this program as well as instructions regarding its use is              //07-04-16|0x000b
//  defined in the associated manual.                                                     //07-04-16|0x000b
//*****************************************************************************           //07-04-16|0x000b
//  This program is free software; you can redistribute it and/or modify                  //07-04-16|0x000b
//  it under the terms of the GNU General Public License as published by                  //07-04-16|0x000b
//  the Free Software Foundation; either version 2 of the License, or                     //07-04-16|0x000b
//  (at your option) any later version.                                                   //07-04-16|0x000b
//                                                                                        //07-04-16|0x000b
//  This program is distributed in the hope that it will be useful,                       //07-04-16|0x000b
//  but WITHOUT ANY WARRANTY; without even the implied warranty of                        //07-04-16|0x000b
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                         //07-04-16|0x000b
//  GNU General Public License for more details.                                          //07-04-16|0x000b
//                                                                                        //07-04-16|0x000b
//  You should have received a copy of the GNU General Public License                     //07-04-16|0x000b
//  along with this program; if not, write to the Free Software                           //07-04-16|0x000b
//  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA., 02110-1301            //07-04-16|0x000b
//  USA                                                                                   //07-04-16|0x000b
//*****************************************************************************           //07-04-16|0x000b
//  For further information, please contact Robert Adams:                                 //07-04-16|0x000b
//     EMail:    robert.adams@whatifwe.com                                                //07-04-16|0x000b
//     Mail:     PO Box 156, Sun Valley, Ca. 91353-0155, USA                              //07-04-16|0x000b
//  Or visit the website, "www.whatifwe.com".                                             //07-04-16|0x000b
//*****************************************************************************           //07-04-16|0x000b
//*****************************************************************************           //07-04-16|0x000b
#ifdef WIN31_SYSTEM                                                                       //05-24-97|0x000c
#include "precwn31.h"                                                                     //05-24-97|0x000c
#endif                                                                                    //05-24-97|0x000c
#ifdef WIN95_SYSTEM                                                                       //05-24-97|0x000c
#include "precwn95.h"                                                                     //05-24-97|0x000c
#endif                                                                                    //05-24-97|0x000c
#ifdef MSDOS_SYSTEM                                                                       //05-24-97|0x000c
#include "precdos.h"                                                                      //05-24-97|0x000c
#endif                                                                                    //05-24-97|0x000c
#include "prechost.h"                                                                     //05-24-97|0x000c
#include "basedictutil.h"                                                                 //07-04-16|0x000c
#include "basedictutil.hxx"                                                               //07-04-16|0x000c
#include "basedictutil.hpp"                                                               //07-04-16|0x000c
#include "precutil.h"                                                                     //11-05-28|0x000d
#include "precdiag.h"                                                                     //07-04-16|0x000e
#include "precfile.h"                                                                     //07-04-16|0x000f
#include "global.hxx"                                                                     //07-04-16|0x0010
#define Allocate(k) (k##_FAR) calloc(1,sizeof(k))                                         //07-04-16|0x0018
#define Free(k) free(k)                                                                   //07-04-16|0x0018
#define MemSet(i,j,k) memset(i,j,k)                                                       //07-04-16|0x0018
#define MemCCpy(i,j,k,l) Mem_C_Copy((UCHAR_FAR) i, (UCHAR_FAR) j,k,l)                     //07-04-16|0x0018
#define MemCpy(i,j,k) memcpy(i,j,k)                                                       //07-04-16|0x0018
#define LineEnd 0x0d                                                                      //07-04-16|0x0018
#define StrLen(i) strlen(i)                                                               //07-04-16|0x0019
#define StrCat(i,j) strcat(i,j)                                                           //07-04-16|0x0019
#define StrCpy(i,j) strcpy(i,j)                                                           //07-04-16|0x0019
#define StrCmp(i,j) Str_Comp((SCHAR_FAR)i,j,256)                                          //07-04-16|0x0019
#define StrRChr(i,j) strrchr(i,j)                                                         //07-04-16|0x0019
#define StrToByteInt(i,j) GetInteger(i,&j,0xff)                                           //07-04-16|0x0019
#define StrToInt(i,j) GetInteger(i,&j,0xffff)                                             //07-04-16|0x0019
#define StrToLongInt(i,j) GetInteger(i,&j,0xffffffffL)                                    //07-04-16|0x0019
#define StrToByteHex(i,j) GetHex(i,&j,1)                                                  //07-04-16|0x0019
#define StrToHex(i,j) GetHex(i,&j,2)                                                      //07-04-16|0x0019
#define StrToLongHex(i,j) GetHex(i,&j,4)                                                  //07-04-16|0x0019
#define FindName(i) strrchr(i, '/')                                                       //07-04-16|0x0019
BASEDICTUTIL base_dict_util;                                                              //07-04-16|0x0041
static UINT test_samples[TestIndex];                                                      //07-04-16|0x0050
//***************************************************************************             //07-01-17|0x0061
//***************************************************************************             //07-01-17|0x0062
//******                                                               ******             //07-01-17|0x0063
//******                dict_name(Addr, Name,   Extent)                ******             //07-01-17|0x0064
//******                                                               ******             //07-01-17|0x0065
//***************************************************************************             //07-01-17|0x0066
//***************************************************************************             //07-01-17|0x0067
//*******************************************************************************         //10-29-97|0x006e
//*******************************************************************************         //10-29-97|0x006e
// dict_name                                                                              //07-01-17|0x006e
//*******************************************************************************         //10-29-97|0x006e
//*******************************************************************************         //10-29-97|0x006e
UINT BASEDICTUTIL::dict_name(                                                             //07-01-17|0x006e
    DICT_DATA_FAR Addr,                                                                   //07-01-17|0x006e
    SCHAR_FAR Name,                                                                       //07-01-17|0x006e
    SCHAR_FAR Extent                                                                      //07-01-17|0x006e
    ) {                                                                                   //07-01-17|0x006e
//*******************************************************************************         //10-29-97|0x006e
//***************************************************************************             //07-01-17|0x0072
//***************************************************************************             //07-01-17|0x0073
    switch(FileInitialBinary(&DictFileData))                     _SwitchGroup             //07-01-17|0x0074
    switch(FileEnterName(Name, Extent))                          _SwitchGroup             //07-01-17|0x0075
    switch(FileRelease())                                        _SwitchGroup             //07-01-17|0x0076
    return_test(dict_name_1);                                                             //07-01-17|0x0077
//***************************************************************************             //07-01-17|0x0078
}                                                                                         //07-01-17|0x0079
//                                                                                        //05-24-97|0x0079
//***************************************************************************             //07-01-17|0x007c
//***************************************************************************             //07-01-17|0x007d
//******                                                               ******             //07-01-17|0x007e
//******                dict_exists(Addr, TimeAddr)                    ******             //07-01-17|0x007f
//******                                                               ******             //07-01-17|0x0080
//***************************************************************************             //07-01-17|0x0081
//***************************************************************************             //07-01-17|0x0082
//*******************************************************************************         //10-29-97|0x0089
//*******************************************************************************         //10-29-97|0x0089
// dict_exists                                                                            //07-01-17|0x0089
//*******************************************************************************         //10-29-97|0x0089
//*******************************************************************************         //10-29-97|0x0089
UINT BASEDICTUTIL::dict_exists(                                                           //07-01-17|0x0089
    DICT_DATA_FAR Addr,                                                                   //07-01-17|0x0089
    ULONG_FAR TimeFar                                                                     //07-01-17|0x0089
    ) {                                                                                   //07-01-17|0x0089
//*******************************************************************************         //10-29-97|0x0089
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-17|0x008d
    switch(FileExists(TimeFar))                                  _SwitchGroup             //07-01-17|0x008e
    switch(FileRelease())                                        _SwitchGroup             //07-01-17|0x008f
//***************************************************************************             //07-01-17|0x0090
    switch(*TimeFar)                                                                      //07-01-17|0x0091
      {                                                                                   //07-01-17|0x0092
        case 0:                                     return_no(dict_exists_1);             //07-01-17|0x0093
        default:                                   return_yes(dict_exists_2);             //07-04-16|0x0094
        }                                                                                 //07-01-17|0x0095
}                                                                                         //07-01-17|0x0096
//                                                                                        //05-24-97|0x0096
//***************************************************************************             //07-01-17|0x0099
//***************************************************************************             //07-01-17|0x009a
//******                                                               ******             //07-01-17|0x009b
//******                       initial_process(Addr)                   ******             //07-01-17|0x009c
//******                                                               ******             //07-01-17|0x009d
//***************************************************************************             //07-01-17|0x009e
//***************************************************************************             //07-01-17|0x009f
//*******************************************************************************         //10-29-97|0x00a5
//*******************************************************************************         //10-29-97|0x00a5
// initial_process                                                                        //07-01-17|0x00a5
//*******************************************************************************         //10-29-97|0x00a5
//*******************************************************************************         //10-29-97|0x00a5
void BASEDICTUTIL::initial_process(                                                       //07-01-17|0x00a5
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x00a5
    ) {                                                                                   //07-01-17|0x00a5
//*******************************************************************************         //10-29-97|0x00a5
//***************************************************************************             //07-01-17|0x00a9
//***************************************************************************             //07-01-17|0x00aa
    DictCurrentOffset = HashSize;                                                         //07-01-17|0x00ab
    DictSearchOffset  = HashSize;                                                         //07-01-17|0x00ac
    DictUpperBridge   = 1;                                                                //07-04-18|0x00ad
    DictLowerBridge   = 0;                                                                //07-04-18|0x00ae
    DictCurrentBridge = 0;                                                                //07-04-18|0x00af
    DictSearchBridge  = 0;                                                                //07-04-18|0x00b0
    TestSample(initial_process_1);                                                        //07-01-17|0x00b1
    return;                                                                               //07-01-17|0x00b2
}                                                                                         //07-01-17|0x00b3
//                                                                                        //05-24-97|0x00b3
//***************************************************************************             //07-01-17|0x00b6
//***************************************************************************             //07-01-17|0x00b7
//******                                                               ******             //07-01-17|0x00b8
//******                       init_hash_table(Addr)                   ******             //07-01-17|0x00b9
//******                                                               ******             //07-01-17|0x00ba
//***************************************************************************             //07-01-17|0x00bb
//***************************************************************************             //07-01-17|0x00bc
//*******************************************************************************         //10-29-97|0x00c2
//*******************************************************************************         //10-29-97|0x00c2
// init_hash                                                                              //07-01-17|0x00c2
//*******************************************************************************         //10-29-97|0x00c2
//*******************************************************************************         //10-29-97|0x00c2
void BASEDICTUTIL::init_hash(                                                             //07-01-17|0x00c2
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x00c2
    ) {                                                                                   //07-01-17|0x00c2
//*******************************************************************************         //10-29-97|0x00c2
//***************************************************************************             //07-01-17|0x00c6
//***************************************************************************             //07-01-17|0x00c7
  UINT i;                                                                            //07-01-17|0x00c8
//***************************************************************************             //07-01-17|0x00c9
//***************************************************************************             //07-01-17|0x00ca
    for(i=0; i<NoHash; ++i)                                                               //07-01-17|0x00cb
      {                                                                                   //07-01-17|0x00cc
        HashFirstOffset(i) = -1;                                                          //07-01-17|0x00cd
        HashLastOffset(i)  = -1;                                                          //07-01-17|0x00ce
        HashFirst(i)       = -1;                                                          //07-01-17|0x00cf
        HashLast(i)        = -1;                                                          //07-01-17|0x00d0
        }                                                                                 //07-01-17|0x00d1
    TestSample(init_hash_1);                                                              //07-01-17|0x00d2
    return;                                                                               //07-01-17|0x00d3
}                                                                                         //07-01-17|0x00d4
//                                                                                        //05-24-97|0x00d4
//***************************************************************************             //07-01-17|0x00d7
//***************************************************************************             //07-01-17|0x00d8
//******                                                               ******             //07-01-17|0x00d9
//******                       create_dict(Addr)                       ******             //07-01-17|0x00da
//******                                                               ******             //07-01-17|0x00db
//***************************************************************************             //07-01-17|0x00dc
//***************************************************************************             //07-01-17|0x00dd
//*******************************************************************************         //10-29-97|0x00e3
//*******************************************************************************         //10-29-97|0x00e3
// create_dict                                                                            //07-01-17|0x00e3
//*******************************************************************************         //10-29-97|0x00e3
//*******************************************************************************         //10-29-97|0x00e3
UINT BASEDICTUTIL::create_dict(                                                           //07-01-17|0x00e3
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x00e3
    ) {                                                                                   //07-01-17|0x00e3
//*******************************************************************************         //10-29-97|0x00e3
//***************************************************************************             //07-01-17|0x00e7
//***************************************************************************             //07-01-17|0x00e8
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-17|0x00e9
    switch(FileCreateRecord())                                                            //07-01-17|0x00ea
      {                                                                                   //07-01-17|0x00eb
        case Success:     switch(FileRelease())                 _SwitchBreak;             //07-01-17|0x00ec
        case UserError:   switch(FileRelease())                 _SwitchGroup;             //07-04-16|0x00ed
                          return(UserError);                                              //07-04-16|0x00ee
        default:                                            ReturnSystemError             //07-01-17|0x00ef
        }                                                                                 //07-01-17|0x00f0
//***************************************************************************             //07-01-17|0x00f1
    return_test(create_dict_1);                                                           //07-01-17|0x00f2
}                                                                                         //07-01-17|0x00f3
//                                                                                        //05-24-97|0x00f3
//***************************************************************************             //07-01-18|0x00f6
//***************************************************************************             //07-01-18|0x00f7
//******                                                               ******             //07-01-18|0x00f8
//******                       append_dict(Addr)                       ******             //07-01-18|0x00f9
//******                                                               ******             //07-01-18|0x00fa
//***************************************************************************             //07-01-18|0x00fb
//***************************************************************************             //07-01-18|0x00fc
//*******************************************************************************         //10-29-97|0x0102
//*******************************************************************************         //10-29-97|0x0102
// append_dict                                                                            //07-01-18|0x0102
//*******************************************************************************         //10-29-97|0x0102
//*******************************************************************************         //10-29-97|0x0102
UINT BASEDICTUTIL::append_dict(                                                           //07-01-18|0x0102
    DICT_DATA_FAR Addr                                                                    //07-01-18|0x0102
    ) {                                                                                   //07-01-18|0x0102
//*******************************************************************************         //10-29-97|0x0102
//***************************************************************************             //07-01-18|0x0106
//***************************************************************************             //07-01-18|0x0107
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-18|0x0108
    switch(FileAppendRecord())                                                            //07-01-18|0x0109
      {                                                                                   //07-01-18|0x010a
        case Success:     switch(FileRelease())                 _SwitchBreak;             //07-01-18|0x010b
        case UserError:   switch(FileRelease())                 _SwitchGroup;             //07-01-18|0x010c
                          return(UserError);                                              //07-01-18|0x010d
        default:                                            ReturnSystemError             //07-01-18|0x010e
        }                                                                                 //07-01-18|0x010f
//***************************************************************************             //07-01-18|0x0110
    return_test(append_dict_1);                                                           //07-01-18|0x0111
}                                                                                         //07-01-18|0x0112
//                                                                                        //05-24-97|0x0112
//***************************************************************************             //07-01-23|0x0115
//***************************************************************************             //07-01-23|0x0116
//******                                                               ******             //07-01-23|0x0117
//******                         read_dict(Addr)                       ******             //07-01-23|0x0118
//******                                                               ******             //07-01-23|0x0119
//***************************************************************************             //07-01-23|0x011a
//***************************************************************************             //07-01-23|0x011b
//*******************************************************************************         //10-29-97|0x0121
//*******************************************************************************         //10-29-97|0x0121
// read_dict                                                                              //07-01-23|0x0121
//*******************************************************************************         //10-29-97|0x0121
//*******************************************************************************         //10-29-97|0x0121
UINT BASEDICTUTIL::read_dict(                                                             //07-01-23|0x0121
    DICT_DATA_FAR Addr                                                                    //07-01-23|0x0121
    ) {                                                                                   //07-01-23|0x0121
//*******************************************************************************         //10-29-97|0x0121
//***************************************************************************             //07-01-23|0x0125
//***************************************************************************             //07-01-23|0x0126
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-23|0x0127
    switch(FileOpenRecord())                                                              //07-01-23|0x0128
      {                                                                                   //07-01-23|0x0129
        case Success:     switch(FileRelease())                 _SwitchBreak;             //07-01-23|0x012a
        case UserError:   switch(FileRelease())                 _SwitchGroup;             //07-01-23|0x012b
                          return(UserError);                                              //07-01-23|0x012c
        default:                                            ReturnSystemError             //07-01-23|0x012d
        }                                                                                 //07-01-23|0x012e
//***************************************************************************             //07-01-23|0x012f
    return_test(read_dict_1);                                                             //07-01-23|0x0130
}                                                                                         //07-01-23|0x0131
//                                                                                        //05-24-97|0x0131
//***************************************************************************             //07-01-18|0x0134
//***************************************************************************             //07-01-18|0x0135
//******                                                               ******             //07-01-18|0x0136
//******                       read_hash(Addr)                         ******             //07-01-18|0x0137
//******                                                               ******             //07-01-18|0x0138
//***************************************************************************             //07-01-18|0x0139
//***************************************************************************             //07-01-18|0x013a
//*******************************************************************************         //10-29-97|0x0140
//*******************************************************************************         //10-29-97|0x0140
// read_hash                                                                              //07-01-18|0x0140
//*******************************************************************************         //10-29-97|0x0140
//*******************************************************************************         //10-29-97|0x0140
UINT BASEDICTUTIL::read_hash(                                                             //07-01-18|0x0140
    DICT_DATA_FAR Addr                                                                    //07-01-18|0x0140
    ) {                                                                                   //07-01-18|0x0140
//*******************************************************************************         //10-29-97|0x0140
//***************************************************************************             //07-01-18|0x0144
//***************************************************************************             //07-01-18|0x0145
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-18|0x0146
    switch(BaseReadHash)                                         _SwitchGroup             //07-01-18|0x0147
    switch(FileRelease())                                        _SwitchGroup             //07-01-18|0x0148
//***************************************************************************             //07-01-18|0x0149
    return_test(read_hash_1);                                                             //07-01-18|0x014a
}                                                                                         //07-01-18|0x014b
//                                                                                        //05-24-97|0x014b
//***************************************************************************             //07-01-17|0x014e
//***************************************************************************             //07-01-17|0x014f
//******                                                               ******             //07-01-17|0x0150
//******                       write_hash(Addr)                        ******             //07-01-17|0x0151
//******                                                               ******             //07-01-17|0x0152
//***************************************************************************             //07-01-17|0x0153
//***************************************************************************             //07-01-17|0x0154
//*******************************************************************************         //10-29-97|0x015a
//*******************************************************************************         //10-29-97|0x015a
// write_hash                                                                             //07-01-17|0x015a
//*******************************************************************************         //10-29-97|0x015a
//*******************************************************************************         //10-29-97|0x015a
UINT BASEDICTUTIL::write_hash(                                                            //07-01-17|0x015a
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x015a
    ) {                                                                                   //07-01-17|0x015a
//*******************************************************************************         //10-29-97|0x015a
//***************************************************************************             //07-01-17|0x015e
//***************************************************************************             //07-01-17|0x015f
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-17|0x0160
    switch(BaseWriteHash)                                                                 //07-01-17|0x0161
      {                                                                                   //07-04-16|0x0162
        case Success:     switch(FileRelease())                 _SwitchBreak;             //07-04-16|0x0163
        case UserError:   switch(FileRelease())                 _SwitchGroup;             //07-04-16|0x0164
                          return(UserError);                                              //07-04-16|0x0165
        default:                                            ReturnSystemError             //07-04-16|0x0166
        }                                                                                 //07-04-16|0x0167
//***************************************************************************             //07-01-17|0x0168
    return_test(write_hash_1);                                                            //07-01-17|0x0169
}                                                                                         //07-01-17|0x016a
//                                                                                        //05-24-97|0x016a
//***************************************************************************             //07-01-18|0x016d
//***************************************************************************             //07-01-18|0x016e
//******                                                               ******             //07-01-18|0x016f
//******                       test_hash(Addr)                         ******             //07-01-18|0x0170
//******                                                               ******             //07-01-18|0x0171
//***************************************************************************             //07-01-18|0x0172
//***************************************************************************             //07-01-18|0x0173
//*******************************************************************************         //10-29-97|0x0179
//*******************************************************************************         //10-29-97|0x0179
// verify_hash                                                                            //07-01-18|0x0179
//*******************************************************************************         //10-29-97|0x0179
//*******************************************************************************         //10-29-97|0x0179
UINT BASEDICTUTIL::verify_hash(                                                           //07-01-18|0x0179
    DICT_DATA_FAR Addr                                                                    //07-01-18|0x0179
    ) {                                                                                   //07-01-18|0x0179
//*******************************************************************************         //10-29-97|0x0179
//***************************************************************************             //07-01-18|0x017d
//***************************************************************************             //07-01-18|0x017e
  UINT i;                                                                            //07-01-18|0x017f
//***************************************************************************             //07-01-18|0x0180
//***************************************************************************             //07-01-18|0x0181
    for(i=0; i<NoHash; ++i)                                                               //07-01-18|0x0182
      {                                                                                   //07-01-18|0x0183
        if(HashFirst(i) < 0)                                                              //07-01-18|0x0184
          {                                                                               //07-01-18|0x0185
            if(   (HashFirstOffset(i) != -1)                                              //07-01-18|0x0186
               || (HashLastOffset(i)  != -1)                                              //07-01-18|0x0187
               || (HashFirst(i)       != -1)                                              //07-01-18|0x0188
               || (HashLast(i)        != -1))                                             //07-01-18|0x0189
                                                           return(UserError);             //07-01-18|0x018a
            }                                                                             //07-01-18|0x018b
          else {                                                                          //07-01-18|0x018c
            if(   (HashFirstOffset(i)  < HashSize)                                        //07-01-18|0x018d
               || (HashLastOffset(i)   < HashSize)                                        //07-01-18|0x018e
               || (HashFirstOffset(i)  > FileLength)                                      //07-01-18|0x018f
               || (HashLastOffset(i)   > FileLength)                                      //07-01-18|0x0190
               || (HashLast(i)         < 0))                                              //07-01-18|0x0191
                                                           return(UserError);             //07-01-18|0x0192
            }                                                                             //07-01-18|0x0193
        }                                                                                 //07-01-18|0x0194
//***************************************************************************             //07-01-18|0x0195
    return_test(verify_hash_1);                                                           //07-01-18|0x0196
}                                                                                         //07-01-18|0x0197
//                                                                                        //05-24-97|0x0197
//***************************************************************************             //07-01-17|0x019a
//***************************************************************************             //07-01-17|0x019b
//******                                                               ******             //07-01-17|0x019c
//******            plan(Addr, HeaderPlan, Input);                     ******             //07-01-17|0x019d
//******                                                               ******             //07-01-17|0x019e
//***************************************************************************             //07-01-17|0x019f
//***************************************************************************             //07-01-17|0x01a0
//*******************************************************************************         //10-29-97|0x01a5
//*******************************************************************************         //10-29-97|0x01a5
// plan                                                                                   //07-01-17|0x01a5
//*******************************************************************************         //10-29-97|0x01a5
//*******************************************************************************         //10-29-97|0x01a5
UINT BASEDICTUTIL::plan(                                                                  //07-01-17|0x01a5
    DICT_DATA_FAR Addr,                                                                   //07-01-17|0x01a5
    SLONG HeaderPlan,                                                                     //07-01-17|0x01a5
    STRING_DATA_FAR Input                                                                 //07-01-17|0x01a5
    ) {                                                                                   //07-01-17|0x01a5
//*******************************************************************************         //10-29-97|0x01a5
//***************************************************************************             //07-01-17|0x01a9
//***************************************************************************             //07-01-17|0x01aa
  SLONG working;                                                                     //07-01-17|0x01ab
//***************************************************************************             //07-01-17|0x01ac
//***************************************************************************             //07-01-17|0x01ad
    if(DictTextPlan       != -1)                           ReturnSystemError;             //07-01-17|0x01ae
    if(DictHeaderPlan     != -1)                           ReturnSystemError;             //07-01-17|0x01af
    if(DictCurrentOffset   <  HashSize)                    ReturnSystemError;             //07-01-17|0x01b0
    if(FileLength          <  HashSize)                    ReturnSystemError;             //07-01-17|0x01b1
//***************************************************************************             //07-01-17|0x01b2
    working            = FileLength;                                                      //07-01-17|0x01b3
    working           -= DictCurrentOffset;                                               //07-01-17|0x01b4
//***************************************************************************             //07-01-17|0x01b5
    if(HeaderPlan & 1)                                                                    //07-01-17|0x01b6
      {                                                                                   //07-01-17|0x01b7
        working       +=  sizeof(DICT_HEADER);                                            //07-01-17|0x01b8
        }                                                                                 //07-01-17|0x01b9
//***************************************************************************             //07-01-17|0x01ba
    if(Input != 0)                                                                        //07-01-17|0x01bb
      {                                                                                   //07-01-17|0x01bc
        DictTextPlan   = working;                                                         //07-01-17|0x01bd
        working       +=  sizeof(DICT_TEXT_HEADER);                                       //07-01-17|0x01be
        working       +=  InputLength;                                                    //07-01-17|0x01bf
        working       +=  1;                                                              //07-01-17|0x01c0
        }                                                                                 //07-01-17|0x01c1
//***************************************************************************             //07-01-17|0x01c2
    if(HeaderPlan & 2)                                                                    //07-01-17|0x01c3
      {                                                                                   //07-01-17|0x01c4
        DictHeaderPlan = working;                                                         //07-01-17|0x01c5
        }                                                                                 //07-01-17|0x01c6
//***************************************************************************             //07-01-17|0x01c7
    return_test(plan_1);                                                                  //07-01-17|0x01c8
}                                                                                         //07-01-17|0x01c9
//                                                                                        //05-24-97|0x01c9
//***************************************************************************             //07-01-17|0x01cc
//***************************************************************************             //07-01-17|0x01cd
//******                                                               ******             //07-01-17|0x01ce
//******                       initial_text                            ******             //07-01-17|0x01cf
//******                                                               ******             //07-01-17|0x01d0
//***************************************************************************             //07-01-17|0x01d1
//***************************************************************************             //07-01-17|0x01d2
//*******************************************************************************         //10-29-97|0x01d7
//*******************************************************************************         //10-29-97|0x01d7
// initial_text                                                                           //07-01-17|0x01d7
//*******************************************************************************         //10-29-97|0x01d7
//*******************************************************************************         //10-29-97|0x01d7
UINT BASEDICTUTIL::initial_text(                                                          //07-01-17|0x01d7
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x01d7
    ) {                                                                                   //07-01-17|0x01d7
//*******************************************************************************         //10-29-97|0x01d7
//***************************************************************************             //07-01-17|0x01db
//***************************************************************************             //07-01-17|0x01dc
    MemSet(DictTextRecordAddr,  0x00, sizeof(DICT_TEXT));                                 //07-01-17|0x01dd
//***************************************************************************             //07-01-17|0x01de
    if(DictTextPlan       == -1)                           ReturnSystemError;             //07-01-17|0x01df
//***************************************************************************             //07-01-17|0x01e0
    TextCurrentPosition = DictTextPlan;                                                   //07-01-17|0x01e1
    DictTextPlan        = -1;                                                             //07-01-17|0x01e2
    TextHeaderPosition  = -1;                                                             //07-01-17|0x01e3
//***************************************************************************             //07-01-17|0x01e4
    return_test(initial_text_1);                                                          //07-01-17|0x01e5
}                                                                                         //07-01-17|0x01e6
//                                                                                        //05-24-97|0x01e6
//***************************************************************************             //07-01-17|0x01e9
//***************************************************************************             //07-01-17|0x01ea
//******                                                               ******             //07-01-17|0x01eb
//******                       load_text                               ******             //07-01-17|0x01ec
//******                                                               ******             //07-01-17|0x01ed
//***************************************************************************             //07-01-17|0x01ee
//***************************************************************************             //07-01-17|0x01ef
//*******************************************************************************         //10-29-97|0x01f4
//*******************************************************************************         //10-29-97|0x01f4
// load_text                                                                              //07-04-20|0x01f4
//*******************************************************************************         //10-29-97|0x01f4
//*******************************************************************************         //10-29-97|0x01f4
UINT BASEDICTUTIL::load_text(                                                             //07-04-20|0x01f4
    DICT_DATA_FAR Addr,                                                                   //07-04-20|0x01f4
    STRING_DATA_FAR Input,                                                                //07-04-20|0x01f4
    UINT Input_Type                                                                       //07-04-20|0x01f4
    ) {                                                                                   //07-04-20|0x01f4
//*******************************************************************************         //10-29-97|0x01f4
//***************************************************************************             //07-01-17|0x01f8
//***************************************************************************             //07-01-17|0x01f9
    if(InputChar(0)        == 0)                           ReturnSystemError;             //07-01-17|0x01fa
    if(InputChar(256)      != 0)                           ReturnSystemError;             //07-01-17|0x01fb
    if((ULONG) InputLength != StrLen(InputLineAddr))       ReturnSystemError;             //07-01-17|0x01fc
//***************************************************************************             //07-01-17|0x01fd
    switch(Input_Type)                                                                    //07-04-20|0x01fe
      {                                                                                   //06-09-28|0x01ff
        case I_NAME:                                                   break;             //07-04-16|0x0200
        case I_TOKEN:                                                  break;             //07-04-16|0x0201
        case I_STRING:                                                 break;             //07-04-16|0x0202
        case I_USER_STACK:                                             break;             //07-04-16|0x0203
        case I_REGISTER:                                               break;             //07-04-16|0x0204
        case I_BRIDGE_NAME:                                            break;             //07-04-16|0x0205
        case I_PUBLIC_NAME:                                            break;             //07-05-11|0x0206
        case I_UTILITY_NAME:                                           break;             //07-05-11|0x0207
        case I_INCLUDE_NAME:                                           break;             //07-05-11|0x0208
        case I_CLASS_NAME:                                             break;             //07-05-11|0x0209
        case I_CLASS_BRIDGE:                                           break;             //07-05-11|0x020a
        case I_CERTIFICATION:                                          break;             //11-05-28|0x020b
        default:                                            ReturnSystemError             //07-04-16|0x020c
        }                                                                                 //07-04-16|0x020d
//***************************************************************************             //07-01-17|0x020e
    TextLength          = InputLength;                                                    //07-01-17|0x020f
    TextType            = Input_Type;                                                     //07-04-20|0x0210
    StrCpy(TextStringAddr, InputLineAddr);                                                //07-01-17|0x0211
//***************************************************************************             //07-01-17|0x0212
    return_test(load_text_1);                                                             //07-01-17|0x0213
}                                                                                         //07-01-17|0x0214
//                                                                                        //05-24-97|0x0214
//***************************************************************************             //07-01-17|0x0217
//***************************************************************************             //07-01-17|0x0218
//******                                                               ******             //07-01-17|0x0219
//******                            update_hash                        ******             //07-01-17|0x021a
//******                                                               ******             //07-01-17|0x021b
//***************************************************************************             //07-01-17|0x021c
//***************************************************************************             //07-01-17|0x021d
//*******************************************************************************         //10-29-97|0x0222
//*******************************************************************************         //10-29-97|0x0222
// update_hash                                                                            //07-01-17|0x0222
//*******************************************************************************         //10-29-97|0x0222
//*******************************************************************************         //10-29-97|0x0222
UINT BASEDICTUTIL::update_hash(                                                           //07-01-17|0x0222
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x0222
    ) {                                                                                   //07-01-17|0x0222
//*******************************************************************************         //10-29-97|0x0222
//***************************************************************************             //07-01-17|0x0226
//***************************************************************************             //07-01-17|0x0227
    if(DictHash            >= NoHash)                      ReturnSystemError;             //07-01-17|0x0228
//---------------------------------------------------------------------------             //07-01-17|0x0229
    TextNextPosition    = HashFirst(DictHash);                                            //07-01-17|0x022a
    HashFirst(DictHash) = TextCurrentPosition;                                            //07-01-17|0x022b
//---------------------------------------------------------------------------             //07-01-17|0x022c
    if(TextNextPosition == -1)                                                            //07-01-17|0x022d
      {                                                                                   //07-01-17|0x022e
        HashLast(DictHash)        = TextCurrentPosition;                                  //07-01-17|0x022f
        HashFirstOffset(DictHash) = HashSize;                                             //07-01-17|0x0230
        HashLastOffset(DictHash)  = HashSize;                                             //07-01-17|0x0231
        }                                                                                 //07-01-17|0x0232
    return_test(update_hash_1);                                                           //07-01-17|0x0233
}                                                                                         //07-01-17|0x0234
//                                                                                        //05-24-97|0x0234
//***************************************************************************             //07-01-17|0x0237
//***************************************************************************             //07-01-17|0x0238
//******                                                               ******             //07-01-17|0x0239
//******                        link_header_text                       ******             //07-01-17|0x023a
//******                                                               ******             //07-01-17|0x023b
//***************************************************************************             //07-01-17|0x023c
//***************************************************************************             //07-01-17|0x023d
//*******************************************************************************         //10-29-97|0x0244
//*******************************************************************************         //10-29-97|0x0244
// link_header_text                                                                       //07-01-17|0x0244
//*******************************************************************************         //10-29-97|0x0244
//*******************************************************************************         //10-29-97|0x0244
UINT BASEDICTUTIL::link_header_text(                                                      //07-01-17|0x0244
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x0244
    ) {                                                                                   //07-01-17|0x0244
//*******************************************************************************         //10-29-97|0x0244
//***************************************************************************             //07-01-17|0x0248
//***************************************************************************             //07-01-17|0x0249
    if(TextHeaderPosition >= 0)                            return(UserError);             //07-01-17|0x024a
//***************************************************************************             //07-01-17|0x024b
    TextHeaderPosition  =  DictHeaderPlan;                                                //07-01-17|0x024c
    if(TextHeaderPosition <  0)                             ReturnSystemError             //07-01-17|0x024d
//***************************************************************************             //07-01-17|0x024e
    return_test(link_header_text_1);                                                      //07-01-17|0x024f
}                                                                                         //07-01-17|0x0250
//                                                                                        //05-24-97|0x0250
//***************************************************************************             //07-01-17|0x0253
//***************************************************************************             //07-01-17|0x0254
//******                                                               ******             //07-01-17|0x0255
//******                       write_text_header(Addr)                 ******             //07-01-17|0x0256
//******                                                               ******             //07-01-17|0x0257
//***************************************************************************             //07-01-17|0x0258
//***************************************************************************             //07-01-17|0x0259
//*******************************************************************************         //10-29-97|0x025f
//*******************************************************************************         //10-29-97|0x025f
// write_text_header                                                                      //07-01-17|0x025f
//*******************************************************************************         //10-29-97|0x025f
//*******************************************************************************         //10-29-97|0x025f
UINT BASEDICTUTIL::write_text_header(                                                     //07-01-17|0x025f
    DICT_DATA_FAR Addr,                                                                   //07-01-17|0x025f
    UINT CreateFlag                                                                       //07-01-17|0x025f
    ) {                                                                                   //07-01-17|0x025f
//*******************************************************************************         //10-29-97|0x025f
//***************************************************************************             //07-01-17|0x0263
//***************************************************************************             //07-01-17|0x0264
    FilePosition             = TextCurrentPosition;                                       //07-01-17|0x0265
    FilePosition            += DictCurrentOffset;                                         //07-01-17|0x0266
//***************************************************************************             //07-01-17|0x0267
    if(FilePosition < HashSize)                             ReturnSystemError             //07-01-17|0x0268
    if(FilePosition > FileLength)                           ReturnSystemError             //07-01-17|0x0269
//***************************************************************************             //07-01-17|0x026a
    switch(CreateFlag)                                                                    //07-01-17|0x026b
      {                                                                                   //07-01-17|0x026c
        case 1:   if(FilePosition <  FileLength) break;     ReturnSystemError             //07-01-18|0x026d
        case 2:   if(FilePosition == FileLength) break;     ReturnSystemError             //07-01-17|0x026e
        default:                                            ReturnSystemError             //07-01-17|0x026f
        }                                                                                 //07-01-17|0x0270
//***************************************************************************             //07-01-17|0x0271
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-17|0x0272
    switch(BaseWriteTextHeader)                                                           //07-01-17|0x0273
      {                                                                                   //07-04-16|0x0274
        case Success:     switch(FileRelease())                 _SwitchBreak;             //07-04-16|0x0275
        case UserError:   switch(FileRelease())                 _SwitchGroup;             //07-04-16|0x0276
                          return(UserError);                                              //07-04-16|0x0277
        default:                                            ReturnSystemError             //07-04-16|0x0278
        }                                                                                 //07-04-16|0x0279
//***************************************************************************             //07-01-17|0x027a
    return_test(write_text_header_1);                                                     //07-01-17|0x027b
}                                                                                         //07-01-17|0x027c
//                                                                                        //05-24-97|0x027c
//***************************************************************************             //07-01-17|0x027f
//***************************************************************************             //07-01-17|0x0280
//******                                                               ******             //07-01-17|0x0281
//******                       write_text(Addr)                        ******             //07-01-17|0x0282
//******                                                               ******             //07-01-17|0x0283
//***************************************************************************             //07-01-17|0x0284
//***************************************************************************             //07-01-17|0x0285
//*******************************************************************************         //10-29-97|0x028b
//*******************************************************************************         //10-29-97|0x028b
// write_text                                                                             //07-01-17|0x028b
//*******************************************************************************         //10-29-97|0x028b
//*******************************************************************************         //10-29-97|0x028b
UINT BASEDICTUTIL::write_text(                                                            //07-01-17|0x028b
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x028b
    ) {                                                                                   //07-01-17|0x028b
//*******************************************************************************         //10-29-97|0x028b
//***************************************************************************             //07-01-17|0x028f
//***************************************************************************             //07-01-17|0x0290
    FilePosition             = TextCurrentPosition;                                       //07-01-17|0x0291
    FilePosition            += DictCurrentOffset;                                         //07-01-17|0x0292
    FilePosition            += sizeof(DICT_TEXT_HEADER);                                  //07-01-17|0x0293
//---------------------------------------------------------------------------             //07-01-17|0x0294
    if(FilePosition         != FileLength)                  ReturnSystemError             //07-01-17|0x0295
//---------------------------------------------------------------------------             //07-01-17|0x0296
    if(TextLength           >= 256)                         ReturnSystemError             //07-01-17|0x0297
    if(TextChar(TextLength) != 0)                           ReturnSystemError             //07-01-17|0x0298
//***************************************************************************             //07-01-17|0x0299
//***************************************************************************             //07-01-17|0x029a
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-17|0x029b
    switch(BaseWriteText)                                                                 //07-01-17|0x029c
      {                                                                                   //07-04-16|0x029d
        case Success:     switch(FileRelease())                 _SwitchBreak;             //07-04-16|0x029e
        case UserError:   switch(FileRelease())                 _SwitchGroup;             //07-04-16|0x029f
                          return(UserError);                                              //07-04-16|0x02a0
        default:                                            ReturnSystemError             //07-04-16|0x02a1
        }                                                                                 //07-04-16|0x02a2
//***************************************************************************             //07-01-17|0x02a3
    return_test(write_text_1);                                                            //07-01-17|0x02a4
}                                                                                         //07-01-17|0x02a5
//                                                                                        //05-24-97|0x02a5
//***************************************************************************             //07-01-17|0x02a8
//***************************************************************************             //07-01-17|0x02a9
//******                                                               ******             //07-01-17|0x02aa
//******                        initial_header                         ******             //07-01-17|0x02ab
//******                                                               ******             //07-01-17|0x02ac
//***************************************************************************             //07-01-17|0x02ad
//***************************************************************************             //07-01-17|0x02ae
//*******************************************************************************         //10-29-97|0x02b5
//*******************************************************************************         //10-29-97|0x02b5
// initial_header                                                                         //07-09-21|0x02b5
//*******************************************************************************         //10-29-97|0x02b5
//*******************************************************************************         //10-29-97|0x02b5
UINT BASEDICTUTIL::initial_header(                                                        //07-09-21|0x02b5
    DICT_DATA_FAR Addr,                                                                   //07-09-21|0x02b5
    UINT Command                                                                          //07-09-21|0x02b5
    ) {                                                                                   //07-09-21|0x02b5
//*******************************************************************************         //10-29-97|0x02b5
//***************************************************************************             //07-01-17|0x02b9
//***************************************************************************             //07-01-17|0x02ba
    MemSet(DictHeaderRecordAddr, 0x00, sizeof(DICT_HEADER));                              //07-01-17|0x02bb
//***************************************************************************             //07-01-17|0x02bc
    if(DictHeaderPlan     == -1)                           ReturnSystemError;             //07-01-17|0x02bd
    HeaderCurrentPosition  = DictHeaderPlan;                                              //07-01-17|0x02be
    DictHeaderPlan         = -1;                                                          //07-01-17|0x02bf
//***************************************************************************             //07-01-17|0x02c0
    HeaderCommand          = Command;                                                     //07-01-17|0x02c1
    HeaderNextPosition     = -1;                                                          //07-01-17|0x02c2
//---------------------------------------------------------------------------             //07-01-17|0x02c3
    HeaderNoArgs = 10;                                                                    //07-01-17|0x02c4
    while(HeaderNoArgs > 0)                                                               //07-01-17|0x02c5
      {                                                                                   //07-01-17|0x02c6
        --HeaderNoArgs;                                                                   //07-01-17|0x02c7
        HeaderNamePosition(HeaderNoArgs) = 0xffffffff;                                    //07-01-17|0x02c8
        }                                                                                 //07-01-17|0x02c9
//***************************************************************************             //07-01-17|0x02ca
    return_test(initial_header_1);                                                        //07-01-17|0x02cb
}                                                                                         //07-01-17|0x02cc
//                                                                                        //05-24-97|0x02cc
//***************************************************************************             //07-01-17|0x02cf
//***************************************************************************             //07-01-17|0x02d0
//******                                                               ******             //07-01-17|0x02d1
//******                            add_arg_header                     ******             //07-01-17|0x02d2
//******                                                               ******             //07-01-17|0x02d3
//***************************************************************************             //07-01-17|0x02d4
//***************************************************************************             //07-01-17|0x02d5
//*******************************************************************************         //10-29-97|0x02dc
//*******************************************************************************         //10-29-97|0x02dc
// add_arg_header                                                                         //07-01-17|0x02dc
//*******************************************************************************         //10-29-97|0x02dc
//*******************************************************************************         //10-29-97|0x02dc
UINT BASEDICTUTIL::add_arg_header(                                                        //07-01-17|0x02dc
    DICT_DATA_FAR Addr,                                                                   //07-01-17|0x02dc
    STRING_DATA_FAR Input                                                                 //07-01-17|0x02dc
    ) {                                                                                   //07-01-17|0x02dc
//*******************************************************************************         //10-29-97|0x02dc
//***************************************************************************             //07-01-17|0x02e0
//***************************************************************************             //07-01-17|0x02e1
    if(HeaderNoArgs > 9)                                    ReturnSystemError             //07-01-17|0x02e2
    HeaderLineNo(HeaderNoArgs)        = InputMacroLineNo;                                 //07-09-21|0x02e3
    HeaderStartCol(HeaderNoArgs)      = InputStartCol;                                    //07-01-17|0x02e4
    HeaderStartCall(HeaderNoArgs)     = InputStartCall;                                   //07-01-17|0x02e5
    HeaderNamePosition(HeaderNoArgs)  = TextCurrentPosition;                              //07-01-17|0x02e6
    ++HeaderNoArgs;                                                                       //07-01-17|0x02e7
//***************************************************************************             //07-01-17|0x02e8
    return_test(add_arg_header_1);                                                        //07-01-17|0x02e9
}                                                                                         //07-01-17|0x02ea
//                                                                                        //05-24-97|0x02ea
//***************************************************************************             //07-01-17|0x02ed
//***************************************************************************             //07-01-17|0x02ee
//******                                                               ******             //07-01-17|0x02ef
//******                        link_header_next                       ******             //07-01-17|0x02f0
//******                                                               ******             //07-01-17|0x02f1
//***************************************************************************             //07-01-17|0x02f2
//***************************************************************************             //07-01-17|0x02f3
//*******************************************************************************         //10-29-97|0x02fa
//*******************************************************************************         //10-29-97|0x02fa
// link_header_next                                                                       //07-01-17|0x02fa
//*******************************************************************************         //10-29-97|0x02fa
//*******************************************************************************         //10-29-97|0x02fa
UINT BASEDICTUTIL::link_header_next(                                                      //07-01-17|0x02fa
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x02fa
    ) {                                                                                   //07-01-17|0x02fa
//*******************************************************************************         //10-29-97|0x02fa
//***************************************************************************             //07-01-17|0x02fe
//***************************************************************************             //07-01-17|0x02ff
    if(HeaderNextPosition != -1)                            ReturnSystemError             //07-01-17|0x0300
    if(DictHeaderPlan     == -1)                            ReturnSystemError             //07-01-17|0x0301
    HeaderNextPosition     = DictHeaderPlan;                                              //07-01-17|0x0302
//***************************************************************************             //07-01-17|0x0303
    return_test(link_header_next_1);                                                      //07-01-17|0x0304
}                                                                                         //07-01-17|0x0305
//                                                                                        //05-24-97|0x0305
//***************************************************************************             //07-01-17|0x0308
//***************************************************************************             //07-01-17|0x0309
//******                                                               ******             //07-01-17|0x030a
//******                       write_header(Addr)                      ******             //07-01-17|0x030b
//******                                                               ******             //07-01-17|0x030c
//***************************************************************************             //07-01-17|0x030d
//***************************************************************************             //07-01-17|0x030e
//*******************************************************************************         //10-29-97|0x0314
//*******************************************************************************         //10-29-97|0x0314
// write_header                                                                           //07-01-17|0x0314
//*******************************************************************************         //10-29-97|0x0314
//*******************************************************************************         //10-29-97|0x0314
UINT BASEDICTUTIL::write_header(                                                          //07-01-17|0x0314
    DICT_DATA_FAR Addr,                                                                   //07-01-17|0x0314
    UINT CreateFlag                                                                       //07-01-17|0x0314
    ) {                                                                                   //07-01-17|0x0314
//*******************************************************************************         //10-29-97|0x0314
//***************************************************************************             //07-01-17|0x0318
//***************************************************************************             //07-01-17|0x0319
    FilePosition             = HeaderCurrentPosition;                                     //07-01-17|0x031a
    FilePosition            += DictCurrentOffset;                                         //07-01-17|0x031b
//***************************************************************************             //07-01-17|0x031c
    if(FilePosition < HashSize)                             ReturnSystemError             //07-01-17|0x031d
    if(FilePosition > FileLength)                           ReturnSystemError             //07-01-17|0x031e
//***************************************************************************             //07-01-17|0x031f
    switch(CreateFlag)                                                                    //07-01-17|0x0320
      {                                                                                   //07-01-17|0x0321
        case 1:   if(FilePosition <  FileLength) break;     ReturnSystemError             //07-01-19|0x0322
        case 2:   if(FilePosition == FileLength) break;     ReturnSystemError             //07-01-17|0x0323
        case 3:                                                        break;             //07-01-17|0x0324
        default:                                            ReturnSystemError             //07-01-17|0x0325
        }                                                                                 //07-01-17|0x0326
//***************************************************************************             //07-01-17|0x0327
//***************************************************************************             //07-01-17|0x0328
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-17|0x0329
    switch(BaseWriteHeader)                                                               //07-01-17|0x032a
      {                                                                                   //07-04-16|0x032b
        case Success:     switch(FileRelease())                 _SwitchBreak;             //07-04-16|0x032c
        case UserError:   switch(FileRelease())                 _SwitchGroup;             //07-04-16|0x032d
                          return(UserError);                                              //07-04-16|0x032e
        default:                                            ReturnSystemError             //07-04-16|0x032f
        }                                                                                 //07-04-16|0x0330
//***************************************************************************             //07-01-17|0x0331
    return_test(write_header_1);                                                          //07-01-17|0x0332
}                                                                                         //07-01-17|0x0333
//                                                                                        //05-24-97|0x0333
//***************************************************************************             //07-01-17|0x0336
//***************************************************************************             //07-01-17|0x0337
//******                                                               ******             //07-01-17|0x0338
//******                         create_hash                           ******             //07-01-17|0x0339
//******                                                               ******             //07-01-17|0x033a
//***************************************************************************             //07-01-17|0x033b
//***************************************************************************             //07-01-17|0x033c
//*******************************************************************************         //10-29-97|0x0343
//*******************************************************************************         //10-29-97|0x0343
// create_hash                                                                            //07-04-20|0x0343
//*******************************************************************************         //10-29-97|0x0343
//*******************************************************************************         //10-29-97|0x0343
UINT BASEDICTUTIL::create_hash(                                                           //07-04-20|0x0343
    DICT_DATA_FAR Addr,                                                                   //07-04-20|0x0343
    STRING_DATA_FAR Input,                                                                //07-04-20|0x0343
    UINT Input_Type                                                                       //07-04-20|0x0343
    ) {                                                                                   //07-04-20|0x0343
//*******************************************************************************         //10-29-97|0x0343
//***************************************************************************             //07-01-17|0x0347
//***************************************************************************             //07-01-17|0x0348
  ULONG test_size;                                                                   //07-01-17|0x0349
  UINT index;                                                                        //07-01-17|0x034a
//***************************************************************************             //07-01-17|0x034b
//***************************************************************************             //07-01-17|0x034c
    switch(Input_Type)                                                                    //07-04-20|0x034d
      {                                                                                   //07-04-18|0x034e
        case I_NAME:                                                   break;             //07-04-18|0x034f
        case I_TOKEN:                                                  break;             //07-04-18|0x0350
        case I_STRING:                                                 break;             //07-04-18|0x0351
        case I_USER_STACK:                                             break;             //07-04-18|0x0352
        case I_REGISTER:                                               break;             //07-04-18|0x0353
        case I_BRIDGE_NAME:                                            break;             //07-04-16|0x0354
        case I_PUBLIC_NAME:                                            break;             //07-05-11|0x0355
        case I_UTILITY_NAME:                                           break;             //07-05-11|0x0356
        case I_INCLUDE_NAME:                                           break;             //07-05-11|0x0357
        case I_CLASS_NAME:                                             break;             //07-05-11|0x0358
        case I_CLASS_BRIDGE:                                           break;             //07-05-11|0x0359
        case I_CERTIFICATION:                                          break;             //11-05-28|0x035a
        default:                                            ReturnSystemError             //07-04-18|0x035b
        }                                                                                 //07-04-18|0x035c
//***************************************************************************             //07-01-17|0x035d
    if(InputChar(0)              == 0)                      ReturnSystemError             //07-01-17|0x035e
    if(InputLength                > 256)                    ReturnSystemError             //07-01-17|0x035f
    if((test_size = InputLength) == 0)                      ReturnSystemError             //07-01-17|0x0360
    if(InputChar(InputLength)    != 0)                      ReturnSystemError             //07-01-17|0x0361
    if(test_size                 != StrLen(&InputLine))     ReturnSystemError             //07-01-17|0x0362
//***************************************************************************             //07-01-17|0x0363
//***************************************************************************             //07-01-17|0x0364
    DictHash = Input_Type;                                                                //07-04-20|0x0365
//---------------------------------------------------------------------------             //07-01-17|0x0366
    for(index=0; index<InputLength; ++index)                                              //07-01-17|0x0367
      {                                                                                   //07-01-17|0x0368
        DictHash += InputChar(index);                                                     //07-01-17|0x0369
        DictHash *= 1997;                                                                 //07-01-17|0x036a
        DictHash += 1999;                                                                 //07-01-17|0x036b
        DictHash &= 0xffff;                                                               //07-01-17|0x036c
        }                                                                                 //07-01-17|0x036d
    DictHash /= (0x10000 / NoHash);                                                       //07-01-17|0x036e
    return_test(create_hash_1);                                                           //07-01-17|0x036f
}                                                                                         //07-01-17|0x0370
//                                                                                        //05-24-97|0x0370
//***************************************************************************             //07-01-17|0x0373
//***************************************************************************             //07-01-17|0x0374
//******                                                               ******             //07-01-17|0x0375
//******                         test_hash                             ******             //07-01-17|0x0376
//******                                                               ******             //07-01-17|0x0377
//***************************************************************************             //07-01-17|0x0378
//***************************************************************************             //07-01-17|0x0379
//*******************************************************************************         //10-29-97|0x0380
//*******************************************************************************         //10-29-97|0x0380
// test_hash                                                                              //07-01-17|0x0380
//*******************************************************************************         //10-29-97|0x0380
//*******************************************************************************         //10-29-97|0x0380
UINT BASEDICTUTIL::test_hash(                                                             //07-01-17|0x0380
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x0380
    ) {                                                                                   //07-01-17|0x0380
//*******************************************************************************         //10-29-97|0x0380
//***************************************************************************             //07-01-17|0x0384
//***************************************************************************             //07-01-17|0x0385
    if(DictHash            >= NoHash)                      ReturnSystemError;             //07-01-17|0x0386
    if(DictTextPosition    != -1)                          ReturnSystemError;             //07-01-17|0x0387
    if(HashFirst(DictHash) == -1)                     return_no(test_hash_1);             //07-01-17|0x0388
//***************************************************************************             //07-01-17|0x0389
    DictTextPosition  = HashFirst(DictHash);                                              //07-01-17|0x038a
    DictCurrentOffset = HashFirstOffset(DictHash);                                        //07-01-17|0x038b
    DictCurrentBridge = HashFirstBridge(DictHash);                                        //07-01-17|0x038c
//***************************************************************************             //07-01-17|0x038d
    return_yes(test_hash_2);                                                              //07-01-17|0x038e
}                                                                                         //07-01-17|0x038f
//                                                                                        //05-24-97|0x038f
//***************************************************************************             //07-01-17|0x0392
//***************************************************************************             //07-01-17|0x0393
//******                                                               ******             //07-01-17|0x0394
//******                         read_text_header                      ******             //07-01-17|0x0395
//******                                                               ******             //07-01-17|0x0396
//***************************************************************************             //07-01-17|0x0397
//***************************************************************************             //07-01-17|0x0398
//*******************************************************************************         //10-29-97|0x039f
//*******************************************************************************         //10-29-97|0x039f
// read_text_header                                                                       //07-01-17|0x039f
//*******************************************************************************         //10-29-97|0x039f
//*******************************************************************************         //10-29-97|0x039f
UINT BASEDICTUTIL::read_text_header(                                                      //07-01-17|0x039f
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x039f
    ) {                                                                                   //07-01-17|0x039f
//*******************************************************************************         //10-29-97|0x039f
//***************************************************************************             //07-01-17|0x03a3
//***************************************************************************             //07-01-17|0x03a4
    FilePosition     = DictTextPosition;                                                  //07-01-17|0x03a5
    FilePosition    += DictCurrentOffset;                                                 //07-01-17|0x03a6
    if(FilePosition >= FileLength)                         ReturnSystemError;             //07-01-17|0x03a7
//***************************************************************************             //07-01-17|0x03a8
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-17|0x03a9
    switch(BaseReadTextHeader)                                   _SwitchGroup             //07-01-17|0x03aa
    switch(FileRelease())                                        _SwitchGroup             //07-01-17|0x03ab
//***************************************************************************             //07-01-17|0x03ac
    if(TextCurrentPosition != DictTextPosition)            ReturnSystemError;             //07-01-17|0x03ad
//***************************************************************************             //07-01-17|0x03ae
    return_test(read_text_header_1);                                                      //07-01-17|0x03af
}                                                                                         //07-01-17|0x03b0
//                                                                                        //05-24-97|0x03b0
//***************************************************************************             //07-01-17|0x03b3
//***************************************************************************             //07-01-17|0x03b4
//******                                                               ******             //07-01-17|0x03b5
//******                         read_text                             ******             //07-01-17|0x03b6
//******                                                               ******             //07-01-17|0x03b7
//***************************************************************************             //07-01-17|0x03b8
//***************************************************************************             //07-01-17|0x03b9
//*******************************************************************************         //10-29-97|0x03c0
//*******************************************************************************         //10-29-97|0x03c0
// read_text                                                                              //07-01-17|0x03c0
//*******************************************************************************         //10-29-97|0x03c0
//*******************************************************************************         //10-29-97|0x03c0
UINT BASEDICTUTIL::read_text(                                                             //07-01-17|0x03c0
    DICT_DATA_FAR Addr                                                                    //07-01-17|0x03c0
    ) {                                                                                   //07-01-17|0x03c0
//*******************************************************************************         //10-29-97|0x03c0
//***************************************************************************             //07-01-17|0x03c4
//***************************************************************************             //07-01-17|0x03c5
    if(TextCurrentPosition != DictTextPosition)            ReturnSystemError;             //07-01-17|0x03c6
//***************************************************************************             //07-01-17|0x03c7
    if(TextLength          == 0)                           ReturnSystemError;             //07-01-17|0x03c8
    if(TextLength          >= 257)                         ReturnSystemError;             //07-01-17|0x03c9
//***************************************************************************             //07-01-17|0x03ca
    MemSet(TextStringAddr, 0x00,  257);                                                   //07-01-17|0x03cb
//***************************************************************************             //07-01-17|0x03cc
    DictTextPosition += sizeof(DICT_TEXT_HEADER);                                         //07-01-17|0x03cd
    FilePosition      = DictTextPosition;                                                 //07-01-17|0x03ce
    FilePosition     += DictCurrentOffset;                                                //07-01-17|0x03cf
    DictTextPosition  = -1;                                                               //07-01-17|0x03d0
//***************************************************************************             //07-01-17|0x03d1
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-17|0x03d2
    switch(BaseReadText)                                         _SwitchGroup             //07-01-17|0x03d3
    switch(FileRelease())                                        _SwitchGroup             //07-01-17|0x03d4
//***************************************************************************             //07-01-17|0x03d5
    if(TextChar(0)         == 0)                           ReturnSystemError;             //07-01-17|0x03d6
    if(TextChar(256)       != 0)                           ReturnSystemError;             //07-01-17|0x03d7
    if((ULONG) TextLength  != StrLen(TextStringAddr))      ReturnSystemError;             //07-01-17|0x03d8
//***************************************************************************             //07-01-17|0x03d9
    return_test(read_text_1);                                                             //07-01-17|0x03da
}                                                                                         //07-01-17|0x03db
//                                                                                        //05-24-97|0x03db
//***************************************************************************             //07-01-17|0x03de
//***************************************************************************             //07-01-17|0x03df
//******                                                               ******             //07-01-17|0x03e0
//******                         test_name                             ******             //07-01-17|0x03e1
//******                                                               ******             //07-01-17|0x03e2
//***************************************************************************             //07-01-17|0x03e3
//***************************************************************************             //07-01-17|0x03e4
//*******************************************************************************         //10-29-97|0x03ec
//*******************************************************************************         //10-29-97|0x03ec
// test_name                                                                              //07-04-20|0x03ec
//*******************************************************************************         //10-29-97|0x03ec
//*******************************************************************************         //10-29-97|0x03ec
UINT BASEDICTUTIL::test_name(                                                             //07-04-20|0x03ec
    DICT_DATA_FAR Addr,                                                                   //07-04-20|0x03ec
    STRING_DATA_FAR Input,                                                                //07-04-20|0x03ec
    UINT Input_Type                                                                       //07-04-20|0x03ec
    ) {                                                                                   //07-04-20|0x03ec
//*******************************************************************************         //10-29-97|0x03ec
//***************************************************************************             //07-01-17|0x03f0
//***************************************************************************             //07-01-17|0x03f1
    switch(Input_Type)                                                                    //07-04-20|0x03f2
      {                                                                                   //07-04-18|0x03f3
        case I_NAME:                                                   break;             //07-04-18|0x03f4
        case I_TOKEN:                                                  break;             //07-04-18|0x03f5
        case I_STRING:                                                 break;             //07-04-18|0x03f6
        case I_USER_STACK:                                             break;             //07-04-18|0x03f7
        case I_REGISTER:                                               break;             //07-04-18|0x03f8
        case I_BRIDGE_NAME:                                            break;             //07-04-25|0x03f9
        case I_PUBLIC_NAME:                                            break;             //07-05-11|0x03fa
        case I_INCLUDE_NAME:                                           break;             //07-05-11|0x03fb
        case I_UTILITY_NAME:                                           break;             //07-05-11|0x03fc
        case I_CLASS_NAME:                                             break;             //07-05-11|0x03fd
        case I_CLASS_BRIDGE:                                           break;             //07-05-11|0x03fe
        case I_CERTIFICATION:                                          break;             //11-05-28|0x03ff
        default:                                            ReturnSystemError             //07-04-18|0x0400
        }                                                                                 //07-04-18|0x0401
//***************************************************************************             //07-01-17|0x0402
    if(InputChar(0)        == 0)                           ReturnSystemError;             //07-01-17|0x0403
    if(InputChar(256)      != 0)                           ReturnSystemError;             //07-01-17|0x0404
    if((ULONG) InputLength != StrLen(InputLineAddr))       ReturnSystemError;             //07-01-17|0x0405
//***************************************************************************             //07-01-17|0x0406
    if(DictSearchOffset == DictCurrentOffset)                                             //07-01-17|0x0407
      {                                                                                   //07-01-17|0x0408
        if(TextType == Input_Type)                                                        //07-04-20|0x0409
          {                                                                               //07-04-18|0x040a
            switch(StrCmp(TextStringAddr,   InputLineAddr))                               //11-05-28|0x040b
              {                                                                           //11-05-28|0x040c
                case 0:                              return_yes(test_name_1);             //11-05-28|0x040d
                case 1:                                                break;             //11-05-28|0x040e
                case -1:                                               break;             //11-05-28|0x040f
                default:                                   ReturnSystemError;             //11-05-28|0x0410
                }                                                                         //11-05-28|0x0411
            }                                                                             //07-04-18|0x0412
        }                                                                                 //07-01-17|0x0413
    return_no(test_name_2);                                                               //07-01-18|0x0414
}                                                                                         //07-01-18|0x0415
//                                                                                        //05-24-97|0x0415
//***************************************************************************             //07-01-18|0x0418
//***************************************************************************             //07-01-18|0x0419
//******                                                               ******             //07-01-18|0x041a
//******                         next_dict                             ******             //07-01-18|0x041b
//******                                                               ******             //07-01-18|0x041c
//***************************************************************************             //07-01-18|0x041d
//***************************************************************************             //07-01-18|0x041e
//*******************************************************************************         //10-29-97|0x0425
//*******************************************************************************         //10-29-97|0x0425
// next_dict                                                                              //07-01-18|0x0425
//*******************************************************************************         //10-29-97|0x0425
//*******************************************************************************         //10-29-97|0x0425
UINT BASEDICTUTIL::next_dict(                                                             //07-01-18|0x0425
    DICT_DATA_FAR Addr                                                                    //07-01-18|0x0425
    ) {                                                                                   //07-01-18|0x0425
//*******************************************************************************         //10-29-97|0x0425
//***************************************************************************             //07-01-18|0x0429
//***************************************************************************             //07-01-18|0x042a
    if(DictTextPosition != -1)                             ReturnSystemError;             //07-01-18|0x042b
    if(TextNextPosition  < 0)                         return_no(next_dict_1);             //07-01-18|0x042c
//---------------------------------------------------------------------------             //07-01-18|0x042d
    DictCurrentOffset   += TextDeltaOffset;                                               //07-01-18|0x042e
    DictCurrentBridge   += TextDeltaBridge;                                               //07-01-18|0x042f
    DictTextPosition     = TextNextPosition;                                              //07-01-18|0x0430
//***************************************************************************             //07-01-18|0x0431
    return_yes(next_dict_2);                                                              //07-01-18|0x0432
}                                                                                         //07-01-18|0x0433
//                                                                                        //05-24-97|0x0433
//***************************************************************************             //07-01-24|0x0436
//***************************************************************************             //07-01-24|0x0437
//******                                                               ******             //07-01-24|0x0438
//******               read_header(Addr, Position)                     ******             //07-01-24|0x0439
//******                                                               ******             //07-01-24|0x043a
//***************************************************************************             //07-01-24|0x043b
//***************************************************************************             //07-01-24|0x043c
//*******************************************************************************         //10-29-97|0x0443
//*******************************************************************************         //10-29-97|0x0443
// read_header                                                                            //07-01-24|0x0443
//*******************************************************************************         //10-29-97|0x0443
//*******************************************************************************         //10-29-97|0x0443
UINT BASEDICTUTIL::read_header(                                                           //07-01-24|0x0443
    DICT_DATA_FAR Addr,                                                                   //07-01-24|0x0443
    SLONG File_Position                                                                   //07-01-24|0x0443
    ) {                                                                                   //07-01-24|0x0443
//*******************************************************************************         //10-29-97|0x0443
//***************************************************************************             //07-01-24|0x0447
//***************************************************************************             //07-01-24|0x0448
    FilePosition      = File_Position;                                                    //07-01-24|0x0449
    FilePosition     += DictCurrentOffset;                                                //07-01-24|0x044a
//***************************************************************************             //07-01-24|0x044b
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-24|0x044c
    switch(BaseReadHeader)                                       _SwitchGroup             //07-01-24|0x044d
    switch(FileRelease())                                        _SwitchGroup             //07-01-24|0x044e
//***************************************************************************             //07-01-24|0x044f
    if(File_Position != HeaderCurrentPosition)              ReturnSystemError             //07-01-24|0x0450
//***************************************************************************             //07-01-24|0x0451
    return_test(read_header_1);                                                           //07-01-24|0x0452
}                                                                                         //07-01-24|0x0453
//                                                                                        //05-24-97|0x0453
//***************************************************************************             //07-01-24|0x0456
//***************************************************************************             //07-01-24|0x0457
//******                                                               ******             //07-01-24|0x0458
//******               prepare_arg_read(Addr, ArgNo)                   ******             //07-01-24|0x0459
//******                                                               ******             //07-01-24|0x045a
//***************************************************************************             //07-01-24|0x045b
//***************************************************************************             //07-01-24|0x045c
//*******************************************************************************         //10-29-97|0x0463
//*******************************************************************************         //10-29-97|0x0463
// prepare_arg_read                                                                       //07-01-24|0x0463
//*******************************************************************************         //10-29-97|0x0463
//*******************************************************************************         //10-29-97|0x0463
UINT BASEDICTUTIL::prepare_arg_read(                                                      //07-01-24|0x0463
    DICT_DATA_FAR Addr,                                                                   //07-01-24|0x0463
    UINT ArgNo                                                                            //07-01-24|0x0463
    ) {                                                                                   //07-01-24|0x0463
//*******************************************************************************         //10-29-97|0x0463
//***************************************************************************             //07-01-24|0x0467
//***************************************************************************             //07-01-24|0x0468
    if(HeaderNoArgs      > 10)                              ReturnSystemError             //07-01-24|0x0469
    if(DictTextPosition != -1)                              ReturnSystemError             //07-01-24|0x046a
//***************************************************************************             //07-01-24|0x046b
    if(ArgNo >= HeaderNoArgs)                              return(UserError);             //07-01-24|0x046c
//---------------------------------------------------------------------------             //07-01-24|0x046d
    DictTextPosition = HeaderNamePosition(ArgNo);                                         //07-01-24|0x046e
    if(DictTextPosition < 0)                                ReturnSystemError             //07-01-24|0x046f
//***************************************************************************             //07-01-24|0x0470
    return_test(prepare_arg_read_1);                                                      //07-01-24|0x0471
}                                                                                         //07-01-24|0x0472
//                                                                                        //05-24-97|0x0472
//***************************************************************************             //07-01-24|0x0475
//***************************************************************************             //07-01-24|0x0476
//******                                                               ******             //07-01-24|0x0477
//******                     test_arg(Addr, ArgNo)                     ******             //07-01-24|0x0478
//******                                                               ******             //07-01-24|0x0479
//***************************************************************************             //07-01-24|0x047a
//***************************************************************************             //07-01-24|0x047b
//*******************************************************************************         //10-29-97|0x0483
//*******************************************************************************         //10-29-97|0x0483
// test_arg                                                                               //07-01-24|0x0483
//*******************************************************************************         //10-29-97|0x0483
//*******************************************************************************         //10-29-97|0x0483
UINT BASEDICTUTIL::test_arg(                                                              //07-01-24|0x0483
    DICT_DATA_FAR Addr,                                                                   //07-01-24|0x0483
    UINT ArgNo                                                                            //07-01-24|0x0483
    ) {                                                                                   //07-01-24|0x0483
//*******************************************************************************         //10-29-97|0x0483
//***************************************************************************             //07-01-24|0x0487
//***************************************************************************             //07-01-24|0x0488
  UINT i;                                                                            //07-01-24|0x0489
//***************************************************************************             //07-01-24|0x048a
//***************************************************************************             //07-01-24|0x048b
    if(HeaderNoArgs > 10)                                   ReturnSystemError             //11-05-28|0x048c
    for(i=0; i<HeaderNoArgs; ++i)                                                         //07-01-24|0x048d
      {                                                                                   //07-01-24|0x048e
        if(HeaderNamePosition(i) < 0)                       ReturnSystemError             //07-01-24|0x048f
        }                                                                                 //07-01-24|0x0490
//***************************************************************************             //07-01-24|0x0492
    if(ArgNo < HeaderNoArgs)                          return_yes(test_arg_1);             //07-01-24|0x0493
    return_no(test_arg_2);                                                                //07-01-24|0x0494
}                                                                                         //07-01-24|0x0495
//                                                                                        //05-24-97|0x0495
//***************************************************************************             //07-01-24|0x0498
//***************************************************************************             //07-01-24|0x0499
//******                                                               ******             //07-01-24|0x049a
//******                   get_arg(Addr, Output, ArgNo)                ******             //07-01-24|0x049b
//******                                                               ******             //07-01-24|0x049c
//***************************************************************************             //07-01-24|0x049d
//***************************************************************************             //07-01-24|0x049e
//*******************************************************************************         //10-29-97|0x04a5
//*******************************************************************************         //10-29-97|0x04a5
// get_arg                                                                                //07-01-24|0x04a5
//*******************************************************************************         //10-29-97|0x04a5
//*******************************************************************************         //10-29-97|0x04a5
UINT BASEDICTUTIL::get_arg(                                                               //07-01-24|0x04a5
    DICT_DATA_FAR Addr,                                                                   //07-01-24|0x04a5
    STRING_DATA_FAR Output,                                                               //07-01-24|0x04a5
    UINT ArgNo                                                                            //07-01-24|0x04a5
    ) {                                                                                   //07-01-24|0x04a5
//*******************************************************************************         //10-29-97|0x04a5
//***************************************************************************             //07-01-24|0x04a9
//***************************************************************************             //07-01-24|0x04aa
    if(TextChar(256)        != 0)                           ReturnSystemError             //07-01-24|0x04ab
    if(TextLength           == 0)                           ReturnSystemError             //07-01-24|0x04ac
    if(TextLength           >= 257)                         ReturnSystemError             //07-01-24|0x04ad
    if(TextChar(TextLength) != 0)                           ReturnSystemError             //07-01-24|0x04ae
    if((ULONG) TextLength   != StrLen(TextStringAddr))      ReturnSystemError             //07-01-24|0x04af
//***************************************************************************             //07-01-24|0x04b0
    MemSet(Output, 0x00, sizeof(STRING_DATA));                                            //07-01-24|0x04b1
//---------------------------------------------------------------------------             //07-01-24|0x04b2
    OutputType        = TextType;                                                         //07-01-24|0x04b3
    OutputStartCol    = HeaderStartCol(ArgNo);                                            //07-01-24|0x04b4
    OutputStartCall   = HeaderStartCall(ArgNo);                                           //07-01-24|0x04b5
    OutputMacroLineNo = HeaderLineNo(ArgNo);                                              //07-09-21|0x04b6
    OutputLength      = TextLength;                                                       //07-01-24|0x04b7
//---------------------------------------------------------------------------             //07-01-24|0x04b8
    MemCpy(OutputLineAddr, TextStringAddr, OutputLength);                                 //07-01-24|0x04b9
//***************************************************************************             //07-01-24|0x04ba
    switch(OutputType)                                                                    //06-09-28|0x04bb
      {                                                                                   //06-09-28|0x04bc
        case I_NAME:                                                   break;             //07-04-16|0x04bd
        case I_TOKEN:                                                  break;             //07-04-16|0x04be
        case I_STRING:                                                 break;             //07-04-16|0x04bf
        case I_USER_STACK:                                             break;             //07-04-16|0x04c0
        case I_REGISTER:                                               break;             //07-04-16|0x04c1
        case I_CLASS_BRIDGE:                                           break;             //07-09-21|0x04c2
        case I_CERTIFICATION:                                          break;             //11-05-28|0x04c3
        default:                                            ReturnSystemError             //07-04-16|0x04c4
        }                                                                                 //07-04-16|0x04c5
    return_test(get_arg_1);                                                               //07-01-24|0x04c6
}                                                                                         //07-01-24|0x04c7
//                                                                                        //05-24-97|0x04c7
//***************************************************************************             //07-01-24|0x04ca
//***************************************************************************             //07-01-24|0x04cb
//******                                                               ******             //07-01-24|0x04cc
//******                      arg_update(Addr)                         ******             //07-01-24|0x04cd
//******                                                               ******             //07-01-24|0x04ce
//***************************************************************************             //07-01-24|0x04cf
//***************************************************************************             //07-01-24|0x04d0
//*******************************************************************************         //10-29-97|0x04d7
//*******************************************************************************         //10-29-97|0x04d7
// arg_update                                                                             //07-01-24|0x04d7
//*******************************************************************************         //10-29-97|0x04d7
//*******************************************************************************         //10-29-97|0x04d7
UINT BASEDICTUTIL::arg_update(                                                            //07-01-24|0x04d7
    DICT_DATA_FAR Addr                                                                    //07-01-24|0x04d7
    ) {                                                                                   //07-01-24|0x04d7
//*******************************************************************************         //10-29-97|0x04d7
//***************************************************************************             //07-01-24|0x04db
//***************************************************************************             //07-01-24|0x04dc
    if(HeaderNoArgs      > 10)                              ReturnSystemError             //07-01-24|0x04dd
    if(HeaderNoArgs      == 0)                              ReturnSystemError             //07-01-24|0x04de
//---------------------------------------------------------------------------             //07-01-24|0x04df
    while(HeaderNoArgs > 1)                                                               //07-01-24|0x04e0
      {                                                                                   //07-01-24|0x04e1
        --HeaderNoArgs;                                                                   //07-01-24|0x04e2
        HeaderNamePosition(HeaderNoArgs) = -1;                                            //07-01-24|0x04e3
        HeaderStartCol(HeaderNoArgs)     =  0;                                            //07-01-24|0x04e4
        HeaderStartCall(HeaderNoArgs)    =  0;                                            //07-01-24|0x04e5
        }                                                                                 //07-01-24|0x04e6
//***************************************************************************             //07-01-24|0x04e7
    return_test(arg_update_1);                                                            //07-01-24|0x04e8
}                                                                                         //07-01-24|0x04e9
//                                                                                        //05-24-97|0x04e9
//***************************************************************************             //07-01-18|0x04ec
//***************************************************************************             //07-01-18|0x04ed
//******                                                               ******             //07-01-18|0x04ee
//******                      test_hash_empty(Addr)                    ******             //07-01-18|0x04ef
//******                                                               ******             //07-01-18|0x04f0
//***************************************************************************             //07-01-18|0x04f1
//***************************************************************************             //07-01-18|0x04f2
//*******************************************************************************         //10-29-97|0x04fa
//*******************************************************************************         //10-29-97|0x04fa
// test_hash_empty                                                                        //07-01-18|0x04fa
//*******************************************************************************         //10-29-97|0x04fa
//*******************************************************************************         //10-29-97|0x04fa
UINT BASEDICTUTIL::test_hash_empty(                                                       //07-01-18|0x04fa
    DICT_DATA_FAR Addr                                                                    //07-01-18|0x04fa
    ) {                                                                                   //07-01-18|0x04fa
//*******************************************************************************         //10-29-97|0x04fa
//***************************************************************************             //07-01-18|0x04fe
//***************************************************************************             //07-01-18|0x04ff
    if(DictHash                  >= NoHash)                 ReturnSystemError             //07-01-18|0x0500
    if(HashLast(DictHash)        >= 0)          return_no(test_hash_empty_1);             //07-01-18|0x0501
//***************************************************************************             //07-01-18|0x0502
    if(HashFirstOffset(DictHash) != -1)                     ReturnSystemError             //07-01-18|0x0503
    if(HashLastOffset(DictHash)  != -1)                     ReturnSystemError             //07-01-18|0x0504
    if(HashFirst(DictHash)       != -1)                     ReturnSystemError             //07-01-18|0x0505
    return_yes(test_hash_empty_2);                                                        //07-01-18|0x0506
}                                                                                         //07-01-18|0x0507
//                                                                                        //05-24-97|0x0507
//***************************************************************************             //07-01-18|0x050a
//***************************************************************************             //07-01-18|0x050b
//******                                                               ******             //07-01-18|0x050c
//******                      prep_hash_update(Addr)                   ******             //07-01-18|0x050d
//******                                                               ******             //07-01-18|0x050e
//***************************************************************************             //07-01-18|0x050f
//***************************************************************************             //07-01-18|0x0510
//*******************************************************************************         //10-29-97|0x0518
//*******************************************************************************         //10-29-97|0x0518
// prep_hash_update                                                                       //07-01-18|0x0518
//*******************************************************************************         //10-29-97|0x0518
//*******************************************************************************         //10-29-97|0x0518
UINT BASEDICTUTIL::prep_hash_update(                                                      //07-01-18|0x0518
    DICT_DATA_FAR Addr                                                                    //07-01-18|0x0518
    ) {                                                                                   //07-01-18|0x0518
//*******************************************************************************         //10-29-97|0x0518
//***************************************************************************             //07-01-18|0x051c
//***************************************************************************             //07-01-18|0x051d
    if(DictHash                  >= NoHash)                 ReturnSystemError             //07-01-18|0x051e
//***************************************************************************             //07-01-18|0x051f
    if(HashFirstOffset(DictHash)  < HashSize)               ReturnSystemError             //07-01-18|0x0520
    if(HashLastOffset(DictHash)   < HashSize)               ReturnSystemError             //07-01-18|0x0521
    if(HashFirst(DictHash)        <  0)                     ReturnSystemError             //07-01-18|0x0522
    if(HashLast(DictHash)         <  0)                     ReturnSystemError             //07-01-18|0x0523
//***************************************************************************             //07-01-18|0x0524
    DictTextPosition   = HashLast(DictHash);                                              //07-01-18|0x0525
    DictCurrentOffset  = HashLastOffset(DictHash);                                        //07-01-18|0x0526
//***************************************************************************             //07-01-18|0x0527
    return_test(prep_hash_update_2);                                                      //07-01-18|0x0528
}                                                                                         //07-01-18|0x0529
//                                                                                        //05-24-97|0x0529
//***************************************************************************             //07-01-18|0x052c
//***************************************************************************             //07-01-18|0x052d
//******                                                               ******             //07-01-18|0x052e
//******                   update_hash_offset(Addr)                    ******             //07-01-18|0x052f
//******                                                               ******             //07-01-18|0x0530
//***************************************************************************             //07-01-18|0x0531
//***************************************************************************             //07-01-18|0x0532
//*******************************************************************************         //10-29-97|0x053a
//*******************************************************************************         //10-29-97|0x053a
// update_delta_offset                                                                    //07-01-18|0x053a
//*******************************************************************************         //10-29-97|0x053a
//*******************************************************************************         //10-29-97|0x053a
UINT BASEDICTUTIL::update_delta_offset(                                                   //07-01-18|0x053a
    DICT_DATA_FAR Addr,                                                                   //07-01-18|0x053a
    SLONG Input_Length                                                                    //07-01-18|0x053a
    ) {                                                                                   //07-01-18|0x053a
//*******************************************************************************         //10-29-97|0x053a
//***************************************************************************             //07-01-18|0x053e
//***************************************************************************             //07-01-18|0x053f
    if(DictHash             >= NoHash)                      ReturnSystemError             //07-01-18|0x0540
//***************************************************************************             //07-01-18|0x0541
    if(TextNextPosition     != -1)                          ReturnSystemError             //07-01-18|0x0542
    if(TextCurrentPosition  != HashLast(DictHash))          ReturnSystemError             //07-01-18|0x0543
//***************************************************************************             //07-01-18|0x0544
    if(TextDeltaOffset      ==  0)                                                        //07-01-18|0x0545
      {                                                                                   //07-01-18|0x0546
        if(Input_Length    != -1)                           ReturnSystemError             //07-01-18|0x0547
        if(FileLength      <= HashSize)                     ReturnSystemError             //07-01-18|0x0548
        TextDeltaOffset     = FileLength;                                                 //07-01-18|0x0549
        TextDeltaOffset    -= HashSize;                                                   //07-01-18|0x054a
        return_test(update_delta_offset_1);                                               //07-01-18|0x054b
        }                                                                                 //07-01-18|0x054c
//---------------------------------------------------------------------------             //07-01-18|0x054d
      else {                                                                              //07-01-23|0x054e
        if(Input_Length    <= HashSize)                     ReturnSystemError             //07-01-23|0x054f
        TextDeltaOffset    += Input_Length;                                               //07-01-23|0x0550
        TextDeltaOffset    -= HashSize;                                                   //07-01-23|0x0551
        return_test(update_delta_offset_2);                                               //07-01-23|0x0552
        }                                                                                 //07-01-23|0x0553
}                                                                                         //07-01-18|0x0554
//                                                                                        //05-24-97|0x0554
//***************************************************************************             //07-01-23|0x0557
//***************************************************************************             //07-01-23|0x0558
//******                                                               ******             //07-01-23|0x0559
//******                        hash_state(Addr)                       ******             //07-01-23|0x055a
//******                                                               ******             //07-01-23|0x055b
//***************************************************************************             //07-01-23|0x055c
//***************************************************************************             //07-01-23|0x055d
//*******************************************************************************         //10-29-97|0x0565
//*******************************************************************************         //10-29-97|0x0565
// hash_state                                                                             //07-01-23|0x0565
//*******************************************************************************         //10-29-97|0x0565
//*******************************************************************************         //10-29-97|0x0565
UINT BASEDICTUTIL::hash_state(                                                            //07-01-23|0x0565
    ULONG Hash_No,                                                                        //07-01-23|0x0565
    DICT_HASH_FAR InputHashFar,                                                           //07-01-23|0x0565
    SLONG Input_Length                                                                    //07-01-23|0x0565
    ) {                                                                                   //07-01-23|0x0565
//*******************************************************************************         //10-29-97|0x0565
//***************************************************************************             //07-01-23|0x0569
//***************************************************************************             //07-01-23|0x056a
    if(Hash_No                   >= NoHash)                 ReturnSystemError             //07-01-23|0x056b
//***************************************************************************             //07-01-23|0x056c
    if(InputHashFirst(Hash_No) == -1)                                                     //07-01-23|0x056d
      {                                                                                   //07-01-23|0x056e
        if(InputHashFirstOffset(Hash_No)  != -1)            ReturnSystemError             //07-01-23|0x056f
        if(InputHashLastOffset(Hash_No)   != -1)            ReturnSystemError             //07-01-23|0x0570
        if(InputHashLast(Hash_No)         != -1)            ReturnSystemError             //07-01-23|0x0571
        if(InputHashFirstBridge(Hash_No)  !=  0)            ReturnSystemError             //07-01-23|0x0572
        if(InputHashLastBridge(Hash_No)   !=  0)            ReturnSystemError             //07-01-23|0x0573
        return_no(hash_state_1);                                                          //07-01-23|0x0574
        }                                                                                 //07-01-23|0x0575
      else {                                                                              //07-01-23|0x0576
        if(InputHashFirstOffset(Hash_No)  <  HashSize)      ReturnSystemError             //07-01-23|0x0577
        if(InputHashFirstOffset(Hash_No)  >  Input_Length)  ReturnSystemError             //07-01-23|0x0578
        if(InputHashLastOffset(Hash_No)   <  HashSize)      ReturnSystemError             //07-01-23|0x0579
        if(InputHashLastOffset(Hash_No)   >  Input_Length)  ReturnSystemError             //07-01-23|0x057a
        if(InputHashLast(Hash_No)         <  0)             ReturnSystemError             //07-01-23|0x057b
        if(InputHashFirstBridge(Hash_No)  <  0)             ReturnSystemError             //07-01-23|0x057c
        if(InputHashLastBridge(Hash_No)   <  0)             ReturnSystemError             //07-01-23|0x057d
        return_yes(hash_state_2);                                                         //07-01-23|0x057e
        }                                                                                 //07-01-23|0x057f
}                                                                                         //07-01-23|0x0580
//                                                                                        //05-24-97|0x0580
//***************************************************************************             //07-01-23|0x0583
//***************************************************************************             //07-01-23|0x0584
//******                                                               ******             //07-01-23|0x0585
//******                 copy_hash(Addr, InputHashFar)                 ******             //07-01-23|0x0586
//******                                                               ******             //07-01-23|0x0587
//***************************************************************************             //07-01-23|0x0588
//***************************************************************************             //07-01-23|0x0589
//*******************************************************************************         //10-29-97|0x058e
//*******************************************************************************         //10-29-97|0x058e
// copy_hash_                                                                             //07-01-23|0x058e
//*******************************************************************************         //10-29-97|0x058e
//*******************************************************************************         //10-29-97|0x058e
UINT BASEDICTUTIL::copy_hash_(                                                            //07-01-23|0x058e
    DICT_DATA_FAR Addr,                                                                   //07-01-23|0x058e
    DICT_HASH_FAR InputHashFar                                                            //07-01-23|0x058e
    ) {                                                                                   //07-01-23|0x058e
//*******************************************************************************         //10-29-97|0x058e
//***************************************************************************             //07-01-23|0x0590
//***************************************************************************             //07-01-23|0x0591
    MemCpy(InputHashFar, DictHashRecordAddr, HashSize);                                   //07-01-23|0x0592
//---------------------------------------------------------------------------             //07-01-23|0x0593
    FilePosition = HashSize;                                                              //07-01-23|0x0594
//***************************************************************************             //07-01-23|0x0595
//***************************************************************************             //07-01-23|0x0596
    return_test(copy_hash_1);                                                             //07-01-23|0x0597
}                                                                                         //07-01-23|0x0598
//                                                                                        //05-24-97|0x0598
//***************************************************************************             //07-01-23|0x059b
//***************************************************************************             //07-01-23|0x059c
//******                                                               ******             //07-01-23|0x059d
//******                            first_hash                         ******             //07-01-23|0x059e
//******                                                               ******             //07-01-23|0x059f
//***************************************************************************             //07-01-23|0x05a0
//***************************************************************************             //07-01-23|0x05a1
//*******************************************************************************         //10-29-97|0x05a7
//*******************************************************************************         //10-29-97|0x05a7
// first_hash                                                                             //07-01-23|0x05a7
//*******************************************************************************         //10-29-97|0x05a7
//*******************************************************************************         //10-29-97|0x05a7
UINT BASEDICTUTIL::first_hash(                                                            //07-01-23|0x05a7
    DICT_DATA_FAR Addr,                                                                   //07-01-23|0x05a7
    DICT_HASH_FAR InputHashFar                                                            //07-01-23|0x05a7
    ) {                                                                                   //07-01-23|0x05a7
//*******************************************************************************         //10-29-97|0x05a7
//***************************************************************************             //07-01-23|0x05ab
//***************************************************************************             //07-01-23|0x05ac
    if(DictHash             >= NoHash)                      ReturnSystemError             //07-01-23|0x05ad
//***************************************************************************             //07-01-23|0x05ae
    HashFirst(DictHash)          = InputHashFirst(DictHash);                              //07-01-23|0x05af
//***************************************************************************             //07-01-23|0x05b0
    HashFirstOffset(DictHash)    = InputHashFirstOffset(DictHash);                        //07-01-23|0x05b1
    HashFirstOffset(DictHash)   -= HashSize;                                              //07-01-23|0x05b2
    HashFirstOffset(DictHash)   += FileLength;                                            //07-01-23|0x05b3
//***************************************************************************             //07-01-23|0x05b4
    HashFirstBridge(DictHash)    = InputHashFirstBridge(DictHash) + 1;                    //07-01-23|0x05b5
//***************************************************************************             //07-01-23|0x05b6
    return_test(first_hash_1);                                                            //07-01-23|0x05b7
}                                                                                         //07-01-23|0x05b8
//                                                                                        //05-24-97|0x05b8
//***************************************************************************             //07-01-23|0x05bb
//***************************************************************************             //07-01-23|0x05bc
//******                                                               ******             //07-01-23|0x05bd
//******                         last_hash                             ******             //07-01-23|0x05be
//******                                                               ******             //07-01-23|0x05bf
//***************************************************************************             //07-01-23|0x05c0
//***************************************************************************             //07-01-23|0x05c1
//*******************************************************************************         //10-29-97|0x05c7
//*******************************************************************************         //10-29-97|0x05c7
// last_hash                                                                              //07-01-23|0x05c7
//*******************************************************************************         //10-29-97|0x05c7
//*******************************************************************************         //10-29-97|0x05c7
UINT BASEDICTUTIL::last_hash(                                                             //07-01-23|0x05c7
    DICT_DATA_FAR Addr,                                                                   //07-01-23|0x05c7
    DICT_HASH_FAR InputHashFar                                                            //07-01-23|0x05c7
    ) {                                                                                   //07-01-23|0x05c7
//*******************************************************************************         //10-29-97|0x05c7
//***************************************************************************             //07-01-23|0x05cb
//***************************************************************************             //07-01-23|0x05cc
    if(DictHash             >= NoHash)                      ReturnSystemError             //07-01-23|0x05cd
//***************************************************************************             //07-01-23|0x05ce
    HashLast(DictHash)           = InputHashLast(DictHash);                               //07-01-23|0x05cf
//***************************************************************************             //07-01-23|0x05d0
    HashLastOffset(DictHash)     = InputHashLastOffset(DictHash);                         //07-01-23|0x05d1
    HashLastOffset(DictHash)    -= HashSize;                                              //07-01-23|0x05d2
    HashLastOffset(DictHash)    += FileLength;                                            //07-01-23|0x05d3
//***************************************************************************             //07-01-23|0x05d4
    HashLastBridge(DictHash)     = InputHashLastBridge(DictHash) + 1;                     //07-01-23|0x05d5
//***************************************************************************             //07-01-23|0x05d6
    return_test(last_hash_1);                                                             //07-01-23|0x05d7
}                                                                                         //07-01-23|0x05d8
//                                                                                        //05-24-97|0x05d8
//***************************************************************************             //07-01-23|0x05db
//***************************************************************************             //07-01-23|0x05dc
//******                                                               ******             //07-01-23|0x05dd
//******                          connect_text                         ******             //07-01-23|0x05de
//******                                                               ******             //07-01-23|0x05df
//***************************************************************************             //07-01-23|0x05e0
//***************************************************************************             //07-01-23|0x05e1
//*******************************************************************************         //10-29-97|0x05e7
//*******************************************************************************         //10-29-97|0x05e7
// connect_text                                                                           //07-01-23|0x05e7
//*******************************************************************************         //10-29-97|0x05e7
//*******************************************************************************         //10-29-97|0x05e7
UINT BASEDICTUTIL::connect_text(                                                          //07-01-23|0x05e7
    DICT_DATA_FAR Addr,                                                                   //07-01-23|0x05e7
    DICT_HASH_FAR InputHashFar                                                            //07-01-23|0x05e7
    ) {                                                                                   //07-01-23|0x05e7
//*******************************************************************************         //10-29-97|0x05e7
//***************************************************************************             //07-01-23|0x05eb
//***************************************************************************             //07-01-23|0x05ec
    if(DictHash                           >= NoHash)        ReturnSystemError             //07-01-23|0x05ed
//---------------------------------------------------------------------------             //07-01-23|0x05ee
    if(TextNextPosition                   != -1)            ReturnSystemError             //07-01-23|0x05ef
    if(TextDeltaBridge                    != 0)             ReturnSystemError             //07-01-23|0x05f0
//---------------------------------------------------------------------------             //07-01-23|0x05f1
    if(HashLastBridge(DictHash)           == -1)            ReturnSystemError             //07-01-23|0x05f2
    if(InputHashFirst(DictHash)           == -1)            ReturnSystemError             //07-01-23|0x05f3
    if(InputHashFirstOffset(DictHash)     == -1)            ReturnSystemError             //07-01-23|0x05f4
    if(InputHashFirstBridge(DictHash)     == -1)            ReturnSystemError             //07-01-23|0x05f5
//***************************************************************************             //07-01-23|0x05f6
    TextNextPosition  = InputHashFirst(DictHash);                                         //07-01-23|0x05f7
//---------------------------------------------------------------------------             //07-01-23|0x05f8
    TextDeltaOffset   += InputHashFirstOffset(DictHash);                                  //07-01-23|0x05f9
    TextDeltaOffset   -= HashSize;                                                        //07-01-23|0x05fa
//---------------------------------------------------------------------------             //07-01-23|0x05fb
    TextDeltaBridge    = InputHashFirstBridge(DictHash);                                  //07-01-23|0x05fc
    TextDeltaBridge   += 1;                                                               //07-01-23|0x05fd
    TextDeltaBridge   -= HashLastBridge(DictHash);                                        //07-01-23|0x05fe
//***************************************************************************             //07-01-23|0x05ff
    return_test(connect_text_1);                                                          //07-01-23|0x0600
}                                                                                         //07-01-23|0x0601
//                                                                                        //05-24-97|0x0601
//***************************************************************************             //07-01-24|0x0604
//***************************************************************************             //07-01-24|0x0605
//******                                                               ******             //07-01-24|0x0606
//******                  DICTIONARY CONNECTION ROUTINE                ******             //07-01-24|0x0607
//******---------------------------------------------------------------******             //07-01-24|0x0608
//******                  write_record(Addr, RecordFar)                ******             //07-01-24|0x0609
//******                                                               ******             //07-01-24|0x060a
//***************************************************************************             //07-01-24|0x060b
//***************************************************************************             //07-01-24|0x060c
//*******************************************************************************         //10-29-97|0x0613
//*******************************************************************************         //10-29-97|0x0613
// write_record                                                                           //07-01-24|0x0613
//*******************************************************************************         //10-29-97|0x0613
//*******************************************************************************         //10-29-97|0x0613
UINT BASEDICTUTIL::write_record(                                                          //07-01-24|0x0613
    DICT_DATA_FAR Addr,                                                                   //07-01-24|0x0613
    DICT_RECORD_FAR RecordFar                                                             //07-01-24|0x0613
    ) {                                                                                   //07-01-24|0x0613
//*******************************************************************************         //10-29-97|0x0613
//***************************************************************************             //07-01-24|0x0617
//***************************************************************************             //07-01-24|0x0618
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-24|0x0619
    switch(BaseWriteRecord)                                                               //07-01-24|0x061a
      {                                                                                   //07-04-16|0x061b
        case Success:     switch(FileRelease())                 _SwitchBreak;             //07-04-16|0x061c
        case UserError:   switch(FileRelease())                 _SwitchGroup;             //07-04-16|0x061d
                          return(UserError);                                              //07-04-16|0x061e
        default:                                            ReturnSystemError             //07-04-16|0x061f
        }                                                                                 //07-04-16|0x0620
//***************************************************************************             //07-01-24|0x0621
    return_test(write_record_1);                                                          //07-01-24|0x0622
}                                                                                         //07-01-24|0x0623
//                                                                                        //05-24-97|0x0623
//***************************************************************************             //07-01-23|0x0626
//***************************************************************************             //07-01-23|0x0627
//******                                                               ******             //07-01-23|0x0628
//******                    read_record(Addr, RecordFar)               ******             //07-01-23|0x0629
//******                                                               ******             //07-01-23|0x062a
//***************************************************************************             //07-01-23|0x062b
//***************************************************************************             //07-01-23|0x062c
//*******************************************************************************         //10-29-97|0x0634
//*******************************************************************************         //10-29-97|0x0634
// read_record                                                                            //07-01-23|0x0634
//*******************************************************************************         //10-29-97|0x0634
//*******************************************************************************         //10-29-97|0x0634
UINT BASEDICTUTIL::read_record(                                                           //07-01-23|0x0634
    DICT_DATA_FAR Addr,                                                                   //07-01-23|0x0634
    DICT_RECORD_FAR RecordFar                                                             //07-01-23|0x0634
    ) {                                                                                   //07-01-23|0x0634
//*******************************************************************************         //10-29-97|0x0634
//***************************************************************************             //07-01-23|0x0638
//***************************************************************************             //07-01-23|0x0639
    if(FilePosition > FileLength)                          ReturnSystemError;             //07-01-23|0x063a
//***************************************************************************             //07-01-23|0x063b
    if(FilePosition == FileLength)                                                        //07-01-23|0x063c
      {                                                                                   //07-01-23|0x063d
        return_yes(read_record_1);                                                        //07-01-23|0x063e
        }                                                                                 //07-01-23|0x063f
//***************************************************************************             //07-01-23|0x0640
    RecordSizeUlong = FileLength - FilePosition;                                          //07-01-23|0x0641
    if(RecordSizeUlong > DICT_RECORD_SIZE)                                                //07-01-23|0x0642
      {                                                                                   //07-01-23|0x0643
        RecordSizeUlong = DICT_RECORD_SIZE;                                               //07-01-23|0x0644
        }                                                                                 //07-01-23|0x0645
//***************************************************************************             //07-01-23|0x0646
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-23|0x0647
    switch(BaseReadRecord)                                       _SwitchGroup             //07-01-23|0x0648
    switch(FileRelease())                                        _SwitchGroup             //07-01-23|0x0649
//***************************************************************************             //07-01-23|0x064a
    FilePosition += RecordSize;                                                           //07-01-23|0x064b
    return_no(read_record_2);                                                             //07-01-23|0x064c
}                                                                                         //07-01-23|0x064d
//                                                                                        //05-24-97|0x064d
//***************************************************************************             //07-01-23|0x0650
//***************************************************************************             //07-01-23|0x0651
//******                                                               ******             //07-01-23|0x0652
//******                         bridge_offset                         ******             //07-01-23|0x0653
//******                                                               ******             //07-01-23|0x0654
//***************************************************************************             //07-01-23|0x0655
//***************************************************************************             //07-01-23|0x0656
//*******************************************************************************         //10-29-97|0x065d
//*******************************************************************************         //10-29-97|0x065d
// bridge_offset                                                                          //07-01-23|0x065d
//*******************************************************************************         //10-29-97|0x065d
//*******************************************************************************         //10-29-97|0x065d
UINT BASEDICTUTIL::bridge_offset(                                                         //07-01-23|0x065d
    DICT_DATA_FAR Addr,                                                                   //07-01-23|0x065d
    SINT Offset                                                                           //07-01-23|0x065d
    ) {                                                                                   //07-01-23|0x065d
//*******************************************************************************         //10-29-97|0x065d
//***************************************************************************             //07-01-23|0x0661
//***************************************************************************             //07-01-23|0x0662
    switch(Offset)                                                                        //07-01-23|0x0663
      {                                                                                   //07-01-23|0x0664
//---------------------------------------------------------------------------             //07-01-23|0x0665
        case -1:  if(DictSearchBridge <= 0)                ReturnSystemError;             //07-09-21|0x0666
                  DictLowerBridge  = DictSearchBridge - 1;                                //07-09-21|0x0667
                  DictUpperBridge  = DictSearchBridge - 1;                                //07-01-24|0x0668
                  break;                                                                  //07-01-24|0x0669
//---------------------------------------------------------------------------             //07-01-23|0x066a
        case  0:  DictLowerBridge  = DictSearchBridge;                                    //07-01-23|0x066b
                  DictUpperBridge  = DictSearchBridge;                                    //07-01-23|0x066c
                  break;                                                                  //07-01-23|0x066d
//---------------------------------------------------------------------------             //07-01-24|0x066e
        case  1:  DictLowerBridge  = DictSearchBridge + 1;                                //07-04-25|0x066f
                  DictUpperBridge  = DictSearchBridge + 1;                                //07-01-24|0x0670
                  break;                                                                  //07-01-24|0x0671
//---------------------------------------------------------------------------             //07-01-23|0x0672
        default:                                           ReturnSystemError;             //07-01-23|0x0673
        }                                                                                 //07-01-23|0x0674
//***************************************************************************             //07-01-23|0x0675
    return_test(bridge_offset_1);                                                         //07-01-23|0x0676
}                                                                                         //07-01-23|0x0677
//                                                                                        //05-24-97|0x0677
//***************************************************************************             //07-01-23|0x067a
//***************************************************************************             //07-01-23|0x067b
//******                                                               ******             //07-01-23|0x067c
//******                         test_bridge                           ******             //07-01-23|0x067d
//******                                                               ******             //07-01-23|0x067e
//***************************************************************************             //07-01-23|0x067f
//***************************************************************************             //07-01-23|0x0680
//*******************************************************************************         //10-29-97|0x0688
//*******************************************************************************         //10-29-97|0x0688
// test_bridge                                                                            //07-04-20|0x0688
//*******************************************************************************         //10-29-97|0x0688
//*******************************************************************************         //10-29-97|0x0688
UINT BASEDICTUTIL::test_bridge(                                                           //07-04-20|0x0688
    DICT_DATA_FAR Addr,                                                                   //07-04-20|0x0688
    STRING_DATA_FAR Input,                                                                //07-04-20|0x0688
    UINT Input_Type                                                                       //07-04-20|0x0688
    ) {                                                                                   //07-04-20|0x0688
//*******************************************************************************         //10-29-97|0x0688
//***************************************************************************             //07-01-23|0x068c
//***************************************************************************             //07-01-23|0x068d
    switch(Input_Type)                                                                    //07-04-20|0x068e
      {                                                                                   //07-04-18|0x068f
        case I_NAME:                                                   break;             //07-04-18|0x0690
        case I_TOKEN:                                                  break;             //07-04-18|0x0691
        case I_STRING:                                                 break;             //07-04-18|0x0692
        case I_USER_STACK:                                             break;             //07-04-18|0x0693
        case I_REGISTER:                                               break;             //07-04-18|0x0694
        case I_BRIDGE_NAME:                                            break;             //07-04-25|0x0695
        case I_PUBLIC_NAME:                                            break;             //07-05-11|0x0696
        case I_UTILITY_NAME:                                           break;             //07-05-11|0x0697
        case I_INCLUDE_NAME:                                           break;             //07-05-11|0x0698
        case I_CLASS_NAME:                                             break;             //07-05-11|0x0699
        case I_CLASS_BRIDGE:                                           break;             //07-05-11|0x069a
        case I_CERTIFICATION:                                          break;             //11-05-28|0x069b
        default:                                            ReturnSystemError             //07-04-18|0x069c
        }                                                                                 //07-04-18|0x069d
//***************************************************************************             //07-01-17|0x069e
    if(InputChar(0)        == 0)                           ReturnSystemError;             //07-01-23|0x069f
    if(InputChar(256)      != 0)                           ReturnSystemError;             //07-01-23|0x06a0
    if((ULONG) InputLength != StrLen(InputLineAddr))       ReturnSystemError;             //07-01-23|0x06a1
//***************************************************************************             //07-01-23|0x06a2
    if( (Input_Type == I_BRIDGE_NAME)  ||                                                 //07-05-11|0x06a3
        (Input_Type == I_PUBLIC_NAME)  ||                                                 //07-05-11|0x06a4
        (Input_Type == I_INCLUDE_NAME) ||                                                 //07-05-11|0x06a5
        (Input_Type == I_UTILITY_NAME) ||                                                 //07-09-21|0x06a6
        (Input_Type == I_CLASS_BRIDGE))                                                   //07-09-21|0x06a7
      {                                                                                   //07-01-17|0x06a8
        if((DictLowerBridge   <= DictCurrentBridge) &&                                    //07-01-23|0x06a9
          (DictCurrentBridge <= DictUpperBridge))                                         //07-01-23|0x06aa
          {                                                                               //07-01-23|0x06ab
            if(TextType == Input_Type)                                                    //07-04-20|0x06ac
              {                                                                           //07-04-18|0x06ad
                switch(StrCmp(TextStringAddr,   InputLineAddr))                           //11-05-28|0x06ae
                  {                                                                       //11-05-28|0x06af
//***************************************************************************             //11-05-28|0x06b0
                    case 0:                                                               //11-05-28|0x06b1
                      if(TextHeaderPosition >= 0)                                         //07-01-23|0x06b2
                        {                                                                 //07-01-23|0x06b3
                          return_yes(test_bridge_1);                                      //07-01-23|0x06b4
                          }                                                               //07-01-23|0x06b5
                      break;                                                              //11-05-28|0x06b6
//***************************************************************************             //11-05-28|0x06b7
                    case 1:                                            break;             //11-05-28|0x06b8
                    case -1:                                           break;             //11-05-28|0x06b9
                    default:                               ReturnSystemError;             //11-05-28|0x06ba
                    }                                                                     //11-05-28|0x06bb
                }                                                                         //07-01-24|0x06bc
            }                                                                             //07-01-24|0x06bd
        }                                                                                 //07-04-25|0x06be
    return_no(test_bridge_2);                                                             //07-01-24|0x06bf
}                                                                                         //07-01-23|0x06c0
//                                                                                        //05-24-97|0x06c0
//***************************************************************************             //07-01-18|0x06c3
//***************************************************************************             //07-01-18|0x06c4
//******                                                               ******             //07-01-18|0x06c5
//******                       close_base(Addr)                        ******             //07-01-18|0x06c6
//******                                                               ******             //07-01-18|0x06c7
//***************************************************************************             //07-01-18|0x06c8
//***************************************************************************             //07-01-18|0x06c9
//*******************************************************************************         //10-29-97|0x06cf
//*******************************************************************************         //10-29-97|0x06cf
// close_dict                                                                             //07-01-18|0x06cf
//*******************************************************************************         //10-29-97|0x06cf
//*******************************************************************************         //10-29-97|0x06cf
UINT BASEDICTUTIL::close_dict(                                                            //07-01-18|0x06cf
    DICT_DATA_FAR Addr                                                                    //07-01-18|0x06cf
    ) {                                                                                   //07-01-18|0x06cf
//*******************************************************************************         //10-29-97|0x06cf
//***************************************************************************             //07-01-18|0x06d3
//***************************************************************************             //07-01-18|0x06d4
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-18|0x06d5
    switch(FileClose())                                          _SwitchGroup             //07-01-18|0x06d6
    switch(FileRelease())                                        _SwitchGroup             //07-01-18|0x06d7
//***************************************************************************             //07-01-18|0x06d8
    return_test(close_dict_1);                                                            //07-01-18|0x06d9
}                                                                                         //07-01-18|0x06da
//                                                                                        //05-24-97|0x06da
//***************************************************************************             //07-01-25|0x06dd
//***************************************************************************             //07-01-25|0x06de
//******                                                               ******             //07-01-25|0x06df
//******             COMMON DICTIONARY COMPLETION ROUTINE              ******             //07-01-25|0x06e0
//******---------------------------------------------------------------******             //07-01-25|0x06e1
//******              delete_dict()                                    ******             //07-01-25|0x06e2
//******                                                               ******             //07-01-25|0x06e3
//***************************************************************************             //07-01-25|0x06e4
//***************************************************************************             //07-01-25|0x06e5
//*******************************************************************************         //10-29-97|0x06eb
//*******************************************************************************         //10-29-97|0x06eb
// delete_dict                                                                            //07-01-25|0x06eb
//*******************************************************************************         //10-29-97|0x06eb
//*******************************************************************************         //10-29-97|0x06eb
UINT BASEDICTUTIL::delete_dict(                                                           //07-01-25|0x06eb
    DICT_DATA_FAR Addr                                                                    //07-01-25|0x06eb
    ) {                                                                                   //07-01-25|0x06eb
//*******************************************************************************         //10-29-97|0x06eb
//***************************************************************************             //07-01-25|0x06ef
//***************************************************************************             //07-01-25|0x06f0
    switch(FileCommitBinary(&DictFileData))                      _SwitchGroup             //07-01-25|0x06f1
//***************************************************************************             //09-08-25|0x06f2
    switch(FileDelete())                                                                  //09-08-25|0x06f3
      {                                                                                   //09-08-25|0x06f4
        case Success:                                                                     //09-08-25|0x06f5
          switch(FileRelease())                                  _SwitchGroup             //09-08-25|0x06f6
          return_test(delete_dict_1);                                                     //09-08-25|0x06f7
//---------------------------------------------------------------------------             //09-08-25|0x06f8
        case UserError:                                                                   //09-08-25|0x06f9
          switch(FileRelease())                                  _SwitchGroup             //09-08-25|0x06fa
          return(UserError);                                                              //09-08-25|0x06fb
//---------------------------------------------------------------------------             //09-08-25|0x06fc
        default:                                           ReturnSystemError;             //09-08-25|0x06fd
        }                                                                                 //09-08-25|0x06fe
//***************************************************************************             //07-01-25|0x06ff
}                                                                                         //07-01-25|0x0700
//                                                                                        //05-24-97|0x0700
//***************************************************************************             //07-01-25|0x0703
//***************************************************************************             //07-01-25|0x0704
//******                                                               ******             //07-01-25|0x0705
//******                       TEST WRAPPERS                           ******             //07-01-25|0x0706
//******                                                               ******             //07-01-25|0x0707
//***************************************************************************             //07-01-25|0x0708
//***************************************************************************             //07-01-25|0x0709
//*******************************************************************************         //10-29-97|0x070a
//*******************************************************************************         //10-29-97|0x070a
// basedictutil_test_reset                                                                //07-01-25|0x070a
//*******************************************************************************         //10-29-97|0x070a
//*******************************************************************************         //10-29-97|0x070a
UINT BASEDICTUTIL::basedictutil_test_reset(void) {                                        //07-01-25|0x070a
//*******************************************************************************         //10-29-97|0x070a
//************************************************************************                //07-01-25|0x070a
    switch(BasicTestReset())                                                              //07-01-25|0x070a
      {                                                                                   //07-01-25|0x070a
        case Success:                                     return(Success);                //07-01-25|0x070a
        default:                                        ReturnSystemError;                //07-01-25|0x070a
        }                                                                                 //07-01-25|0x070a
}                                                                                         //07-01-25|0x070a
//                                                                                        //05-24-97|0x070a
//***************************************************************************             //07-01-25|0x070b
//*******************************************************************************         //10-29-97|0x070c
//*******************************************************************************         //10-29-97|0x070c
// basedictutil_test_read                                                                 //07-01-25|0x070c
//*******************************************************************************         //10-29-97|0x070c
//*******************************************************************************         //10-29-97|0x070c
UINT BASEDICTUTIL::basedictutil_test_read(void) {                                         //07-01-25|0x070c
//*******************************************************************************         //10-29-97|0x070c
//************************************************************************                //07-01-25|0x070c
    switch(BasicTestRead(&test_samples[0], test_samples[0]))                              //07-01-25|0x070c
      {                                                                                   //07-01-25|0x070c
        case Success:                                     return(Success);                //07-01-25|0x070c
        default:                                        ReturnSystemError;                //07-01-25|0x070c
        }                                                                                 //07-01-25|0x070c
}                                                                                         //07-01-25|0x070c
//                                                                                        //05-24-97|0x070c
//***************************************************************************             //07-01-25|0x070d
//*******************************************************************************         //10-29-97|0x070e
//*******************************************************************************         //10-29-97|0x070e
// basedictutil_test_write                                                                //07-01-25|0x070e
//*******************************************************************************         //10-29-97|0x070e
//*******************************************************************************         //10-29-97|0x070e
UINT BASEDICTUTIL::basedictutil_test_write(void) {                                        //07-01-25|0x070e
//*******************************************************************************         //10-29-97|0x070e
//************************************************************************                //07-01-25|0x070e
    switch(BasicTestWrite(&test_samples[0]))                                              //07-01-25|0x070e
      {                                                                                   //07-01-25|0x070e
        case Success:                                     return(Success);                //07-01-25|0x070e
        default:                                        ReturnSystemError;                //07-01-25|0x070e
        }                                                                                 //07-01-25|0x070e
}                                                                                         //07-01-25|0x070e
//                                                                                        //05-24-97|0x070e
//***************************************************************************             //07-01-25|0x070f
//*******************************************************************************         //10-29-97|0x0710
//*******************************************************************************         //10-29-97|0x0710
// basedictutil_test_report                                                               //07-01-25|0x0710
//*******************************************************************************         //10-29-97|0x0710
//*******************************************************************************         //10-29-97|0x0710
UINT BASEDICTUTIL::basedictutil_test_report(void) {                                       //07-01-25|0x0710
//*******************************************************************************         //10-29-97|0x0710
//************************************************************************                //07-01-25|0x0710
    switch(BasicTestReport(&test_samples[0], "BASEUTILDICT"))                             //07-01-25|0x0710
      {                                                                                   //07-01-25|0x0710
        case Success:                                     return(Success);                //07-01-25|0x0710
        default:                                        ReturnSystemError;                //07-01-25|0x0710
        }                                                                                 //07-01-25|0x0710
}                                                                                         //07-01-25|0x0710
//                                                                                        //05-24-97|0x0710
//***************************************************************************             //07-01-17|0x0713
//***************************************************************************             //07-01-17|0x0714
//******                                                               ******             //07-01-17|0x0715
//******                        constructor                            ******             //07-01-17|0x0716
//******                                                               ******             //07-01-17|0x0717
//***************************************************************************             //07-01-17|0x0718
//***************************************************************************             //07-01-17|0x0719
//*******************************************************************************         //10-29-97|0x071a
//*******************************************************************************         //10-29-97|0x071a
// CONSTRUCTOR                                                                            //07-01-17|0x071a
//*******************************************************************************         //10-29-97|0x071a
//*******************************************************************************         //10-29-97|0x071a
BASEDICTUTIL::BASEDICTUTIL() {                                                            //07-01-17|0x071a
//***************************************************************************             //07-01-17|0x071b
//***************************************************************************             //07-01-17|0x071c
    { ULONG i;                                                                            //07-01-17|0x071d
      test_samples[NoTestSamples] = TestIndex;                                            //07-01-17|0x071d
      i = 1;                                                                              //07-01-17|0x071d
      while(i<TestIndex)                                                                  //07-01-17|0x071d
        {                                                                                 //07-01-17|0x071d
          test_samples[i] = 0;                                                            //07-01-17|0x071d
          ++i;                                                                            //07-01-17|0x071d
          }                                                                               //07-01-17|0x071d
      }                                                                                   //07-01-17|0x071d
//***************************************************************************             //07-01-17|0x071e
}                                                                                         //07-01-17|0x071f
//                                                                                        //05-24-97|0x071f
//*******************************************************************************         //05-24-97|0x0721
//*******************************************************************************         //05-24-97|0x0721
//****                       END OF FILE                                     ****         //05-24-97|0x0721
//*******************************************************************************         //05-24-97|0x0721
//*******************************************************************************         //05-24-97|0x0721
