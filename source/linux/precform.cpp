//*****************************************************************************           //98-07-28|0x001e
//*****************************************************************************           //98-07-28|0x001e
//                                                                                        //98-07-28|0x001e
// PRECEDENCE TEXT FORMAT MANAGER                                                         //98-07-28|0x001e
//                                                                                        //98-07-28|0x001e
//*****************************************************************************           //98-07-28|0x001e
//*****************************************************************************           //98-07-28|0x001e
//  Copyright: 2006 Robert H. Adams                                                       //98-07-28|0x001e
//*****************************************************************************           //98-07-28|0x001e
//  The purpose of this program as well as instructions regarding its use is              //98-07-28|0x001e
//  defined in the associated manual.                                                     //98-07-28|0x001e
//*****************************************************************************           //98-07-28|0x001e
//  This program is free software; you can redistribute it and/or modify                  //98-07-28|0x001e
//  it under the terms of the GNU General Public License as published by                  //98-07-28|0x001e
//  the Free Software Foundation; either version 2 of the License, or                     //98-07-28|0x001e
//  (at your option) any later version.                                                   //98-07-28|0x001e
//                                                                                        //98-07-28|0x001e
//  This program is distributed in the hope that it will be useful,                       //98-07-28|0x001e
//  but WITHOUT ANY WARRANTY; without even the implied warranty of                        //98-07-28|0x001e
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                         //98-07-28|0x001e
//  GNU General Public License for more details.                                          //98-07-28|0x001e
//                                                                                        //98-07-28|0x001e
//  You should have received a copy of the GNU General Public License                     //98-07-28|0x001e
//  along with this program; if not, write to the Free Software                           //98-07-28|0x001e
//  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA., 02110-1301            //98-07-28|0x001e
//  USA                                                                                   //98-07-28|0x001e
//*****************************************************************************           //98-07-28|0x001e
//  For further information, please contact Robert Adams:                                 //98-07-28|0x001e
//     EMail:    robert.adams@whatifwe.com                                                //98-07-28|0x001e
//     Mail:     PO Box 156, Sun Valley, Ca. 91353-0155, USA                              //98-07-28|0x001e
//  Or visit the website, "www.whatifwe.com".                                             //98-07-28|0x001e
//*****************************************************************************           //98-07-28|0x001e
//*****************************************************************************           //98-07-28|0x001e
#ifdef WIN31_SYSTEM                                                                       //05-24-97|0x0021
#include "precwn31.h"                                                                     //05-24-97|0x0021
#endif                                                                                    //05-24-97|0x0021
#ifdef WIN95_SYSTEM                                                                       //05-24-97|0x0021
#include "precwn95.h"                                                                     //05-24-97|0x0021
#endif                                                                                    //05-24-97|0x0021
#ifdef MSDOS_SYSTEM                                                                       //05-24-97|0x0021
#include "precdos.h"                                                                      //05-24-97|0x0021
#endif                                                                                    //05-24-97|0x0021
#include "prechost.h"                                                                     //05-24-97|0x0021
#include "precform.h"                                                                     //06-07-22|0x0021
#include "precform.hxx"                                                                   //06-07-22|0x0021
#include "precform.hpp"                                                                   //06-07-22|0x0021
#include "precdiag.h"                                                                     //06-07-22|0x0022
#include "global.hxx"                                                                     //check   |0x0023
#define Allocate(k) (k##_FAR) calloc(1,sizeof(k))                                         //06-07-22|0x002b
#define Free(k) free(k)                                                                   //06-07-22|0x002b
#define MemSet(i,j,k) memset(i,j,k)                                                       //06-07-22|0x002b
#define MemCCpy(i,j,k,l) Mem_C_Copy((UCHAR_FAR) i, (UCHAR_FAR) j,k,l)                     //06-07-22|0x002b
#define MemCpy(i,j,k) memcpy(i,j,k)                                                       //06-07-22|0x002b
#define LineEnd 0x0d                                                                      //06-07-22|0x002b
#define StrCmp(i,j) ((strcmp(i,j) == 0) ? 0 : 1)                                          //06-07-22|0x002c
#define StrLen(i) strlen(i)                                                               //06-07-22|0x002c
#define StrCat(i,j) strcat(i,j)                                                           //06-07-22|0x002c
#define StrCpy(i,j) strcpy(i,j)                                                           //06-07-22|0x002c
#define StrChr(i,j) strchr(i,j)                                                           //06-07-22|0x002c
#define StrRChr(i,j) strrchr(i,j)                                                         //06-07-22|0x002c
#define StrToByteInt(i,j) GetInteger(i,&j,0xff)                                           //06-07-22|0x002c
#define StrToInt(i,j) GetInteger(i,&j,0xffff)                                             //06-07-22|0x002c
#define StrToLongInt(i,j) GetInteger(i,&j,0xffffffffL)                                    //06-07-22|0x002c
#define StrToByteHex(i,j) GetHex(i,&j,1)                                                  //06-07-22|0x002c
#define StrToHex(i,j) GetHex(i,&j,2)                                                      //06-07-22|0x002c
#define StrToLongHex(i,j) GetHex(i,&j,4)                                                  //06-07-22|0x002c
#define FindName(i) strrchr(i, '/')                                                       //06-07-22|0x002c
PRECFORM prec_format;                                                                     //98-07-28|0x0048
static UINT test_samples[TestIndex];                                                      //04-10-22|0x0050
//***************************************************************************             //check   |0x0057
//***************************************************************************             //check   |0x0058
//******                                                               ******             //check   |0x0059
//******                            Concat                             ******             //check   |0x005a
//******                                                               ******             //check   |0x005b
//***************************************************************************             //check   |0x005c
//***************************************************************************             //check   |0x005d
//*******************************************************************************         //10-29-97|0x0062
//*******************************************************************************         //10-29-97|0x0062
// concat                                                                                 //check   |0x0062
//*******************************************************************************         //10-29-97|0x0062
//*******************************************************************************         //10-29-97|0x0062
UINT PRECFORM::concat(                                                                    //check   |0x0062
    STRING_DATA_FAR Output,                                                               //check   |0x0062
    STRING_DATA_FAR Input                                                                 //check   |0x0062
    ) {                                                                                   //check   |0x0062
//*******************************************************************************         //10-29-97|0x0062
//***************************************************************************             //check   |0x0066
//***************************************************************************             //check   |0x0067
  WORDS size;                                                                        //check   |0x0068
//***************************************************************************             //check   |0x0069
//***************************************************************************             //check   |0x006a
    if(OutputLength                  >= 256)                ReturnSystemError             //check   |0x006b
    if(OutputChar(OutputLength)      != 0)                  ReturnSystemError             //check   |0x006c
    if(InputLength                   >= 256)                ReturnSystemError             //check   |0x006d
    if(InputChar(InputLength)        != 0)                  ReturnSystemError             //check   |0x006e
//***************************************************************************             //check   |0x006f
    if((OutputLength += InputLength) >= 256) ReturnFinish("String too Long");             //check   |0x0070
    StrCat(OutputLineAddr, InputLineAddr);                                                //check   |0x0071
    OutputType = I_TOKEN;                                                                 //check   |0x0072
//***************************************************************************             //check   |0x0073
    if(OutputChar(OutputLength) != 0)                       ReturnSystemError             //check   |0x0074
    size.ulong = StrLen(OutputLineAddr);                                                  //check   |0x0075
    if(size.slong != OutputLength)                          ReturnSystemError             //check   |0x0076
    return_test(concat_1);                                                                //check   |0x0077
}                                                                                         //check   |0x0078
//                                                                                        //05-24-97|0x0078
//***************************************************************************             //04-10-22|0x007b
//***************************************************************************             //04-10-22|0x007c
//******                                                               ******             //04-10-22|0x007d
//******                          get_token                            ******             //04-10-22|0x007e
//******                                                               ******             //04-10-22|0x007f
//***************************************************************************             //04-10-22|0x0080
//***************************************************************************             //04-10-22|0x0081
//*******************************************************************************         //10-29-97|0x008d
//*******************************************************************************         //10-29-97|0x008d
// get_token                                                                              //98-07-28|0x008d
//*******************************************************************************         //10-29-97|0x008d
//*******************************************************************************         //10-29-97|0x008d
UINT PRECFORM::get_token(                                                                 //98-07-28|0x008d
    STRING_DATA_FAR Output,                                                               //98-07-28|0x008d
    STRING_DATA_FAR Input                                                                 //98-07-28|0x008d
    ) {                                                                                   //98-07-28|0x008d
//*******************************************************************************         //10-29-97|0x008d
//***************************************************************************             //04-10-22|0x0091
//***************************************************************************             //04-10-22|0x0092
    OutputType        = InputType;                                                        //05-07-02|0x0093
    OutputStartCol    = InputStartCol;                                                    //05-07-02|0x0094
    OutputStartCall   = InputStartCall;                                                   //05-07-02|0x0095
    OutputMacroLineNo = InputMacroLineNo;                                                 //07-03-08|0x0096
    if(OutputLength  != 0)                                 ReturnSystemError;             //04-10-22|0x0097
//---------------------------------------------------------------------------             //05-06-13|0x0098
loop:                                                                                     //98-07-28|0x0099
    if(InputPosition              >= InputLength)          ReturnSystemError;             //04-10-22|0x009a
    if(CharInput                  != Success)              return(UserError);             //06-07-14|0x009b
    if(InputChar(InputPosition)   == '_')            goto_test(GetToken_1);               //04-10-22|0x009c
    if(InputChar(InputPosition)   == '$')            goto_test(GetToken_2);               //04-10-22|0x009d
    if(InputChar(InputPosition)   <  '0')          return_test(GetToken_3);               //04-10-22|0x009e
    if(InputChar(InputPosition)   <= '9')            goto_test(GetToken_4);               //04-10-22|0x009f
    if(InputChar(InputPosition)   <  'A')          return_test(GetToken_5);               //04-10-22|0x00a0
    if(InputChar(InputPosition)   <= 'Z')            goto_test(GetToken_6);               //04-10-22|0x00a1
    if(InputChar(InputPosition)   <  'a')          return_test(GetToken_7);               //04-10-22|0x00a2
    if(InputChar(InputPosition)   <= 'z')            goto_test(GetToken_8);               //04-10-22|0x00a3
    return_test(GetToken_9);                                                              //04-10-22|0x00a4
}                                                                                         //98-07-28|0x00a5
//                                                                                        //05-24-97|0x00a5
//***************************************************************************             //04-10-22|0x00a8
//***************************************************************************             //04-10-22|0x00a9
//******                                                               ******             //04-10-22|0x00aa
//******                           get_text                            ******             //04-10-22|0x00ab
//******                                                               ******             //04-10-22|0x00ac
//***************************************************************************             //04-10-22|0x00ad
//***************************************************************************             //04-10-22|0x00ae
//*******************************************************************************         //10-29-97|0x00b3
//*******************************************************************************         //10-29-97|0x00b3
// get_text                                                                               //04-04-97|0x00b3
//*******************************************************************************         //10-29-97|0x00b3
//*******************************************************************************         //10-29-97|0x00b3
UINT PRECFORM::get_text(                                                                  //04-04-97|0x00b3
    STRING_DATA_FAR Output,                                                               //04-04-97|0x00b3
    STRING_DATA_FAR Input                                                                 //04-04-97|0x00b3
    ) {                                                                                   //04-04-97|0x00b3
//*******************************************************************************         //10-29-97|0x00b3
//***************************************************************************             //04-10-22|0x00b7
//***************************************************************************             //04-10-22|0x00b8
    TestSample(GetText_1);                                                                //04-10-22|0x00b9
//---------------------------------------------------------------------------             //05-06-13|0x00ba
    OutputType        = InputType;                                                        //05-07-02|0x00bb
    OutputStartCol    = InputStartCol;                                                    //05-07-02|0x00bc
    OutputStartCall   = InputStartCall;                                                   //05-07-02|0x00bd
    OutputMacroLineNo = InputMacroLineNo;                                                 //07-03-08|0x00be
    if(OutputLength  != 0)                                 ReturnSystemError;             //07-03-08|0x00bf
//---------------------------------------------------------------------------             //05-06-13|0x00c0
loop:                                                                                     //04-04-97|0x00c1
    if(InputPosition  >= InputLength)                      ReturnSystemError;             //04-10-22|0x00c2
    if(OutputLength   >= 256)              ReturnFinish("Argument Too Long");             //04-04-97|0x00c3
    switch(InputChar(InputPosition))                                                      //04-04-97|0x00c4
      {                                                                                   //04-04-97|0x00c5
        case 0x00:                         ReturnFinish("Unterminated Text");             //04-04-97|0x00c6
        case 0x0a:                         ReturnFinish("Unterminated Text");             //04-04-97|0x00c7
//---------------------------------------------------------------------------             //04-10-22|0x00c8
        case '\'':                                                                        //04-04-97|0x00c9
            ++InputColumn;  ++InputPosition;                                              //07-03-08|0x00ca
            if(OutputLength != 0)                            return(Success);             //07-03-08|0x00cb
            ReturnFinish("Zero Length Text");                                             //07-03-08|0x00cc
//---------------------------------------------------------------------------             //04-10-22|0x00cd
        case 0x09:                                         ReturnSystemError;             //04-10-22|0x00ce
//---------------------------------------------------------------------------             //04-10-22|0x00cf
        case '\\':  switch(BackSlashInput)              _SwitchGotoLoop;                  //04-10-22|0x00d0
//---------------------------------------------------------------------------             //04-10-22|0x00d1
        default:        switch(CharInput)                   _SwitchGotoLoop;              //04-10-22|0x00d2
        }                                                                                 //04-04-97|0x00d3
}                                                                                         //04-04-97|0x00d4
//                                                                                        //05-24-97|0x00d4
//***************************************************************************             //04-10-22|0x00d7
//***************************************************************************             //04-10-22|0x00d8
//******                                                               ******             //04-10-22|0x00d9
//******                           get_string                          ******             //04-10-22|0x00da
//******                                                               ******             //04-10-22|0x00db
//***************************************************************************             //04-10-22|0x00dc
//***************************************************************************             //04-10-22|0x00dd
//*******************************************************************************         //10-29-97|0x00e1
//*******************************************************************************         //10-29-97|0x00e1
// get_string                                                                             //04-04-97|0x00e1
//*******************************************************************************         //10-29-97|0x00e1
//*******************************************************************************         //10-29-97|0x00e1
UINT PRECFORM::get_string(                                                                //04-04-97|0x00e1
    STRING_DATA_FAR Output,                                                               //04-04-97|0x00e1
    STRING_DATA_FAR Input                                                                 //04-04-97|0x00e1
    ) {                                                                                   //04-04-97|0x00e1
//*******************************************************************************         //10-29-97|0x00e1
//***************************************************************************             //04-10-22|0x00e5
//***************************************************************************             //04-10-22|0x00e6
    TestSample(GetString_1);                                                              //04-10-22|0x00e7
//---------------------------------------------------------------------------             //05-06-13|0x00e8
    OutputType        = InputType;                                                        //05-07-02|0x00e9
    OutputStartCol    = InputStartCol;                                                    //05-07-02|0x00ea
    OutputStartCall   = InputStartCall;                                                   //05-07-02|0x00eb
    OutputMacroLineNo = InputMacroLineNo;                                                 //check   |0x00ec
    if(OutputLength  != 0)                                 ReturnSystemError;             //check   |0x00ed
//---------------------------------------------------------------------------             //05-06-13|0x00ee
    if(CharInput != Success)                               return(UserError);             //04-10-22|0x00ef
loop:                                                                                     //04-04-97|0x00f0
    if(InputPosition    >= InputLength)                    ReturnSystemError;             //04-10-22|0x00f1
    switch(InputChar(InputPosition))                                                      //04-04-97|0x00f2
      {                                                                                   //04-04-97|0x00f3
        case 0x00:                         ReturnFinish("Unterminated Text");             //04-04-97|0x00f4
        case 0x0a:                         ReturnFinish("Unterminated Text");             //04-04-97|0x00f5
//---------------------------------------------------------------------------             //04-10-22|0x00f6
        case 0x09:                                         ReturnSystemError;             //04-10-22|0x00f7
//---------------------------------------------------------------------------             //04-10-22|0x00f8
        case '"':                                                                         //check   |0x00f9
            switch(CharInput)                                   _SwitchGroup;             //check   |0x00fa
            if(OutputLength > 2)                             return(Success);             //check   |0x00fb
            ReturnFinish("Zero Length String");                                           //check   |0x00fc
//---------------------------------------------------------------------------             //04-10-27|0x00fd
        case '\\':  switch(BackSlashInput)               _SwitchGotoLoop;                 //04-10-27|0x00fe
//---------------------------------------------------------------------------             //04-10-22|0x00ff
        default:        switch(CharInput)                    _SwitchGotoLoop;             //04-10-22|0x0100
        }                                                                                 //04-04-97|0x0101
}                                                                                         //04-04-97|0x0102
//                                                                                        //05-24-97|0x0102
//***************************************************************************             //04-10-22|0x0105
//***************************************************************************             //04-10-22|0x0106
//******                                                               ******             //04-10-22|0x0107
//******                          char_input                           ******             //04-10-22|0x0108
//******                                                               ******             //04-10-22|0x0109
//***************************************************************************             //04-10-22|0x010a
//***************************************************************************             //04-10-22|0x010b
//*******************************************************************************         //10-29-97|0x010f
//*******************************************************************************         //10-29-97|0x010f
// char_input                                                                             //98-07-28|0x010f
//*******************************************************************************         //10-29-97|0x010f
//*******************************************************************************         //10-29-97|0x010f
UINT PRECFORM::char_input(                                                                //98-07-28|0x010f
    STRING_DATA_FAR Output,                                                               //98-07-28|0x010f
    STRING_DATA_FAR Input                                                                 //98-07-28|0x010f
    ) {                                                                                   //98-07-28|0x010f
//*******************************************************************************         //10-29-97|0x010f
//***************************************************************************             //04-10-22|0x0112
//***************************************************************************             //04-10-22|0x0113
    TestSample(CharInput_1);                                                              //04-10-22|0x0114
    if(OutputLength >= 256)                ReturnFinish("Argument Too Long");             //98-07-28|0x0115
    OutputChar(OutputLength++) = InputChar(InputPosition++);                              //98-07-28|0x0116
    InputColumn += 1;                                                                     //98-07-28|0x0117
    return(Success);                                                                      //04-10-22|0x0118
}                                                                                         //98-07-28|0x0119
//                                                                                        //05-24-97|0x0119
//***************************************************************************             //04-10-22|0x011c
//***************************************************************************             //04-10-22|0x011d
//******                                                               ******             //04-10-22|0x011e
//******                           flag_end                            ******             //04-10-22|0x011f
//******                                                               ******             //04-10-22|0x0120
//***************************************************************************             //04-10-22|0x0121
//***************************************************************************             //04-10-22|0x0122
//*******************************************************************************         //10-29-97|0x0127
//*******************************************************************************         //10-29-97|0x0127
// flag_end                                                                               //98-07-28|0x0127
//*******************************************************************************         //10-29-97|0x0127
//*******************************************************************************         //10-29-97|0x0127
UINT PRECFORM::flag_end(                                                                  //98-07-28|0x0127
    STRING_DATA_FAR Output                                                                //98-07-28|0x0127
    ) {                                                                                   //98-07-28|0x0127
//*******************************************************************************         //10-29-97|0x0127
//***************************************************************************             //04-10-22|0x012b
//***************************************************************************             //04-10-22|0x012c
    TestSample(FlagEnd_1);                                                                //04-10-22|0x012d
    if(OutputLength >= 256)                 ReturnFinish("Segment Too Long");             //98-07-28|0x012e
    OutputChar(OutputLength) = 0;                                                         //98-07-28|0x012f
    return(Success);                                                                      //04-10-22|0x0130
}                                                                                         //98-07-28|0x0131
//                                                                                        //05-24-97|0x0131
//***************************************************************************             //05-06-13|0x0134
//***************************************************************************             //05-06-13|0x0135
//******                                                               ******             //05-06-13|0x0136
//******                           name_test                           ******             //05-06-13|0x0137
//******                                                               ******             //05-06-13|0x0138
//***************************************************************************             //05-06-13|0x0139
//***************************************************************************             //05-06-13|0x013a
//*******************************************************************************         //10-29-97|0x0148
//*******************************************************************************         //10-29-97|0x0148
// name_test                                                                              //05-06-13|0x0148
//*******************************************************************************         //10-29-97|0x0148
//*******************************************************************************         //10-29-97|0x0148
UINT PRECFORM::name_test(                                                                 //05-06-13|0x0148
    STRING_DATA_FAR Input                                                                 //05-06-13|0x0148
    ) {                                                                                   //05-06-13|0x0148
//*******************************************************************************         //10-29-97|0x0148
//***************************************************************************             //05-06-13|0x014c
//***************************************************************************             //05-06-13|0x014d
  UINT char_no;                                                                      //05-06-13|0x014e
//***************************************************************************             //05-06-13|0x014f
//***************************************************************************             //05-06-13|0x0150
    if(InputType == I_STRING)                    ReturnUserError(NameTest_9);             //05-06-13|0x0151
    if(InputType == I_NAME)                         return_test(NameTest_10);             //05-06-13|0x0152
    if(InputType != I_TOKEN)                               ReturnSystemError;             //05-06-13|0x0153
//***************************************************************************             //05-06-13|0x0154
    char_no     =   0xffff;                                                               //05-06-13|0x0155
//---------------------------------------------------------------------------             //05-06-13|0x0156
loop:                                                                                     //05-06-13|0x0157
    ++char_no;                                                                            //05-06-13|0x0158
    if(char_no    > InputLength)                           ReturnSystemError;             //05-06-13|0x0159
//---------------------------------------------------------------------------             //check   |0x015a
    if(char_no   == InputLength)                     return_test(NameTest_1);             //check   |0x015b
//---------------------------------------------------------------------------             //05-06-13|0x015c
    if(InputChar(char_no) == '_')                    goto_test(NameTest_2);               //05-06-13|0x015d
//---------------------------------------------------------------------------             //05-06-13|0x015e
    if(InputChar(char_no) <  '0')              ReturnUserError(NameTest_3);               //05-06-13|0x015f
    if(InputChar(char_no) <= '9')                    goto_test(NameTest_4);               //05-06-13|0x0160
//---------------------------------------------------------------------------             //05-06-13|0x0161
    if(InputChar(char_no) <  'A')              ReturnUserError(NameTest_5);               //05-06-13|0x0162
    if(InputChar(char_no) <= 'Z')                    goto_test(NameTest_6);               //05-06-13|0x0163
//---------------------------------------------------------------------------             //05-06-13|0x0164
    if(InputChar(char_no) <  'a')              ReturnUserError(NameTest_7);               //05-06-13|0x0165
    if(InputChar(char_no) <= 'z')                    goto_test(NameTest_8);               //05-06-13|0x0166
//---------------------------------------------------------------------------             //05-06-13|0x0167
    ReturnUserError(NameTest_5);                                                          //05-06-13|0x0168
}                                                                                         //05-06-13|0x0169
//                                                                                        //05-24-97|0x0169
//***************************************************************************             //05-06-13|0x016c
//***************************************************************************             //05-06-13|0x016d
//******                                                               ******             //05-06-13|0x016e
//******                           string_test                         ******             //05-06-13|0x016f
//******                                                               ******             //05-06-13|0x0170
//***************************************************************************             //05-06-13|0x0171
//***************************************************************************             //05-06-13|0x0172
//*******************************************************************************         //10-29-97|0x0183
//*******************************************************************************         //10-29-97|0x0183
// string_test                                                                            //05-06-13|0x0183
//*******************************************************************************         //10-29-97|0x0183
//*******************************************************************************         //10-29-97|0x0183
UINT PRECFORM::string_test(                                                               //05-06-13|0x0183
    STRING_DATA_FAR Input                                                                 //05-06-13|0x0183
    ) {                                                                                   //05-06-13|0x0183
//*******************************************************************************         //10-29-97|0x0183
//***************************************************************************             //05-06-13|0x0187
//***************************************************************************             //05-06-13|0x0188
  UINT char_no;                                                                      //05-06-13|0x0189
  UINT type_flag;                                                                    //05-06-13|0x018a
//***************************************************************************             //05-06-13|0x018b
//***************************************************************************             //05-06-13|0x018c
    if(InputType == I_NAME)              {  ReturnUserError(StringTest_12); }             //05-06-13|0x018d
    if(InputType == I_STRING)                 { return_test(StringTest_13); }             //05-06-13|0x018e
    if(InputType != I_TOKEN)                          {  ReturnSystemError; }             //05-06-13|0x018f
//***************************************************************************             //05-06-13|0x0190
    type_flag   =   0;                                                                    //05-06-13|0x0191
//---------------------------------------------------------------------------             //05-06-13|0x0192
    for(char_no=0; char_no<InputLength; ++char_no)                                        //05-06-13|0x0193
      {                                                                                   //05-06-13|0x0194
//---------------------------------------------------------------------------             //05-06-13|0x0195
        switch(InputChar(char_no))                                                        //05-06-13|0x0196
          {                                                                               //05-06-13|0x0197
//---------------------------------------------------------------------------             //05-06-13|0x0198
            case 0x09:                                     ReturnSystemError;             //05-06-13|0x0199
            case 0x0a:                                     ReturnSystemError;             //05-06-13|0x019a
//---------------------------------------------------------------------------             //05-06-13|0x019b
            case '"':                                                                     //05-06-13|0x019c
                  switch(type_flag)                                                       //05-06-13|0x019d
                    {                                                                     //05-06-13|0x019e
                      case 0:   type_flag = 1;      break_test(StringTest_1);             //05-06-13|0x019f
                      case 1:   type_flag = 2;      break_test(StringTest_2);             //05-06-13|0x01a0
                      case 2:                  ReturnUserError(StringTest_3);             //05-06-13|0x01a1
                      default:                             ReturnSystemError;             //05-06-13|0x01a2
                      }                                                                   //05-06-13|0x01a3
                  break;                                                                  //05-06-13|0x01a4
//---------------------------------------------------------------------------             //05-06-13|0x01a5
            case '\\':                                                                    //05-06-13|0x01a6
                  ++char_no;                                                              //05-06-13|0x01a7
                  if(char_no      > InputLength)       { ReturnSystemError; }             //05-06-13|0x01a8
                  switch(type_flag)                                                       //05-06-13|0x01a9
                    {                                                                     //05-06-13|0x01aa
                      case 1:                       break_test(StringTest_4);             //05-06-13|0x01ab
                      case 0:                  ReturnUserError(StringTest_5);             //05-06-13|0x01ac
                      case 2:                  ReturnUserError(StringTest_6);             //05-06-13|0x01ad
                      default:                             ReturnSystemError;             //05-06-13|0x01ae
                      }                                                                   //05-06-13|0x01af
                  break;                                                                  //05-06-13|0x01b0
//---------------------------------------------------------------------------             //05-06-13|0x01b1
            default:                                                                      //05-06-13|0x01b2
                  switch(type_flag)                                                       //05-06-13|0x01b3
                    {                                                                     //05-06-13|0x01b4
                      case 1:                       break_test(StringTest_7);             //05-06-13|0x01b5
                      case 0:                  ReturnUserError(StringTest_8);             //05-06-13|0x01b6
                      case 2:                  ReturnUserError(StringTest_9);             //05-06-13|0x01b7
                      default:                             ReturnSystemError;             //05-06-13|0x01b8
                      }                                                                   //05-06-13|0x01b9
                  break;                                                                  //05-06-13|0x01ba
            }                                                                             //05-06-13|0x01bb
        }                                                                                 //05-06-13|0x01bc
//***************************************************************************             //05-06-13|0x01bd
     switch(type_flag)                                                                    //05-06-13|0x01be
       {                                                                                  //05-06-13|0x01bf
         case 2:                                  return_test(StringTest_10);             //check   |0x01c0
         case 1:                              ReturnUserError(StringTest_11);             //05-06-13|0x01c1
         case 0:                                           ReturnSystemError;             //05-06-13|0x01c2
         default:                                          ReturnSystemError;             //05-06-13|0x01c3
         }                                                                                //05-06-13|0x01c4
}                                                                                         //05-06-13|0x01c5
//                                                                                        //05-24-97|0x01c5
//***************************************************************************             //04-10-22|0x01c8
//***************************************************************************             //04-10-22|0x01c9
//******                                                               ******             //04-10-22|0x01ca
//******                        process_backslash                      ******             //04-10-22|0x01cb
//******                                                               ******             //04-10-22|0x01cc
//***************************************************************************             //04-10-22|0x01cd
//***************************************************************************             //04-10-22|0x01ce
//*******************************************************************************         //10-29-97|0x01d8
//*******************************************************************************         //10-29-97|0x01d8
// process_backslash                                                                      //06-07-22|0x01d8
//*******************************************************************************         //10-29-97|0x01d8
//*******************************************************************************         //10-29-97|0x01d8
UINT PRECFORM::process_backslash(                                                         //06-07-22|0x01d8
    STRING_DATA_FAR Output,                                                               //06-07-22|0x01d8
    STRING_DATA_FAR Input,                                                                //06-07-22|0x01d8
    UINT Increment                                                                        //06-07-22|0x01d8
    ) {                                                                                   //06-07-22|0x01d8
//*******************************************************************************         //10-29-97|0x01d8
//***************************************************************************             //04-10-22|0x01dc
//***************************************************************************             //04-10-22|0x01dd
    if(OutputLength             >= 256)   ReturnFinish("Argument Too Long");              //98-07-28|0x01de
    if(OutputChar(OutputLength) != 0)                     ReturnSystemError;              //06-07-22|0x01df
//***************************************************************************             //04-10-22|0x01e0
    if((InputPosition+1)  < InputLength)                                                  //check   |0x01e1
      {                                                                                   //06-07-22|0x01e2
//***************************************************************************             //04-10-22|0x01e3
        switch(InputChar(InputPosition+1))                                                //06-07-22|0x01e4
          {                                                                               //06-07-22|0x01e5
//---------------------------------------------------------------------------             //06-07-22|0x01e6
            case '\\':                                                                    //06-07-22|0x01e7
                InputPosition += 1;                                                       //06-07-22|0x01e8
                InputColumn   += Increment;                                               //06-07-22|0x01e9
                break_test(Backslash_Input_1);                                            //06-07-22|0x01ea
//---------------------------------------------------------------------------             //check   |0x01eb
            case '$':                                                                     //check   |0x01ec
                InputPosition += 1;                                                       //check   |0x01ed
                InputColumn   += Increment;                                               //check   |0x01ee
                break_test(Backslash_Input_2);                                            //check   |0x01ef
//---------------------------------------------------------------------------             //check   |0x01f0
            case '"':                                                                     //check   |0x01f1
                InputPosition += 1;                                                       //check   |0x01f2
                InputColumn   += Increment;                                               //check   |0x01f3
                break_test(Backslash_Input_3);                                            //check   |0x01f4
//---------------------------------------------------------------------------             //check   |0x01f5
            case '\'':                                                                    //check   |0x01f6
                InputPosition += 1;                                                       //check   |0x01f7
                InputColumn   += Increment;                                               //check   |0x01f8
                break_test(Backslash_Input_4);                                            //check   |0x01f9
//---------------------------------------------------------------------------             //06-07-22|0x01fa
            default:                                                                      //06-07-22|0x01fb
                break_test(Backslash_Input_5);                                            //06-07-22|0x01fc
            }                                                                             //06-07-22|0x01fd
        }                                                                                 //06-07-22|0x01fe
//***************************************************************************             //06-07-22|0x01ff
    OutputChar(OutputLength) = InputChar(InputPosition);                                  //06-07-22|0x0200
    InputPosition += 1;                                                                   //06-07-22|0x0201
    InputColumn   += Increment;                                                           //06-07-22|0x0202
    OutputLength  += 1;                                                                   //06-07-22|0x0203
    return(Success);                                                                      //06-07-22|0x0204
}                                                                                         //06-07-22|0x0205
//                                                                                        //05-24-97|0x0205
//***************************************************************************             //04-10-22|0x0208
//***************************************************************************             //04-10-22|0x0209
//******                                                               ******             //04-10-22|0x020a
//******                       TEST WRAPPERS                           ******             //04-10-22|0x020b
//******                                                               ******             //04-10-22|0x020c
//***************************************************************************             //04-10-22|0x020d
//***************************************************************************             //04-10-22|0x020e
//*******************************************************************************         //10-29-97|0x020f
//*******************************************************************************         //10-29-97|0x020f
// precformat_test_reset                                                                  //04-10-22|0x020f
//*******************************************************************************         //10-29-97|0x020f
//*******************************************************************************         //10-29-97|0x020f
UINT PRECFORM::precformat_test_reset(void) {                                              //04-10-22|0x020f
//*******************************************************************************         //10-29-97|0x020f
//************************************************************************                //04-10-22|0x020f
    switch(BasicTestReset())                                                              //04-10-22|0x020f
      {                                                                                   //04-10-22|0x020f
        case Success:                                     return(Success);                //04-10-22|0x020f
        default:                                        ReturnSystemError;                //04-10-22|0x020f
        }                                                                                 //04-10-22|0x020f
}                                                                                         //04-10-22|0x020f
//                                                                                        //05-24-97|0x020f
//***************************************************************************             //04-10-22|0x0210
//*******************************************************************************         //10-29-97|0x0211
//*******************************************************************************         //10-29-97|0x0211
// precformat_test_read                                                                   //04-10-22|0x0211
//*******************************************************************************         //10-29-97|0x0211
//*******************************************************************************         //10-29-97|0x0211
UINT PRECFORM::precformat_test_read(void) {                                               //04-10-22|0x0211
//*******************************************************************************         //10-29-97|0x0211
//************************************************************************                //04-10-22|0x0211
    switch(BasicTestRead(&test_samples[0], test_samples[0]))                              //04-10-22|0x0211
      {                                                                                   //04-10-22|0x0211
        case Success:                                     return(Success);                //04-10-22|0x0211
        default:                                        ReturnSystemError;                //04-10-22|0x0211
        }                                                                                 //04-10-22|0x0211
}                                                                                         //04-10-22|0x0211
//                                                                                        //05-24-97|0x0211
//***************************************************************************             //04-10-22|0x0212
//*******************************************************************************         //10-29-97|0x0213
//*******************************************************************************         //10-29-97|0x0213
// precformat_test_write                                                                  //04-10-22|0x0213
//*******************************************************************************         //10-29-97|0x0213
//*******************************************************************************         //10-29-97|0x0213
UINT PRECFORM::precformat_test_write(void) {                                              //04-10-22|0x0213
//*******************************************************************************         //10-29-97|0x0213
//************************************************************************                //04-10-22|0x0213
    switch(BasicTestWrite(&test_samples[0]))                                              //04-10-22|0x0213
      {                                                                                   //04-10-22|0x0213
        case Success:                                     return(Success);                //04-10-22|0x0213
        default:                                        ReturnSystemError;                //04-10-22|0x0213
        }                                                                                 //04-10-22|0x0213
}                                                                                         //04-10-22|0x0213
//                                                                                        //05-24-97|0x0213
//***************************************************************************             //04-10-22|0x0214
//*******************************************************************************         //10-29-97|0x0215
//*******************************************************************************         //10-29-97|0x0215
// precformat_test_report                                                                 //04-10-22|0x0215
//*******************************************************************************         //10-29-97|0x0215
//*******************************************************************************         //10-29-97|0x0215
UINT PRECFORM::precformat_test_report(void) {                                             //04-10-22|0x0215
//*******************************************************************************         //10-29-97|0x0215
//************************************************************************                //04-10-22|0x0215
    switch(BasicTestReport(&test_samples[0], "PRECFORMAT"))                               //04-10-22|0x0215
      {                                                                                   //04-10-22|0x0215
        case Success:                                     return(Success);                //04-10-22|0x0215
        default:                                        ReturnSystemError;                //04-10-22|0x0215
        }                                                                                 //04-10-22|0x0215
}                                                                                         //04-10-22|0x0215
//                                                                                        //05-24-97|0x0215
//***************************************************************************             //04-10-22|0x0218
//***************************************************************************             //04-10-22|0x0219
//******                                                               ******             //04-10-22|0x021a
//******                        constructor                            ******             //04-10-22|0x021b
//******                                                               ******             //04-10-22|0x021c
//***************************************************************************             //04-10-22|0x021d
//***************************************************************************             //04-10-22|0x021e
//*******************************************************************************         //10-29-97|0x021f
//*******************************************************************************         //10-29-97|0x021f
// CONSTRUCTOR                                                                            //04-10-22|0x021f
//*******************************************************************************         //10-29-97|0x021f
//*******************************************************************************         //10-29-97|0x021f
PRECFORM::PRECFORM() {                                                                    //04-10-22|0x021f
//***************************************************************************             //04-10-22|0x0220
//***************************************************************************             //04-10-22|0x0221
    { ULONG i;                                                                            //04-10-22|0x0222
      test_samples[NoTestSamples] = TestIndex;                                            //04-10-22|0x0222
      i = 1;                                                                              //04-10-22|0x0222
      while(i<TestIndex)                                                                  //04-10-22|0x0222
        {                                                                                 //04-10-22|0x0222
          test_samples[i] = 0;                                                            //04-10-22|0x0222
          ++i;                                                                            //04-10-22|0x0222
          }                                                                               //04-10-22|0x0222
      }                                                                                   //04-10-22|0x0222
}                                                                                         //04-10-22|0x0223
//                                                                                        //05-24-97|0x0223
//*******************************************************************************         //05-24-97|0x0225
//*******************************************************************************         //05-24-97|0x0225
//****                       END OF FILE                                     ****         //05-24-97|0x0225
//*******************************************************************************         //05-24-97|0x0225
//*******************************************************************************         //05-24-97|0x0225
