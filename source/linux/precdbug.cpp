//*****************************************************************************           //06-07-14|0x001f
//*****************************************************************************           //06-07-14|0x001f
//                                                                                        //06-07-14|0x001f
// DEBUG PROCESSOR                                                                        //06-07-14|0x001f
//                                                                                        //06-07-14|0x001f
//*****************************************************************************           //06-07-14|0x001f
//*****************************************************************************           //06-07-14|0x001f
//  Copyright: 2006 Robert H. Adams                                                       //06-07-14|0x001f
//*****************************************************************************           //06-07-14|0x001f
//  The purpose of this program as well as instructions regarding its use is              //06-07-14|0x001f
//  defined in the associated manual.                                                     //06-07-14|0x001f
//*****************************************************************************           //06-07-14|0x001f
//  This program is free software; you can redistribute it and/or modify                  //06-07-14|0x001f
//  it under the terms of the GNU General Public License as published by                  //06-07-14|0x001f
//  the Free Software Foundation; either version 2 of the License, or                     //06-07-14|0x001f
//  (at your option) any later version.                                                   //06-07-14|0x001f
//                                                                                        //06-07-14|0x001f
//  This program is distributed in the hope that it will be useful,                       //06-07-14|0x001f
//  but WITHOUT ANY WARRANTY; without even the implied warranty of                        //06-07-14|0x001f
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                         //06-07-14|0x001f
//  GNU General Public License for more details.                                          //06-07-14|0x001f
//                                                                                        //06-07-14|0x001f
//  You should have received a copy of the GNU General Public License                     //06-07-14|0x001f
//  along with this program; if not, write to the Free Software                           //06-07-14|0x001f
//  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA., 02110-1301            //06-07-14|0x001f
//  USA                                                                                   //06-07-14|0x001f
//*****************************************************************************           //06-07-14|0x001f
//  For further information, please contact Robert Adams:                                 //06-07-14|0x001f
//     EMail:    robert.adams@whatifwe.com                                                //06-07-14|0x001f
//     Mail:     PO Box 156, Sun Valley, Ca. 91353-0155, USA                              //06-07-14|0x001f
//  Or visit the website, "www.whatifwe.com".                                             //06-07-14|0x001f
//*****************************************************************************           //06-07-14|0x001f
//*****************************************************************************           //06-07-14|0x001f
#ifdef WIN31_SYSTEM                                                                       //05-24-97|0x0020
#include "precwn31.h"                                                                     //05-24-97|0x0020
#endif                                                                                    //05-24-97|0x0020
#ifdef WIN95_SYSTEM                                                                       //05-24-97|0x0020
#include "precwn95.h"                                                                     //05-24-97|0x0020
#endif                                                                                    //05-24-97|0x0020
#ifdef MSDOS_SYSTEM                                                                       //05-24-97|0x0020
#include "precdos.h"                                                                      //05-24-97|0x0020
#endif                                                                                    //05-24-97|0x0020
#include "prechost.h"                                                                     //05-24-97|0x0020
#include "precdbug.h"                                                                     //06-07-14|0x0020
#include "precdbug.hxx"                                                                   //06-07-14|0x0020
#include "precdbug.hpp"                                                                   //06-07-14|0x0020
#include "guicomm.h"                                                                      //06-07-14|0x0021
#include "precdiag.h"                                                                     //06-07-14|0x0022
#include "preccall.h"                                                                     //06-07-14|0x0023
#include "global.hxx"                                                                     //06-11-06|0x0024
#define Allocate(k) (k##_FAR) calloc(1,sizeof(k))                                         //06-07-14|0x002c
#define Free(k) free(k)                                                                   //06-07-14|0x002c
#define MemSet(i,j,k) memset(i,j,k)                                                       //06-07-14|0x002c
#define MemCCpy(i,j,k,l) Mem_C_Copy((UCHAR_FAR) i, (UCHAR_FAR) j,k,l)                     //06-07-14|0x002c
#define MemCpy(i,j,k) memcpy(i,j,k)                                                       //06-07-14|0x002c
#define LineEnd 0x0d                                                                      //06-07-14|0x002c
#define StrLen(i) strlen(i)                                                               //06-07-14|0x002d
#define StrCat(i,j) strcat(i,j)                                                           //06-07-14|0x002d
#define StrCpy(i,j) strcpy(i,j)                                                           //06-07-14|0x002d
#define StrCmp(i,j) Str_Comp((SCHAR_FAR)i,j,256)                                          //06-07-14|0x002d
#define StrRChr(i,j) strrchr(i,j)                                                         //06-07-14|0x002d
#define StrChr(i,j) strchr(i,j)                                                           //06-07-14|0x002d
#define StrToByteInt(i,j) GetInteger(i,&j,0xff)                                           //06-07-14|0x002d
#define StrToInt(i,j) GetInteger(i,&j,0xffff)                                             //06-07-14|0x002d
#define StrToLongInt(i,j) GetInteger(i,&j,0xffffffffL)                                    //06-07-14|0x002d
#define StrToByteHex(i,j) GetHex(i,&j,1)                                                  //06-07-14|0x002d
#define StrToHex(i,j) GetHex(i,&j,2)                                                      //06-07-14|0x002d
#define StrToLongHex(i,j) GetHex(i,&j,4)                                                  //06-07-14|0x002d
#define FindName(i) strrchr(i, '/')                                                       //06-07-14|0x002d
PRECDBUG prec_dbug;                                                                       //06-07-14|0x004c
static UINT test_samples[TestIndex];                                                      //06-07-14|0x005a
//***************************************************************************             //06-07-14|0x0065
//***************************************************************************             //06-09-26|0x0066
//******                                                               ******             //06-09-26|0x0067
//******                        dbug_command                           ******             //06-09-26|0x0068
//******                                                               ******             //06-09-26|0x0069
//***************************************************************************             //06-09-26|0x006a
//***************************************************************************             //06-09-26|0x006b
//*******************************************************************************         //10-29-97|0x0072
//*******************************************************************************         //10-29-97|0x0072
// dbug_command                                                                           //06-09-26|0x0072
//*******************************************************************************         //10-29-97|0x0072
//*******************************************************************************         //10-29-97|0x0072
UINT PRECDBUG::dbug_command(                                                              //06-09-26|0x0072
    PROCESS_DATA_FAR ProcessDataFar                                                       //06-09-26|0x0072
    ) {                                                                                   //06-09-26|0x0072
//*******************************************************************************         //10-29-97|0x0072
//***************************************************************************             //06-09-26|0x0076
//***************************************************************************             //06-09-26|0x0077
  RunFlag = 1;                                                                            //06-09-26|0x0078
  while(RunFlag != 0)                                                                     //06-09-26|0x0078
  {                                                                                       //06-09-26|0x0078
    switch(DebugState)                                                                    //06-09-26|0x0078
    {                                                                                     //06-09-26|0x0078
//***************************************************************************             //06-09-26|0x0079
//***************************************************************************             //06-09-26|0x007a
//****                                                                   ****             //06-09-26|0x007b
//**** DEBUG COMMAND STATE                                               ****             //06-09-26|0x007c
//****                                                                   ****             //06-09-26|0x007d
//***************************************************************************             //06-09-26|0x007e
//***************************************************************************             //06-09-26|0x007f
      case 4462: // COMMAND                                                               //06-10-01|0x0080
        switch(DbugCommand)                                                               //06-10-01|0x0080
        {                                                                                 //06-10-01|0x0080
          case DBG_ON:                                                                    //06-10-01|0x0080
            DebugState = 4462; // COMMAND                                                 //06-10-01|0x0080
            Status = Success;                                                             //06-10-01|0x0080
            RunFlag = 0;                                                                  //06-10-01|0x0080
            break;                                                                        //06-10-01|0x0080
          case DBG_OFF:                                                                   //06-10-01|0x0080
            DebugState = 4462; // COMMAND                                                 //06-10-01|0x0080
            Status = Success;                                                             //06-10-01|0x0080
            RunFlag = 0;                                                                  //06-10-01|0x0080
            break;                                                                        //06-10-01|0x0080
          case DBG_TOKENS_ONLY:                                                           //06-10-01|0x0080
            RunFlag = 1;                                                                  //06-10-01|0x0080
            DebugState = 10445; // MSG_ONLY                                               //06-10-01|0x0080
            break;                                                                        //06-10-01|0x0080
          case DBG_TOKENS_RES:                                                            //06-10-01|0x0080
            RunFlag = 1;                                                                  //06-10-01|0x0080
            DebugState = 46620; // MSG_RESULT                                             //06-10-01|0x0080
            break;                                                                        //06-10-01|0x0080
          case DBG_TOKENS_FLAG:                                                           //06-10-01|0x0080
            RunFlag = 1;                                                                  //06-10-01|0x0080
            DebugState = 6235; // MSG_FLAG                                                //06-10-01|0x0080
            break;                                                                        //06-10-01|0x0080
          default:                                                                        //06-10-01|0x0080
            Status = SystemError;                                                         //06-10-01|0x0080
            RunFlag = 0;                                                                  //06-10-01|0x0080
            SystemMsg;                                                                    //06-10-01|0x0080
            break;                                                                        //06-10-01|0x0080
        }                                                                                 //06-10-01|0x0080
        break;                                                                            //06-10-01|0x0080
//***************************************************************************             //06-10-01|0x0081
//***************************************************************************             //06-10-01|0x0082
//****                                                                   ****             //06-10-01|0x0083
//**** TRACE ONLY STATES                                                 ****             //06-10-01|0x0084
//****                                                                   ****             //06-10-01|0x0085
//***************************************************************************             //06-10-01|0x0086
//***************************************************************************             //06-10-01|0x0087
      case 10445: // MSG_ONLY                                                             //06-10-01|0x0088
        switch(DebugMessage)                                                              //06-10-01|0x0088
        {                                                                                 //06-10-01|0x0088
          case Success:                                                                   //06-10-01|0x0088
            RunFlag = 1;                                                                  //06-10-01|0x0088
            DebugState = 40586; // TRACE_ONLY                                             //06-10-01|0x0088
            break;                                                                        //06-10-01|0x0088
          default:                                                                        //06-10-01|0x0088
            Status = SystemError;                                                         //06-10-01|0x0088
            RunFlag = 0;                                                                  //06-10-01|0x0088
            SystemMsg;                                                                    //06-10-01|0x0088
            break;                                                                        //06-10-01|0x0088
        }                                                                                 //06-10-01|0x0088
        break;                                                                            //06-10-01|0x0088
//---------------------------------------------------------------------------             //06-10-01|0x0089
      case 40586: // TRACE_ONLY                                                           //06-10-01|0x008a
        switch(DebugTrace)                                                                //06-10-01|0x008a
        {                                                                                 //06-10-01|0x008a
          case Success:                                                                   //06-10-01|0x008a
            DebugState = 34729; // ARGS_ONLY                                              //06-10-01|0x008a
            Status = Display;                                                             //06-10-01|0x008a
            RunFlag = 0;                                                                  //06-10-01|0x008a
            break;                                                                        //06-10-01|0x008a
          default:                                                                        //06-10-01|0x008a
            Status = SystemError;                                                         //06-10-01|0x008a
            RunFlag = 0;                                                                  //06-10-01|0x008a
            SystemMsg;                                                                    //06-10-01|0x008a
            break;                                                                        //06-10-01|0x008a
        }                                                                                 //06-10-01|0x008a
        break;                                                                            //06-10-01|0x008a
//---------------------------------------------------------------------------             //06-10-01|0x008b
      case 34729: // ARGS_ONLY                                                            //06-10-02|0x008c
        switch(CommandArg)                                                                //06-10-02|0x008c
        {                                                                                 //06-10-02|0x008c
          case Success:                                                                   //06-10-02|0x008c
            DebugState = 696; // RESPONSE                                                 //06-10-02|0x008c
            Status = Display;                                                             //06-10-02|0x008c
            RunFlag = 0;                                                                  //06-10-02|0x008c
            break;                                                                        //06-10-02|0x008c
          default:                                                                        //06-10-02|0x008c
            Status = SystemError;                                                         //06-10-02|0x008c
            RunFlag = 0;                                                                  //06-10-02|0x008c
            SystemMsg;                                                                    //06-10-02|0x008c
            break;                                                                        //06-10-02|0x008c
        }                                                                                 //06-10-02|0x008c
        break;                                                                            //06-10-02|0x008c
//***************************************************************************             //06-10-02|0x008d
//***************************************************************************             //06-10-02|0x008e
//****                                                                   ****             //06-10-02|0x008f
//**** TRACE RESULTS STATES                                              ****             //06-10-02|0x0090
//****                                                                   ****             //06-10-02|0x0091
//***************************************************************************             //06-10-02|0x0092
//***************************************************************************             //06-10-02|0x0093
      case 46620: // MSG_RESULT                                                           //06-10-02|0x0094
        switch(DebugMessage)                                                              //06-10-02|0x0094
        {                                                                                 //06-10-02|0x0094
          case Success:                                                                   //06-10-02|0x0094
            RunFlag = 1;                                                                  //06-10-02|0x0094
            DebugState = 11959; // TRACE_RESULT                                           //06-10-02|0x0094
            break;                                                                        //06-10-02|0x0094
          default:                                                                        //06-10-02|0x0094
            Status = SystemError;                                                         //06-10-02|0x0094
            RunFlag = 0;                                                                  //06-10-02|0x0094
            SystemMsg;                                                                    //06-10-02|0x0094
            break;                                                                        //06-10-02|0x0094
        }                                                                                 //06-10-02|0x0094
        break;                                                                            //06-10-02|0x0094
//---------------------------------------------------------------------------             //06-10-02|0x0095
      case 11959: // TRACE_RESULT                                                         //06-10-02|0x0096
        switch(DebugTrace)                                                                //06-10-02|0x0096
        {                                                                                 //06-10-02|0x0096
          case Success:                                                                   //06-10-02|0x0096
            DebugState = 6822; // ARGS_RESULT                                             //06-10-02|0x0096
            Status = Display;                                                             //06-10-02|0x0096
            RunFlag = 0;                                                                  //06-10-02|0x0096
            break;                                                                        //06-10-02|0x0096
          default:                                                                        //06-10-02|0x0096
            Status = SystemError;                                                         //06-10-02|0x0096
            RunFlag = 0;                                                                  //06-10-02|0x0096
            SystemMsg;                                                                    //06-10-02|0x0096
            break;                                                                        //06-10-02|0x0096
        }                                                                                 //06-10-02|0x0096
        break;                                                                            //06-10-02|0x0096
//---------------------------------------------------------------------------             //06-10-02|0x0097
      case 6822: // ARGS_RESULT                                                           //06-11-06|0x0098
        switch(CommandArg)                                                                //06-11-06|0x0098
        {                                                                                 //06-11-06|0x0098
          case Success:                                                                   //06-11-06|0x0098
            DebugState = 50565; // RESULT_RESULT                                          //06-11-06|0x0098
            Status = Display;                                                             //06-11-06|0x0098
            RunFlag = 0;                                                                  //06-11-06|0x0098
            break;                                                                        //06-11-06|0x0098
          default:                                                                        //06-11-06|0x0098
            Status = SystemError;                                                         //06-11-06|0x0098
            RunFlag = 0;                                                                  //06-11-06|0x0098
            SystemMsg;                                                                    //06-11-06|0x0098
            break;                                                                        //06-11-06|0x0098
        }                                                                                 //06-11-06|0x0098
        break;                                                                            //06-11-06|0x0098
//---------------------------------------------------------------------------             //06-11-06|0x0099
      case 50565: // RESULT_RESULT                                                        //06-11-06|0x009a
        switch(DisplayResults)                                                            //06-11-06|0x009a
        {                                                                                 //06-11-06|0x009a
          case Success:                                                                   //06-11-06|0x009a
            DebugState = 696; // RESPONSE                                                 //06-11-06|0x009a
            Status = Display;                                                             //06-11-06|0x009a
            RunFlag = 0;                                                                  //06-11-06|0x009a
            break;                                                                        //06-11-06|0x009a
          default:                                                                        //06-11-06|0x009a
            Status = SystemError;                                                         //06-11-06|0x009a
            RunFlag = 0;                                                                  //06-11-06|0x009a
            SystemMsg;                                                                    //06-11-06|0x009a
            break;                                                                        //06-11-06|0x009a
        }                                                                                 //06-11-06|0x009a
        break;                                                                            //06-11-06|0x009a
//***************************************************************************             //06-10-02|0x009b
//***************************************************************************             //06-10-02|0x009c
//****                                                                   ****             //06-10-02|0x009d
//**** TRACE FLAG STATES                                                 ****             //06-10-02|0x009e
//****                                                                   ****             //06-10-02|0x009f
//***************************************************************************             //06-10-02|0x00a0
//***************************************************************************             //06-10-02|0x00a1
      case 6235: // MSG_FLAG                                                              //06-10-02|0x00a2
        switch(DebugMessage)                                                              //06-10-02|0x00a2
        {                                                                                 //06-10-02|0x00a2
          case Success:                                                                   //06-10-02|0x00a2
            RunFlag = 1;                                                                  //06-10-02|0x00a2
            DebugState = 7764; // TRACE_FLAG                                              //06-10-02|0x00a2
            break;                                                                        //06-10-02|0x00a2
          default:                                                                        //06-10-02|0x00a2
            Status = SystemError;                                                         //06-10-02|0x00a2
            RunFlag = 0;                                                                  //06-10-02|0x00a2
            SystemMsg;                                                                    //06-10-02|0x00a2
            break;                                                                        //06-10-02|0x00a2
        }                                                                                 //06-10-02|0x00a2
        break;                                                                            //06-10-02|0x00a2
//---------------------------------------------------------------------------             //06-10-02|0x00a3
      case 7764: // TRACE_FLAG                                                            //06-10-02|0x00a4
        switch(DebugTrace)                                                                //06-10-02|0x00a4
        {                                                                                 //06-10-02|0x00a4
          case Success:                                                                   //06-10-02|0x00a4
            DebugState = 1043; // ARGS_FLAG                                               //06-10-02|0x00a4
            Status = Display;                                                             //06-10-02|0x00a4
            RunFlag = 0;                                                                  //06-10-02|0x00a4
            break;                                                                        //06-10-02|0x00a4
          default:                                                                        //06-10-02|0x00a4
            Status = SystemError;                                                         //06-10-02|0x00a4
            RunFlag = 0;                                                                  //06-10-02|0x00a4
            SystemMsg;                                                                    //06-10-02|0x00a4
            break;                                                                        //06-10-02|0x00a4
        }                                                                                 //06-10-02|0x00a4
        break;                                                                            //06-10-02|0x00a4
//---------------------------------------------------------------------------             //06-10-02|0x00a5
      case 1043: // ARGS_FLAG                                                             //06-10-02|0x00a6
        switch(CommandArg)                                                                //06-10-02|0x00a6
        {                                                                                 //06-10-02|0x00a6
          case Success:                                                                   //06-10-02|0x00a6
            DebugState = 17858; // FLAG_FLAG                                              //06-10-02|0x00a6
            Status = Display;                                                             //06-10-02|0x00a6
            RunFlag = 0;                                                                  //06-10-02|0x00a6
            break;                                                                        //06-10-02|0x00a6
          default:                                                                        //06-10-02|0x00a6
            Status = SystemError;                                                         //06-10-02|0x00a6
            RunFlag = 0;                                                                  //06-10-02|0x00a6
            SystemMsg;                                                                    //06-10-02|0x00a6
            break;                                                                        //06-10-02|0x00a6
        }                                                                                 //06-10-02|0x00a6
        break;                                                                            //06-10-02|0x00a6
//---------------------------------------------------------------------------             //06-10-02|0x00a7
      case 17858: // FLAG_FLAG                                                            //06-10-02|0x00a8
        switch(DisplayFlag)                                                               //06-10-02|0x00a8
        {                                                                                 //06-10-02|0x00a8
          case Success:                                                                   //06-10-02|0x00a8
            DebugState = 696; // RESPONSE                                                 //06-10-02|0x00a8
            Status = Display;                                                             //06-10-02|0x00a8
            RunFlag = 0;                                                                  //06-10-02|0x00a8
            break;                                                                        //06-10-02|0x00a8
          default:                                                                        //06-10-02|0x00a8
            Status = SystemError;                                                         //06-10-02|0x00a8
            RunFlag = 0;                                                                  //06-10-02|0x00a8
            SystemMsg;                                                                    //06-10-02|0x00a8
            break;                                                                        //06-10-02|0x00a8
        }                                                                                 //06-10-02|0x00a8
        break;                                                                            //06-10-02|0x00a8
//***************************************************************************             //06-10-02|0x00a9
//***************************************************************************             //06-10-02|0x00aa
//****                                                                   ****             //06-10-02|0x00ab
//**** MENU - RESPONSE STATE                                             ****             //06-10-02|0x00ac
//****                                                                   ****             //06-10-02|0x00ad
//***************************************************************************             //06-10-02|0x00ae
//***************************************************************************             //06-10-02|0x00af
      case 696: // RESPONSE                                                               //06-11-06|0x00b0
        switch(DebugPause)                                                                //06-11-06|0x00b0
        {                                                                                 //06-11-06|0x00b0
          case Display:                                                                   //06-11-06|0x00b0
            DebugState = 696; // RESPONSE                                                 //06-11-06|0x00b0
            Status = Display;                                                             //06-11-06|0x00b0
            RunFlag = 0;                                                                  //06-11-06|0x00b0
            break;                                                                        //06-11-06|0x00b0
          case KeyBoard:                                                                  //06-11-06|0x00b0
            DebugState = 696; // RESPONSE                                                 //06-11-06|0x00b0
            Status = KeyBoard;                                                            //06-11-06|0x00b0
            RunFlag = 0;                                                                  //06-11-06|0x00b0
            break;                                                                        //06-11-06|0x00b0
          case Success:                                                                   //06-11-06|0x00b0
            DebugState = 4462; // COMMAND                                                 //06-11-06|0x00b0
            Status = Success;                                                             //06-11-06|0x00b0
            RunFlag = 0;                                                                  //06-11-06|0x00b0
            break;                                                                        //06-11-06|0x00b0
          case UserError:                                                                 //06-11-06|0x00b0
            DebugState = 4462; // COMMAND                                                 //06-11-06|0x00b0
            Status = UserError;                                                           //06-11-06|0x00b0
            RunFlag = 0;                                                                  //06-11-06|0x00b0
            break;                                                                        //06-11-06|0x00b0
          default:                                                                        //06-11-06|0x00b0
            Status = SystemError;                                                         //06-11-06|0x00b0
            RunFlag = 0;                                                                  //06-11-06|0x00b0
            SystemMsg;                                                                    //06-11-06|0x00b0
            break;                                                                        //06-11-06|0x00b0
        }                                                                                 //06-11-06|0x00b0
        break;                                                                            //06-11-06|0x00b0
//***************************************************************************             //06-09-26|0x00b1
//***************************************************************************             //06-09-26|0x00b2
      default:                                                                            //06-09-26|0x00b3
        Status = SystemError;                                                             //06-09-26|0x00b3
        RunFlag = 0;                                                                      //06-09-26|0x00b3
        SystemMsg;                                                                        //06-09-26|0x00b3
        break;                                                                            //06-09-26|0x00b3
    }                                                                                     //06-09-26|0x00b3
  }                                                                                       //06-09-26|0x00b3
//***************************************************************************             //06-09-26|0x00b5
//***************************************************************************             //06-09-26|0x00b6
    return(Status);                                                                       //06-09-26|0x00b7
}                                                                                         //06-09-26|0x00ba
//                                                                                        //05-24-97|0x00ba
//***************************************************************************             //06-11-06|0x00bd
//***************************************************************************             //06-11-06|0x00be
//******                                                               ******             //06-11-06|0x00bf
//******                        menu_command                           ******             //06-11-06|0x00c0
//******                                                               ******             //06-11-06|0x00c1
//***************************************************************************             //06-11-06|0x00c2
//***************************************************************************             //06-11-06|0x00c3
//*******************************************************************************         //10-29-97|0x00c9
//*******************************************************************************         //10-29-97|0x00c9
// menu_cmd                                                                               //06-11-06|0x00c9
//*******************************************************************************         //10-29-97|0x00c9
//*******************************************************************************         //10-29-97|0x00c9
UINT PRECDBUG::menu_cmd(void) {                                                           //06-11-06|0x00c9
//*******************************************************************************         //10-29-97|0x00c9
//***************************************************************************             //06-11-06|0x00cd
//***************************************************************************             //06-11-06|0x00ce
  RunFlag = 1;                                                                            //06-11-06|0x00cf
  while(RunFlag != 0)                                                                     //06-11-06|0x00cf
  {                                                                                       //06-11-06|0x00cf
    switch(MenuState)                                                                     //06-11-06|0x00cf
    {                                                                                     //06-11-06|0x00cf
//---------------------------------------------------------------------------             //06-11-06|0x00d0
      case 4462: // MENU                                                                  //06-11-06|0x00d1
        switch(DispMenu)                                                                  //06-11-06|0x00d1
        {                                                                                 //06-11-06|0x00d1
          case Success:                                                                   //06-11-06|0x00d1
            MenuState = 10445; // MENU_KEYBOARD                                           //06-11-06|0x00d1
            Status = Display;                                                             //06-11-06|0x00d1
            RunFlag = 0;                                                                  //06-11-06|0x00d1
            break;                                                                        //06-11-06|0x00d1
          default:                                                                        //06-11-06|0x00d1
            Status = SystemError;                                                         //06-11-06|0x00d1
            RunFlag = 0;                                                                  //06-11-06|0x00d1
            SystemMsg;                                                                    //06-11-06|0x00d1
            break;                                                                        //06-11-06|0x00d1
        }                                                                                 //06-11-06|0x00d1
        break;                                                                            //06-11-06|0x00d1
//---------------------------------------------------------------------------             //06-11-06|0x00d2
      case 10445: // MENU_KEYBOARD                                                        //06-11-06|0x00d3
        MenuState = 46620; // MENU_RESPONSE                                               //06-11-06|0x00d3
        Status = KeyBoard;                                                                //06-11-06|0x00d3
        RunFlag = 0;                                                                      //06-11-06|0x00d3
        break;                                                                            //06-11-06|0x00d3
//---------------------------------------------------------------------------             //06-11-06|0x00d4
      case 46620: // MENU_RESPONSE                                                        //12-05-03|0x00d5
        switch(MenuPause)                                                                 //12-05-03|0x00d5
        {                                                                                 //12-05-03|0x00d5
          case Continue:                                                                  //12-05-03|0x00d5
            MenuState = 46620; // MENU_RESPONSE                                           //12-05-03|0x00d5
            Status = KeyBoard;                                                            //12-05-03|0x00d5
            RunFlag = 0;                                                                  //12-05-03|0x00d5
            break;                                                                        //12-05-03|0x00d5
          case Yes:                                                                       //12-05-03|0x00d5
            MenuState = 4462; // MENU                                                     //12-05-03|0x00d5
            Status = Yes;                                                                 //12-05-03|0x00d5
            RunFlag = 0;                                                                  //12-05-03|0x00d5
            break;                                                                        //12-05-03|0x00d5
          case No:                                                                        //12-05-03|0x00d5
            MenuState = 4462; // MENU                                                     //12-05-03|0x00d5
            Status = No;                                                                  //12-05-03|0x00d5
            RunFlag = 0;                                                                  //12-05-03|0x00d5
            break;                                                                        //12-05-03|0x00d5
          case UserError:                                                                 //12-05-03|0x00d5
            MenuState = 4462; // MENU                                                     //12-05-03|0x00d5
            Status = UserError;                                                           //12-05-03|0x00d5
            RunFlag = 0;                                                                  //12-05-03|0x00d5
            break;                                                                        //12-05-03|0x00d5
          default:                                                                        //12-05-03|0x00d5
            Status = SystemError;                                                         //12-05-03|0x00d5
            RunFlag = 0;                                                                  //12-05-03|0x00d5
            SystemMsg;                                                                    //12-05-03|0x00d5
            break;                                                                        //12-05-03|0x00d5
        }                                                                                 //12-05-03|0x00d5
        break;                                                                            //12-05-03|0x00d5
//***************************************************************************             //06-11-06|0x00d6
//***************************************************************************             //06-11-06|0x00d7
      default:                                                                            //06-11-06|0x00d8
        Status = SystemError;                                                             //06-11-06|0x00d8
        RunFlag = 0;                                                                      //06-11-06|0x00d8
        SystemMsg;                                                                        //06-11-06|0x00d8
        break;                                                                            //06-11-06|0x00d8
    }                                                                                     //06-11-06|0x00d8
  }                                                                                       //06-11-06|0x00d8
//***************************************************************************             //06-11-06|0x00da
//***************************************************************************             //06-11-06|0x00db
    return(Status);                                                                       //06-11-06|0x00dc
}                                                                                         //06-11-06|0x00df
//                                                                                        //05-24-97|0x00df
//***************************************************************************             //06-10-01|0x00e2
//***************************************************************************             //06-10-01|0x00e3
//******                                                               ******             //06-10-01|0x00e4
//******                         debug_message                         ******             //06-10-01|0x00e5
//******                                                               ******             //06-10-01|0x00e6
//***************************************************************************             //06-10-01|0x00e7
//***************************************************************************             //06-10-01|0x00e8
//*******************************************************************************         //10-29-97|0x00ed
//*******************************************************************************         //10-29-97|0x00ed
// debug_message                                                                          //06-10-01|0x00ed
//*******************************************************************************         //10-29-97|0x00ed
//*******************************************************************************         //10-29-97|0x00ed
UINT PRECDBUG::debug_message(                                                             //06-10-01|0x00ed
    PROCESS_DATA_FAR ProcessDataFar                                                       //06-10-01|0x00ed
    ) {                                                                                   //06-10-01|0x00ed
//*******************************************************************************         //10-29-97|0x00ed
//***************************************************************************             //06-10-01|0x00f0
//***************************************************************************             //06-10-01|0x00f1
  SCHAR work[128];                                                                   //06-10-01|0x00f2
//***************************************************************************             //06-10-01|0x00f3
//***************************************************************************             //06-10-01|0x00f4
    if(DebugNameLength > 64)                                                              //06-10-01|0x00f5
      { sprintf(work, "\nDEBUG: %.64s\n", DebugNameLineAddr); }                           //06-10-01|0x00f6
      else { sprintf(work, "\nDEBUG: %s\n", DebugNameLineAddr); }                         //06-10-01|0x00f7
    switch(GuiWriteLine(work))                                   _SwitchGroup             //06-10-01|0x00f8
    return_test(debug_message_1);                                                         //06-10-01|0x00f9
}                                                                                         //06-10-01|0x00fa
//                                                                                        //05-24-97|0x00fa
//***************************************************************************             //06-10-01|0x00fd
//***************************************************************************             //06-10-01|0x00fe
//******                                                               ******             //06-10-01|0x00ff
//******                         debug_trace                           ******             //06-10-01|0x0100
//******                                                               ******             //06-10-01|0x0101
//***************************************************************************             //06-10-01|0x0102
//***************************************************************************             //06-10-01|0x0103
//*******************************************************************************         //10-29-97|0x0108
//*******************************************************************************         //10-29-97|0x0108
// debug_trace                                                                            //06-10-01|0x0108
//*******************************************************************************         //10-29-97|0x0108
//*******************************************************************************         //10-29-97|0x0108
UINT PRECDBUG::debug_trace(                                                               //06-10-01|0x0108
    PROCESS_DATA_FAR ProcessDataFar                                                       //06-10-01|0x0108
    ) {                                                                                   //06-10-01|0x0108
//*******************************************************************************         //10-29-97|0x0108
//***************************************************************************             //06-10-01|0x010c
//***************************************************************************             //06-10-01|0x010d
  SINT i;                                                                            //06-10-01|0x010e
  SINT line_no;                                                                      //06-10-01|0x010f
  STRING_DATA trace;                                                                 //06-10-01|0x0110
  SCHAR line[128];                                                                   //06-10-01|0x0111
//***************************************************************************             //06-10-01|0x0112
//***************************************************************************             //06-10-01|0x0113
    line_no = TokensMacroLineNo(0);                                                       //06-10-01|0x0114
    i       = 0;                                                                          //06-10-01|0x0115
//***************************************************************************             //06-10-01|0x0116
loop:                                                                                     //06-10-01|0x0117
    switch(CallPreLeveltest(i))                                                           //06-10-01|0x0118
      {                                                                                   //06-10-01|0x0119
//---------------------------------------------------------------------------             //06-10-01|0x011a
        case Yes:                                                                         //06-10-01|0x011b
          return_test(debug_trace_1);                                                     //06-10-01|0x011c
//---------------------------------------------------------------------------             //06-10-01|0x011d
        case No:                                                                          //06-10-01|0x011e
          break;                                                                          //06-10-01|0x011f
//---------------------------------------------------------------------------             //06-10-01|0x0120
        default:                                            ReturnSystemError             //06-10-01|0x0121
        }                                                                                 //06-10-01|0x0122
//***************************************************************************             //06-10-01|0x0123
//***************************************************************************             //06-10-01|0x0124
    switch(CallCopyMacroName(&trace, i))                         _SwitchGroup             //06-10-01|0x0125
//***************************************************************************             //06-10-01|0x0126
    if(TraceLength > 32)                                                                  //06-10-01|0x0127
      {                                                                                   //06-10-01|0x0128
        sprintf(line, "Line Number: %5d, Macro: %.32s",                                   //06-10-01|0x0129
                      line_no, TraceLineAddr);                                            //06-10-01|0x012a
        }                                                                                 //06-10-01|0x012b
//---------------------------------------------------------------------------             //06-10-01|0x012c
      else {                                                                              //06-10-01|0x012d
        sprintf(line, "Line Number: %5d, Macro: %s",                                      //06-10-01|0x012e
                      line_no, TraceLineAddr);                                            //06-10-01|0x012f
        }                                                                                 //06-10-01|0x0130
//***************************************************************************             //06-10-01|0x0131
    switch(GuiAppendLine(line))                                  _SwitchGroup             //06-10-01|0x0132
    line_no = TraceMacroLineNo;                                                           //06-10-01|0x0133
    i += 1;                                                                               //06-10-01|0x0134
    goto loop;                                                                            //06-10-01|0x0135
}                                                                                         //06-10-01|0x0136
//                                                                                        //05-24-97|0x0136
//***************************************************************************             //06-10-01|0x0139
//***************************************************************************             //06-10-01|0x013a
//******                                                               ******             //06-10-01|0x013b
//******                         command_arg                           ******             //06-10-01|0x013c
//******                                                               ******             //06-10-01|0x013d
//***************************************************************************             //06-10-01|0x013e
//***************************************************************************             //06-10-01|0x013f
//*******************************************************************************         //10-29-97|0x0144
//*******************************************************************************         //10-29-97|0x0144
// command_arg                                                                            //06-10-01|0x0144
//*******************************************************************************         //10-29-97|0x0144
//*******************************************************************************         //10-29-97|0x0144
UINT PRECDBUG::command_arg(                                                               //06-10-01|0x0144
    PROCESS_DATA_FAR ProcessDataFar                                                       //06-10-01|0x0144
    ) {                                                                                   //06-10-01|0x0144
//*******************************************************************************         //10-29-97|0x0144
//***************************************************************************             //06-10-01|0x0147
//***************************************************************************             //06-10-01|0x0148
  SINT i;                                                                            //06-10-01|0x0149
  SCHAR work[128];                                                                   //06-10-01|0x014a
//***************************************************************************             //06-10-01|0x014b
//***************************************************************************             //06-10-01|0x014c
    if(TokensNoTokens < 1)                                  ReturnSystemError             //06-10-01|0x014d
//***************************************************************************             //06-10-01|0x014e
    if(TokensLength(0) > 64)                                                              //06-10-01|0x014f
      { sprintf(work, "COMMAND   : %.64s", TokensLineAddr(0)); }                          //06-10-01|0x0150
      else { sprintf(work, "COMMAND   : %s", TokensLineAddr(0)); }                        //06-10-01|0x0151
    switch(GuiWriteLine(work))                                   _SwitchGroup             //06-10-01|0x0152
//***************************************************************************             //06-10-01|0x0153
    for(i=1;  i<TokensNoTokens; ++i)                                                      //06-10-01|0x0154
      {                                                                                   //06-10-01|0x0155
        if(TokensLength(i) > 64)                                                          //06-10-01|0x0156
          { sprintf(work, "ARGUMENT %d: '%.64s", i, TokensLineAddr(i)); }                 //06-10-01|0x0157
          else { sprintf(work,"ARGUMENT %d: '%s'", i, TokensLineAddr(i)); }               //06-10-01|0x0158
        switch(GuiAppendLine(work))                              _SwitchGroup             //06-10-01|0x0159
        }                                                                                 //06-10-01|0x015a
    return_test(command_arg_1);                                                           //06-10-01|0x015b
}                                                                                         //06-10-01|0x015c
//                                                                                        //05-24-97|0x015c
//***************************************************************************             //06-10-02|0x015f
//***************************************************************************             //06-10-02|0x0160
//******                                                               ******             //06-10-02|0x0161
//******                         results                               ******             //06-10-02|0x0162
//******                                                               ******             //06-10-02|0x0163
//***************************************************************************             //06-10-02|0x0164
//***************************************************************************             //06-10-02|0x0165
//*******************************************************************************         //10-29-97|0x016a
//*******************************************************************************         //10-29-97|0x016a
// display_results                                                                        //06-10-02|0x016a
//*******************************************************************************         //10-29-97|0x016a
//*******************************************************************************         //10-29-97|0x016a
UINT PRECDBUG::display_results(                                                           //06-10-02|0x016a
    PROCESS_DATA_FAR ProcessDataFar                                                       //06-10-02|0x016a
    ) {                                                                                   //06-10-02|0x016a
//*******************************************************************************         //10-29-97|0x016a
//***************************************************************************             //06-10-02|0x016d
//***************************************************************************             //06-10-02|0x016e
  SCHAR work[128];                                                                   //06-10-02|0x016f
//***************************************************************************             //06-10-02|0x0170
//***************************************************************************             //06-10-02|0x0171
    if(ResultsLength > 64)                                                                //06-10-02|0x0172
      { sprintf(work, "RESULTS   : '%.64s\n", ResultsLineAddr); }                         //06-10-02|0x0173
      else { sprintf(work, "RESULTS   : '%s'", ResultsLineAddr); }                        //06-10-02|0x0174
    switch(GuiWriteLine(work))                                   _SwitchGroup             //06-10-02|0x0175
    return_test(display_results_1);                                                       //06-10-02|0x0176
}                                                                                         //06-10-02|0x0177
//                                                                                        //05-24-97|0x0177
//***************************************************************************             //06-10-02|0x017a
//***************************************************************************             //06-10-02|0x017b
//******                                                               ******             //06-10-02|0x017c
//******                         display_flag                          ******             //06-10-02|0x017d
//******                                                               ******             //06-10-02|0x017e
//***************************************************************************             //06-10-02|0x017f
//***************************************************************************             //06-10-02|0x0180
//*******************************************************************************         //10-29-97|0x0185
//*******************************************************************************         //10-29-97|0x0185
// display_flag                                                                           //06-10-02|0x0185
//*******************************************************************************         //10-29-97|0x0185
//*******************************************************************************         //10-29-97|0x0185
UINT PRECDBUG::display_flag(                                                              //06-10-02|0x0185
    PROCESS_DATA_FAR ProcessDataFar                                                       //06-10-02|0x0185
    ) {                                                                                   //06-10-02|0x0185
//*******************************************************************************         //10-29-97|0x0185
//***************************************************************************             //06-10-02|0x0188
//***************************************************************************             //06-10-02|0x0189
  SCHAR work[128];                                                                   //06-10-02|0x018a
//***************************************************************************             //06-10-02|0x018b
//***************************************************************************             //06-10-02|0x018c
    switch(ProcessFlagState)                                                              //06-10-02|0x018d
      {                                                                                   //06-10-02|0x018e
        case -2: sprintf(work, "TEST STATE: FALSE"); break;                               //06-10-02|0x018f
        case -1: sprintf(work, "TEST STATE: FALSE"); break;                               //06-10-02|0x0190
        case  1: sprintf(work, "TEST STATE: TRUE");  break;                               //06-10-02|0x0191
        case  2: sprintf(work, "TEST STATE: TRUE");  break;                               //06-10-02|0x0192
        default:                                            ReturnSystemError             //06-10-02|0x0193
        }                                                                                 //06-10-02|0x0194
    switch(GuiWriteLine(work))                                   _SwitchGroup             //06-10-02|0x0195
    return_test(display_results_1);                                                       //06-10-02|0x0196
}                                                                                         //06-10-02|0x0197
//                                                                                        //05-24-97|0x0197
//***************************************************************************             //06-11-06|0x019a
//***************************************************************************             //06-11-06|0x019b
//******                                                               ******             //06-11-06|0x019c
//******                       debug_pause                             ******             //06-11-06|0x019d
//******                                                               ******             //06-11-06|0x019e
//***************************************************************************             //06-11-06|0x019f
//***************************************************************************             //06-11-06|0x01a0
//***************************************************************************             //06-11-06|0x01a2
//***************************************************************************             //06-11-06|0x01a3
//*******************************************************************************         //10-29-97|0x01a7
//*******************************************************************************         //10-29-97|0x01a7
// debug_pause                                                                            //06-11-06|0x01a7
//*******************************************************************************         //10-29-97|0x01a7
//*******************************************************************************         //10-29-97|0x01a7
UINT PRECDBUG::debug_pause(                                                               //06-11-06|0x01a7
    PROCESS_DATA_FAR ProcessDataFar                                                       //06-11-06|0x01a7
    ) {                                                                                   //06-11-06|0x01a7
//*******************************************************************************         //10-29-97|0x01a7
//***************************************************************************             //06-11-06|0x01aa
//***************************************************************************             //06-11-06|0x01ab
    TestSample(debug_pause_1);                                                            //06-11-06|0x01ac
    switch(PrecMenuCmd())                                                                 //06-11-06|0x01ad
      {                                                                                   //06-11-06|0x01ae
        case Yes:      ProcessDebugCommand = DBG_ON;         return(Success);             //06-11-06|0x01af
        case No:       ProcessDebugCommand = DBG_OFF;        return(Success);             //06-11-06|0x01b0
        case UserError:                                    return(UserError);             //06-11-06|0x01b1
        case Continue:                                      return(Continue);             //06-11-06|0x01b2
        case Display:                                        return(Display);             //06-11-06|0x01b3
        case KeyBoard:                                      return(KeyBoard);             //06-11-06|0x01b4
        default:                                            ReturnSystemError             //06-11-06|0x01b5
        }                                                                                 //06-11-06|0x01b6
}                                                                                         //06-11-06|0x01b7
//                                                                                        //05-24-97|0x01b7
//***************************************************************************             //06-11-06|0x01ba
//***************************************************************************             //06-11-06|0x01bb
//******                                                               ******             //06-11-06|0x01bc
//******                       menu_pause                              ******             //06-11-06|0x01bd
//******                                                               ******             //06-11-06|0x01be
//***************************************************************************             //06-11-06|0x01bf
//***************************************************************************             //06-11-06|0x01c0
//***************************************************************************             //06-11-06|0x01c2
//***************************************************************************             //06-11-06|0x01c3
//*******************************************************************************         //10-29-97|0x01c6
//*******************************************************************************         //10-29-97|0x01c6
// menu_pause                                                                             //06-11-06|0x01c6
//*******************************************************************************         //10-29-97|0x01c6
//*******************************************************************************         //10-29-97|0x01c6
UINT PRECDBUG::menu_pause(void) {                                                         //06-11-06|0x01c6
//*******************************************************************************         //10-29-97|0x01c6
//***************************************************************************             //06-11-06|0x01c9
//***************************************************************************             //06-11-06|0x01ca
  SCHAR character[256];                                                              //06-11-06|0x01cb
  SWORD length;                                                                      //12-05-03|0x01cc
//***************************************************************************             //06-11-06|0x01cd
//***************************************************************************             //06-11-06|0x01ce
    TestSample(debug_pause_1);                                                            //06-11-06|0x01cf
//***************************************************************************             //06-11-06|0x01d0
    character[0]  = 0x00;                                                                 //06-11-06|0x01d1
//---------------------------------------------------------------------------             //06-11-06|0x01d2
loop:                                                                                     //06-11-06|0x01d3
    switch(GuiReadLine(character, 256))                                                   //06-11-06|0x01d4
      {                                                                                   //06-11-06|0x01d5
        case Yes:   break;                                                                //06-11-06|0x01d6
        case No:    goto loop;                                                            //06-11-06|0x01d7
        default:                                          ReturnSystemError               //06-11-06|0x01d8
        }                                                                                 //06-11-06|0x01d9
//***************************************************************************             //06-11-06|0x01da
    if(character[255] != 0x00)                            ReturnSystemError               //12-05-03|0x01db
    length = StrLen(&character[0]);                                                       //check   |0x01dc
    switch(length)                                                                        //12-05-03|0x01dd
      {                                                                                   //12-05-03|0x01de
        case 0:                                           ReturnSystemError               //12-05-03|0x01df
//---------------------------------------------------------------------------             //12-05-04|0x01e0
        case 1:                                                                           //12-05-04|0x01e1
          if(character[0] != 0x0a)                        ReturnSystemError               //12-05-04|0x01e2
          return(Continue);                                                               //12-05-04|0x01e3
//---------------------------------------------------------------------------             //12-05-04|0x01e4
        case 2:                                                                           //12-05-04|0x01e5
          if(character[1] != 0x0a)                        ReturnSystemError               //12-05-04|0x01e6
          break;                                                                          //12-05-04|0x01e7
//---------------------------------------------------------------------------             //12-05-04|0x01e8
        case 3:                                                                           //12-05-04|0x01e9
          if(character[2] != 0x0a)                        ReturnSystemError               //12-05-04|0x01ea
          if(character[1] != 0x0d)                          return(Continue);             //12-05-04|0x01eb
          break;                                                                          //check   |0x01ec
//---------------------------------------------------------------------------             //12-05-04|0x01ed
        default:                                          return(Continue);               //12-05-04|0x01ee
        }                                                                                 //12-05-04|0x01ef
//***************************************************************************             //12-05-04|0x01f0
    switch(character[0])                                                                  //06-11-06|0x01f1
      {                                                                                   //06-11-06|0x01f2
        case 'R':                                       return(No);                       //06-11-06|0x01f3
        case 'X':                         ReturnFinish("User Termination");               //06-11-06|0x01f4
        case 'N':                                       return(Yes);                      //06-11-06|0x01f5
        default:                                          return(Continue);               //06-11-06|0x01f6
        }                                                                                 //06-11-06|0x01f7
}                                                                                         //06-11-06|0x01f8
//                                                                                        //05-24-97|0x01f8
//***************************************************************************             //<----   |0x01fb
//***************************************************************************             //<----   |0x01fc
//******                                                               ******             //<----   |0x01fd
//******                       breakpoint                              ******             //<----   |0x01fe
//******                                                               ******             //<----   |0x01ff
//***************************************************************************             //<----   |0x0200
//***************************************************************************             //<----   |0x0201
//*******************************************************************************         //10-29-97|0x0205
//*******************************************************************************         //10-29-97|0x0205
// breakpoint                                                                             //<----   |0x0205
//*******************************************************************************         //10-29-97|0x0205
//*******************************************************************************         //10-29-97|0x0205
UINT PRECDBUG::breakpoint(                                                                //<----   |0x0205
    SCHAR_FAR FileNameFar,                                                                //<----   |0x0205
    SWORD LineNo                                                                          //<----   |0x0205
    ) {                                                                                   //<----   |0x0205
//*******************************************************************************         //10-29-97|0x0205
  SCHAR work[128];                                                                   //<----   |0x0209
//***************************************************************************             //<----   |0x020a
    printf("BREAKPOINT:\n");                                                              //<----   |0x020b
    printf("     FILE:    %s\n",  FileNameFar);                                           //<----   |0x020c
    printf("     LINE NO: %d\n",  LineNo);                                                //<----   |0x020d
//***************************************************************************             //<----   |0x020e
loop:                                                                                     //<----   |0x020f
    printf("DEPRESS Y: Continue, X: Terminate\n");                                        //<----   |0x0210
    if(fgets(&work[0], 80, stdin) == 0)                ReturnSystemError;                 //<----   |0x0211
    if(work[1] == 0x0a)                                                                   //<----   |0x0212
      {                                                                                   //<----   |0x0213
        if(work[0] == 'X')                           ReturnSystemError;                   //<----   |0x0214
        if(work[0] == 'Y')                           return(Success);                     //<----   |0x0215
        }                                                                                 //<----   |0x0216
    goto loop;                                                                            //<----   |0x0217
}                                                                                         //<----   |0x0218
//                                                                                        //05-24-97|0x0218
//***************************************************************************             //06-07-14|0x021b
//***************************************************************************             //06-07-14|0x021c
//******                                                               ******             //06-07-14|0x021d
//******                       TEST WRAPPERS                           ******             //06-07-14|0x021e
//******                                                               ******             //06-07-14|0x021f
//***************************************************************************             //06-07-14|0x0220
//***************************************************************************             //06-07-14|0x0221
//*******************************************************************************         //10-29-97|0x0222
//*******************************************************************************         //10-29-97|0x0222
// precdbug_test_reset                                                                    //06-07-14|0x0222
//*******************************************************************************         //10-29-97|0x0222
//*******************************************************************************         //10-29-97|0x0222
UINT PRECDBUG::precdbug_test_reset(void) {                                                //06-07-14|0x0222
//*******************************************************************************         //10-29-97|0x0222
//************************************************************************                //06-07-14|0x0222
    switch(BasicTestReset())                                                              //06-07-14|0x0222
      {                                                                                   //06-07-14|0x0222
        case Success:                                     return(Success);                //06-07-14|0x0222
        default:                                        ReturnSystemError;                //06-07-14|0x0222
        }                                                                                 //06-07-14|0x0222
}                                                                                         //06-07-14|0x0222
//                                                                                        //05-24-97|0x0222
//***************************************************************************             //06-07-14|0x0223
//*******************************************************************************         //10-29-97|0x0224
//*******************************************************************************         //10-29-97|0x0224
// precdbug_test_read                                                                     //06-07-14|0x0224
//*******************************************************************************         //10-29-97|0x0224
//*******************************************************************************         //10-29-97|0x0224
UINT PRECDBUG::precdbug_test_read(void) {                                                 //06-07-14|0x0224
//*******************************************************************************         //10-29-97|0x0224
//************************************************************************                //06-07-14|0x0224
    switch(BasicTestRead(&test_samples[0], test_samples[0]))                              //06-07-14|0x0224
      {                                                                                   //06-07-14|0x0224
        case Success:                                     return(Success);                //06-07-14|0x0224
        default:                                        ReturnSystemError;                //06-07-14|0x0224
        }                                                                                 //06-07-14|0x0224
}                                                                                         //06-07-14|0x0224
//                                                                                        //05-24-97|0x0224
//***************************************************************************             //06-07-14|0x0225
//*******************************************************************************         //10-29-97|0x0226
//*******************************************************************************         //10-29-97|0x0226
// precdbug_test_write                                                                    //06-07-14|0x0226
//*******************************************************************************         //10-29-97|0x0226
//*******************************************************************************         //10-29-97|0x0226
UINT PRECDBUG::precdbug_test_write(void) {                                                //06-07-14|0x0226
//*******************************************************************************         //10-29-97|0x0226
//************************************************************************                //06-07-14|0x0226
    switch(BasicTestWrite(&test_samples[0]))                                              //06-07-14|0x0226
      {                                                                                   //06-07-14|0x0226
        case Success:                                     return(Success);                //06-07-14|0x0226
        default:                                        ReturnSystemError;                //06-07-14|0x0226
        }                                                                                 //06-07-14|0x0226
}                                                                                         //06-07-14|0x0226
//                                                                                        //05-24-97|0x0226
//***************************************************************************             //06-07-14|0x0227
//*******************************************************************************         //10-29-97|0x0228
//*******************************************************************************         //10-29-97|0x0228
// precdbug_test_report                                                                   //06-07-14|0x0228
//*******************************************************************************         //10-29-97|0x0228
//*******************************************************************************         //10-29-97|0x0228
UINT PRECDBUG::precdbug_test_report(void) {                                               //06-07-14|0x0228
//*******************************************************************************         //10-29-97|0x0228
//************************************************************************                //06-07-14|0x0228
    switch(BasicTestReport(&test_samples[0], "PRECDBUG"))                                 //06-07-14|0x0228
      {                                                                                   //06-07-14|0x0228
        case Success:                                     return(Success);                //06-07-14|0x0228
        default:                                        ReturnSystemError;                //06-07-14|0x0228
        }                                                                                 //06-07-14|0x0228
}                                                                                         //06-07-14|0x0228
//                                                                                        //05-24-97|0x0228
//***************************************************************************             //06-07-14|0x0229
//***************************************************************************             //06-07-14|0x022a
//******                                                               ******             //06-07-14|0x022b
//******                        constructor                            ******             //06-07-14|0x022c
//******                                                               ******             //06-07-14|0x022d
//***************************************************************************             //06-07-14|0x022e
//***************************************************************************             //06-07-14|0x022f
//*******************************************************************************         //10-29-97|0x0230
//*******************************************************************************         //10-29-97|0x0230
// CONSTRUCTOR                                                                            //06-07-14|0x0230
//*******************************************************************************         //10-29-97|0x0230
//*******************************************************************************         //10-29-97|0x0230
PRECDBUG::PRECDBUG() {                                                                    //06-07-14|0x0230
//***************************************************************************             //06-07-14|0x0231
//***************************************************************************             //06-07-14|0x0232
    { ULONG i;                                                                            //06-07-14|0x0233
      test_samples[NoTestSamples] = TestIndex;                                            //06-07-14|0x0233
      i = 1;                                                                              //06-07-14|0x0233
      while(i<TestIndex)                                                                  //06-07-14|0x0233
        {                                                                                 //06-07-14|0x0233
          test_samples[i] = 0;                                                            //06-07-14|0x0233
          ++i;                                                                            //06-07-14|0x0233
          }                                                                               //06-07-14|0x0233
      }                                                                                   //06-07-14|0x0233
//***************************************************************************             //06-10-02|0x0234
  DebugState = 4462; // COMMAND                                                           //06-10-02|0x0235
  MenuState = 4462; // MENU                                                               //06-11-06|0x0236
}                                                                                         //06-07-14|0x0237
//                                                                                        //05-24-97|0x0237
//*******************************************************************************         //05-24-97|0x023c
//*******************************************************************************         //05-24-97|0x023c
//****                       END OF FILE                                     ****         //05-24-97|0x023c
//*******************************************************************************         //05-24-97|0x023c
//*******************************************************************************         //05-24-97|0x023c
