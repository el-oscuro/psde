//*****************************************************************************           //10-03-22|0x000b
//*****************************************************************************           //10-03-22|0x000b
//                                                                                        //10-03-22|0x000b
// CRYPTOGRAPHIC RESOURCES                                                                //10-03-22|0x000b
//                                                                                        //10-03-22|0x000b
//*****************************************************************************           //10-03-22|0x000b
//*****************************************************************************           //10-03-22|0x000b
//  Copyright: 2006 Robert H. Adams                                                       //10-03-22|0x000b
//*****************************************************************************           //10-03-22|0x000b
//  The purpose of this program as well as instructions regarding its use is              //10-03-22|0x000b
//  defined in the associated manual.                                                     //10-03-22|0x000b
//*****************************************************************************           //10-03-22|0x000b
//  This program is free software; you can redistribute it and/or modify                  //10-03-22|0x000b
//  it under the terms of the GNU General Public License as published by                  //10-03-22|0x000b
//  the Free Software Foundation; either version 2 of the License, or                     //10-03-22|0x000b
//  (at your option) any later version.                                                   //10-03-22|0x000b
//                                                                                        //10-03-22|0x000b
//  This program is distributed in the hope that it will be useful,                       //10-03-22|0x000b
//  but WITHOUT ANY WARRANTY; without even the implied warranty of                        //10-03-22|0x000b
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                         //10-03-22|0x000b
//  GNU General Public License for more details.                                          //10-03-22|0x000b
//                                                                                        //10-03-22|0x000b
//  You should have received a copy of the GNU General Public License                     //10-03-22|0x000b
//  along with this program; if not, write to the Free Software                           //10-03-22|0x000b
//  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA., 02110-1301            //10-03-22|0x000b
//  USA                                                                                   //10-03-22|0x000b
//*****************************************************************************           //10-03-22|0x000b
//  For further information, please contact Robert Adams:                                 //10-03-22|0x000b
//     EMail:    robert.adams@whatifwe.com                                                //10-03-22|0x000b
//     Mail:     PO Box 156, Sun Valley, Ca. 91353-0155, USA                              //10-03-22|0x000b
//  Or visit the website, "www.whatifwe.com".                                             //10-03-22|0x000b
//*****************************************************************************           //10-03-22|0x000b
//*****************************************************************************           //10-03-22|0x000b
#ifdef WIN31_SYSTEM                                                                       //05-24-97|0x000c
#include "precwn31.h"                                                                     //05-24-97|0x000c
#endif                                                                                    //05-24-97|0x000c
#ifdef WIN95_SYSTEM                                                                       //05-24-97|0x000c
#include "precwn95.h"                                                                     //05-24-97|0x000c
#endif                                                                                    //05-24-97|0x000c
#ifdef MSDOS_SYSTEM                                                                       //05-24-97|0x000c
#include "precdos.h"                                                                      //05-24-97|0x000c
#endif                                                                                    //05-24-97|0x000c
#include "prechost.h"                                                                     //05-24-97|0x000c
#include "crypto.h"                                                                       //10-03-22|0x000c
#include "crypto.hxx"                                                                     //10-03-22|0x000c
#include "crypto.hpp"                                                                     //10-03-22|0x000c
#include "precutil.h"                                                                     //10-03-22|0x000d
#include "precdiag.h"                                                                     //10-03-22|0x000e
#include "precfile.h"                                                                     //10-03-22|0x000f
#include "global.hxx"                                                                     //10-03-22|0x0010
#define StrLen(i) strlen(i)                                                               //10-03-22|0x0018
#define StrCat(i,j) strcat(i,j)                                                           //10-03-22|0x0018
#define StrCpy(i,j) strcpy(i,j)                                                           //10-03-22|0x0018
#define StrCmp(i,j) Str_Comp((SCHAR_FAR)i,j,256)                                          //10-03-22|0x0018
#define StrRChr(i,j) strrchr(i,j)                                                         //10-03-22|0x0018
#define StrChr(i,j) strchr(i,j)                                                           //10-03-22|0x0018
#define StrToByteInt(i,j) GetInteger(i,&j,0xff)                                           //10-03-22|0x0018
#define StrToInt(i,j) GetInteger(i,&j,0xffff)                                             //10-03-22|0x0018
#define StrToLongInt(i,j) GetInteger(i,&j,0xffffffffL)                                    //10-03-22|0x0018
#define StrToByteHex(i,j) GetHex(i,&j,1)                                                  //10-03-22|0x0018
#define StrToHex(i,j) GetHex(i,&j,2)                                                      //10-03-22|0x0018
#define StrToLongHex(i,j) GetHex(i,&j,4)                                                  //10-03-22|0x0018
#define FindName(i) strrchr(i, '/')                                                       //10-03-22|0x0018
#define Allocate(k) (k##_FAR) calloc(1,sizeof(k))                                         //10-03-22|0x0019
#define Free(k) free(k)                                                                   //10-03-22|0x0019
#define MemSet(i,j,k) memset(i,j,k)                                                       //10-03-22|0x0019
#define MemCCpy(i,j,k,l) Mem_C_Copy((UCHAR_FAR) i, (UCHAR_FAR) j,k,l)                     //10-03-22|0x0019
#define MemCpy(i,j,k) memcpy(i,j,k)                                                       //10-03-22|0x0019
#define LineEnd 0x0d                                                                      //10-03-22|0x0019
CRYPTO crypto_resource;                                                                   //10-03-22|0x003d
static UINT test_samples[TestIndex];                                                      //10-03-22|0x004d
//***************************************************************************             //10-03-22|0x0069
//***************************************************************************             //10-03-22|0x006a
//******                                                               ******             //10-03-22|0x006b
//******                       crypto_allocate                         ******             //10-03-22|0x006c
//******                                                               ******             //10-03-22|0x006d
//***************************************************************************             //10-03-22|0x006e
//***************************************************************************             //10-03-22|0x006f
//*******************************************************************************         //10-29-97|0x0076
//*******************************************************************************         //10-29-97|0x0076
// crypto_allocate                                                                        //10-03-22|0x0076
//*******************************************************************************         //10-29-97|0x0076
//*******************************************************************************         //10-29-97|0x0076
UINT CRYPTO::crypto_allocate(void) {                                                      //10-03-22|0x0076
//*******************************************************************************         //10-29-97|0x0076
//***************************************************************************             //10-03-22|0x007a
//***************************************************************************             //10-03-22|0x007b
    TestSample(crypto_allocate_1);                                                        //10-03-22|0x007c
    if(crypto_addr                             != 0)        ReturnSystemError             //10-03-22|0x007d
    if((crypto_addr = Allocate(CRYPTO_CONTROL)) == 0)       ReturnSystemError             //10-03-22|0x007e
//***************************************************************************             //10-03-22|0x007f
    return(Success);                                                                      //10-03-22|0x0080
}                                                                                         //10-03-22|0x0081
//                                                                                        //05-24-97|0x0081
//***************************************************************************             //10-03-22|0x0084
//***************************************************************************             //10-03-22|0x0085
//******                                                               ******             //10-03-22|0x0086
//******                         crypto_free                           ******             //10-03-22|0x0087
//******                                                               ******             //10-03-22|0x0088
//***************************************************************************             //10-03-22|0x0089
//***************************************************************************             //10-03-22|0x008a
//*******************************************************************************         //10-29-97|0x008e
//*******************************************************************************         //10-29-97|0x008e
// crypto_free                                                                            //10-03-22|0x008e
//*******************************************************************************         //10-29-97|0x008e
//*******************************************************************************         //10-29-97|0x008e
UINT CRYPTO::crypto_free(void) {                                                          //10-03-22|0x008e
//*******************************************************************************         //10-29-97|0x008e
//***************************************************************************             //10-03-22|0x0092
//***************************************************************************             //10-03-22|0x0093
    TestSample(crypto_free_1);                                                            //10-03-22|0x0094
    if(crypto_addr                 == 0)                    ReturnSystemError             //10-03-22|0x0095
    Free(crypto_addr);                                                                    //10-03-22|0x0096
    crypto_addr = 0;                                                                      //10-03-22|0x0097
//***************************************************************************             //10-03-22|0x0098
    return(Success);                                                                      //10-03-22|0x0099
}                                                                                         //10-03-22|0x009a
//                                                                                        //05-24-97|0x009a
//***************************************************************************             //10-03-22|0x009d
//***************************************************************************             //10-03-22|0x009e
//******                                                               ******             //10-03-22|0x009f
//******               crypto_initial(Name, Extent)                    ******             //10-03-22|0x00a0
//******                                                               ******             //10-03-22|0x00a1
//***************************************************************************             //10-03-22|0x00a2
//***************************************************************************             //10-03-22|0x00a3
//*******************************************************************************         //10-29-97|0x00a8
//*******************************************************************************         //10-29-97|0x00a8
// crypto_initial                                                                         //10-03-22|0x00a8
//*******************************************************************************         //10-29-97|0x00a8
//*******************************************************************************         //10-29-97|0x00a8
UINT CRYPTO::crypto_initial(                                                              //10-03-22|0x00a8
    SCHAR_FAR Name,                                                                       //10-03-22|0x00a8
    SCHAR_FAR Extent                                                                      //10-03-22|0x00a8
    ) {                                                                                   //10-03-22|0x00a8
//*******************************************************************************         //10-29-97|0x00a8
//***************************************************************************             //10-03-22|0x00ac
//***************************************************************************             //10-03-22|0x00ad
    if(crypto_addr == 0)                                    ReturnSystemError             //10-03-22|0x00ae
//***************************************************************************             //10-03-22|0x00af
    CryptoSize          =  sizeof(CRYPTO_DATA);                                           //10-03-22|0x00b0
    CryptoIndex         =  -1;                                                            //10-03-22|0x00b1
    CryptoNoGenerators  =  0;                                                             //10-03-22|0x00b2
    CryptoClassState    =  CRYPTO_CLASS_READY;                                            //10-03-22|0x00b3
//***************************************************************************             //10-03-22|0x00b4
    switch(FileInitialBinary(CryptoFileAddr))                    _SwitchGroup             //10-03-22|0x00b5
    switch(FileEnterName(Name,  Extent))                         _SwitchGroup             //10-03-22|0x00b6
    switch(FileCreateRecord())                                                            //11-08-17|0x00b7
      {                                                                                   //11-08-17|0x00b8
//---------------------------------------------------------------------------             //11-08-17|0x00b9
        case Success:                                                                     //11-08-17|0x00ba
            switch(FileRelease())                                _SwitchGroup             //11-08-17|0x00bb
            return_test(crypto_initial_1);                                                //11-08-17|0x00bc
//---------------------------------------------------------------------------             //11-08-17|0x00bd
        case UserError:                                                                   //11-08-17|0x00be
            switch(FileRelease())                                _SwitchGroup             //11-08-17|0x00bf
            return(UserError);                                                            //11-08-17|0x00c0
//---------------------------------------------------------------------------             //11-08-17|0x00c1
        default:                                            ReturnSystemError             //11-08-17|0x00c2
        }                                                                                 //11-08-17|0x00c3
//***************************************************************************             //10-03-22|0x00c4
}                                                                                         //10-03-22|0x00c5
//                                                                                        //05-24-97|0x00c5
//***************************************************************************             //15-06-16|0x00c8
//***************************************************************************             //15-06-16|0x00c9
//******                                                               ******             //15-06-16|0x00ca
//******               basic_random_create(ArgFar)                     ******             //15-06-16|0x00cb
//******                                                               ******             //15-06-16|0x00cc
//***************************************************************************             //15-06-16|0x00cd
//***************************************************************************             //15-06-16|0x00ce
//*******************************************************************************         //10-29-97|0x00d2
//*******************************************************************************         //10-29-97|0x00d2
// basic_random_create                                                                    //15-06-16|0x00d2
//*******************************************************************************         //10-29-97|0x00d2
//*******************************************************************************         //10-29-97|0x00d2
void CRYPTO::basic_random_create(                                                         //15-06-16|0x00d2
    CRYPTO_DATA_FAR ArgFar                                                                //15-06-16|0x00d2
    ) {                                                                                   //15-06-16|0x00d2
//*******************************************************************************         //10-29-97|0x00d2
    initial_random(ArgFar);                                                               //15-06-16|0x00d6
    TestSample(basic_random_create_1);                                                    //15-06-16|0x00d7
    return;                                                                               //15-06-16|0x00d8
}                                                                                         //15-06-16|0x00d9
//                                                                                        //05-24-97|0x00d9
//***************************************************************************             //10-03-22|0x00dc
//***************************************************************************             //10-03-22|0x00dd
//******                                                               ******             //10-03-22|0x00de
//******               crypto_create(IndexAddr)                        ******             //10-03-22|0x00df
//******                                                               ******             //10-03-22|0x00e0
//***************************************************************************             //10-03-22|0x00e1
//***************************************************************************             //10-03-22|0x00e2
//*******************************************************************************         //10-29-97|0x00e6
//*******************************************************************************         //10-29-97|0x00e6
// crypto_create                                                                          //10-03-22|0x00e6
//*******************************************************************************         //10-29-97|0x00e6
//*******************************************************************************         //10-29-97|0x00e6
UINT CRYPTO::crypto_create(                                                               //10-03-22|0x00e6
    UINT_FAR IndexAddr                                                                    //10-03-22|0x00e6
    ) {                                                                                   //10-03-22|0x00e6
//*******************************************************************************         //10-29-97|0x00e6
//***************************************************************************             //10-03-22|0x00ea
//***************************************************************************             //10-03-22|0x00eb
    if(crypto_addr == 0)                                    ReturnSystemError             //10-03-22|0x00ec
//***************************************************************************             //10-03-22|0x00ed
//******                                                               ******             //10-03-22|0x00ee
//****** Process Class State                                           ******             //10-03-22|0x00ef
//******                                                               ******             //10-03-22|0x00f0
//***************************************************************************             //10-03-22|0x00f1
    switch(CryptoClassState)                                                              //10-03-22|0x00f2
      {                                                                                   //10-03-22|0x00f3
        case CRYPTO_CLASS_READY:                                       break;             //10-03-22|0x00f4
        default:                       ReturnFinish("Illegal Random Create");             //10-03-22|0x00f5
        }                                                                                 //10-03-22|0x00f6
//--------------------------------------------------------------------------*             //10-03-22|0x00f7
    CryptoClassState  = CRYPTO_CLASS_OPENED;                                              //10-03-22|0x00f8
//***************************************************************************             //10-03-22|0x00f9
//******                                                               ******             //10-03-22|0x00fa
//****** Write the current generator                                   ******             //10-03-22|0x00fb
//******                                                               ******             //10-03-22|0x00fc
//***************************************************************************             //10-03-22|0x00fd
    switch(crypto_write(CryptoNoGenerators))                     _SwitchGroup             //10-03-22|0x00fe
//***************************************************************************             //10-03-22|0x00ff
//******                                                               ******             //10-03-22|0x0100
//****** Initial the new generator                                     ******             //10-03-22|0x0101
//******                                                               ******             //10-03-22|0x0102
//***************************************************************************             //10-03-22|0x0103
    InitialRandom;                                                                        //15-06-16|0x0104
//***************************************************************************             //10-03-22|0x0105
    CryptoIndex         = CryptoNoGenerators;                                             //10-03-22|0x0106
    CryptoDataIndex     = CryptoNoGenerators;                                             //10-03-22|0x0107
    CryptoPosition      = CryptoNoGenerators * CryptoSize;                                //10-03-22|0x0108
//***************************************************************************             //10-03-22|0x0109
    *IndexAddr          = CryptoNoGenerators;                                             //10-03-22|0x010a
    CryptoNoGenerators += 1;                                                              //10-03-22|0x010b
    if(CryptoNoGenerators > 256)      ReturnFinish("Too Many Generators");                //10-03-22|0x010c
//***************************************************************************             //10-03-22|0x010d
    return_test(crypto_create_1);                                                         //10-03-22|0x010e
}                                                                                         //10-03-22|0x010f
//                                                                                        //05-24-97|0x010f
//***************************************************************************             //10-03-23|0x0112
//***************************************************************************             //10-03-23|0x0113
//******                                                               ******             //10-03-23|0x0114
//******               crypto_reset(Index)                             ******             //10-03-23|0x0115
//******                                                               ******             //10-03-23|0x0116
//***************************************************************************             //10-03-23|0x0117
//***************************************************************************             //10-03-23|0x0118
//*******************************************************************************         //10-29-97|0x011c
//*******************************************************************************         //10-29-97|0x011c
// crypto_reset                                                                           //10-03-23|0x011c
//*******************************************************************************         //10-29-97|0x011c
//*******************************************************************************         //10-29-97|0x011c
UINT CRYPTO::crypto_reset(                                                                //10-03-23|0x011c
    UINT Index                                                                            //10-03-23|0x011c
    ) {                                                                                   //10-03-23|0x011c
//*******************************************************************************         //10-29-97|0x011c
//***************************************************************************             //10-03-23|0x0120
//***************************************************************************             //10-03-23|0x0121
    if(crypto_addr == 0)                                    ReturnSystemError             //10-03-23|0x0122
    if(Index >= CryptoNoGenerators)    ReturnFinish("Generator Not Created");             //10-03-23|0x0123
//***************************************************************************             //10-03-23|0x0124
//******                                                               ******             //10-03-23|0x0125
//****** Process Class State                                           ******             //10-03-23|0x0126
//******                                                               ******             //10-03-23|0x0127
//***************************************************************************             //10-03-23|0x0128
    switch(CryptoClassState)                                                              //10-03-23|0x0129
      {                                                                                   //10-03-23|0x012a
        case CRYPTO_CLASS_READY:                                       break;             //10-03-23|0x012b
        default:                       ReturnFinish("Illegal Random Reset");              //10-03-23|0x012c
        }                                                                                 //10-03-23|0x012d
//--------------------------------------------------------------------------*             //10-03-23|0x012e
    CryptoClassState  = CRYPTO_CLASS_OPENED;                                              //10-03-23|0x012f
//***************************************************************************             //10-03-23|0x0130
//******                                                               ******             //10-03-23|0x0131
//****** Write the current generator                                   ******             //10-03-23|0x0132
//******                                                               ******             //10-03-23|0x0133
//***************************************************************************             //10-03-23|0x0134
    switch(crypto_write(Index))                                  _SwitchGroup             //10-03-23|0x0135
//***************************************************************************             //10-03-23|0x0136
//******                                                               ******             //10-03-23|0x0137
//****** Initial the new generator                                     ******             //10-03-23|0x0138
//******                                                               ******             //10-03-23|0x0139
//***************************************************************************             //10-03-23|0x013a
    InitialRandom;                                                                        //15-06-16|0x013b
//***************************************************************************             //10-03-23|0x013c
    CryptoIndex         = Index;                                                          //10-03-23|0x013d
    CryptoDataIndex     = Index;                                                          //10-03-23|0x013e
    CryptoPosition      = Index * CryptoSize;                                             //10-03-23|0x013f
//***************************************************************************             //10-03-23|0x0140
    return_test(crypto_reset_1);                                                          //10-03-23|0x0141
}                                                                                         //10-03-23|0x0142
//                                                                                        //05-24-97|0x0142
//***************************************************************************             //10-03-22|0x0145
//***************************************************************************             //10-03-22|0x0146
//******                                                               ******             //10-03-22|0x0147
//******               crypto_open(Index)                              ******             //10-03-22|0x0148
//******                                                               ******             //10-03-22|0x0149
//***************************************************************************             //10-03-22|0x014a
//***************************************************************************             //10-03-22|0x014b
//*******************************************************************************         //10-29-97|0x014f
//*******************************************************************************         //10-29-97|0x014f
// crypto_open                                                                            //10-03-22|0x014f
//*******************************************************************************         //10-29-97|0x014f
//*******************************************************************************         //10-29-97|0x014f
UINT CRYPTO::crypto_open(                                                                 //10-03-22|0x014f
    UINT Index                                                                            //10-03-22|0x014f
    ) {                                                                                   //10-03-22|0x014f
//*******************************************************************************         //10-29-97|0x014f
//***************************************************************************             //10-03-22|0x0153
//***************************************************************************             //10-03-22|0x0154
    if(crypto_addr == 0)                                    ReturnSystemError             //10-03-22|0x0155
    if(Index >= CryptoNoGenerators)    ReturnFinish("Generator Not Created");             //10-03-22|0x0156
//***************************************************************************             //10-03-22|0x0157
//******                                                               ******             //10-03-22|0x0158
//****** Process Class State                                           ******             //10-03-22|0x0159
//******                                                               ******             //10-03-22|0x015a
//***************************************************************************             //10-03-22|0x015b
    switch(CryptoClassState)                                                              //10-03-22|0x015c
      {                                                                                   //10-03-22|0x015d
        case CRYPTO_CLASS_READY:                                       break;             //10-03-22|0x015e
        default:                       ReturnFinish("Illegal Random Open");               //10-03-22|0x015f
        }                                                                                 //10-03-22|0x0160
//--------------------------------------------------------------------------*             //10-03-22|0x0161
    CryptoClassState  = CRYPTO_CLASS_OPENED;                                              //10-03-22|0x0162
//***************************************************************************             //10-03-22|0x0163
//******                                                               ******             //10-03-22|0x0164
//****** Write the current generator                                   ******             //10-03-22|0x0165
//******                                                               ******             //10-03-22|0x0166
//***************************************************************************             //10-03-22|0x0167
    switch(crypto_write(Index))                                  _SwitchGroup             //10-03-22|0x0168
    switch(crypto_read(Index))                                   _SwitchGroup             //10-03-22|0x0169
//***************************************************************************             //10-03-22|0x016a
    return_test(crypto_open_1);                                                           //10-03-22|0x016b
}                                                                                         //10-03-22|0x016c
//                                                                                        //05-24-97|0x016c
//***************************************************************************             //10-03-22|0x016f
//***************************************************************************             //10-03-22|0x0170
//******                                                               ******             //10-03-22|0x0171
//******               crypto_close                                    ******             //10-03-22|0x0172
//******                                                               ******             //10-03-22|0x0173
//***************************************************************************             //10-03-22|0x0174
//***************************************************************************             //10-03-22|0x0175
//*******************************************************************************         //10-29-97|0x0179
//*******************************************************************************         //10-29-97|0x0179
// crypto_close                                                                           //10-03-22|0x0179
//*******************************************************************************         //10-29-97|0x0179
//*******************************************************************************         //10-29-97|0x0179
UINT CRYPTO::crypto_close(void) {                                                         //10-03-22|0x0179
//*******************************************************************************         //10-29-97|0x0179
//***************************************************************************             //10-03-22|0x017d
//***************************************************************************             //10-03-22|0x017e
    if(crypto_addr == 0)                                    ReturnSystemError             //10-03-23|0x017f
//***************************************************************************             //10-03-23|0x0180
    if(CryptoPosition != (CryptoIndex * CryptoSize))        ReturnSystemError             //10-03-23|0x0181
    if(CryptoIndex    !=  CryptoDataIndex)                  ReturnSystemError             //10-03-23|0x0182
//***************************************************************************             //10-03-22|0x0183
//******                                                               ******             //10-03-22|0x0184
//****** Process Class State                                           ******             //10-03-22|0x0185
//******                                                               ******             //10-03-22|0x0186
//***************************************************************************             //10-03-22|0x0187
    switch(CryptoClassState)                                                              //10-03-22|0x0188
      {                                                                                   //10-03-22|0x0189
        case CRYPTO_CLASS_OPENED:                                      break;             //10-03-22|0x018a
        default:                       ReturnFinish("Illegal Random Close");              //10-03-22|0x018b
        }                                                                                 //10-03-22|0x018c
//--------------------------------------------------------------------------*             //10-03-22|0x018d
    CryptoClassState  = CRYPTO_CLASS_READY;                                               //10-03-22|0x018e
//***************************************************************************             //10-03-22|0x018f
    return_test(crypto_close_1);                                                          //10-03-22|0x0190
}                                                                                         //10-03-22|0x0191
//                                                                                        //05-24-97|0x0191
//***************************************************************************             //15-06-16|0x0194
//***************************************************************************             //15-06-16|0x0195
//******                                                               ******             //15-06-16|0x0196
//******               basic_random_load(ArgFar, InputTokens)          ******             //15-06-16|0x0197
//******                                                               ******             //15-06-16|0x0198
//***************************************************************************             //15-06-16|0x0199
//***************************************************************************             //15-06-16|0x019a
//*******************************************************************************         //10-29-97|0x019f
//*******************************************************************************         //10-29-97|0x019f
// basic_random_load                                                                      //15-06-16|0x019f
//*******************************************************************************         //10-29-97|0x019f
//*******************************************************************************         //10-29-97|0x019f
UINT CRYPTO::basic_random_load(                                                           //15-06-16|0x019f
    CRYPTO_DATA_FAR ArgFar,                                                               //15-06-16|0x019f
    STRING_DATA_FAR Addr                                                                  //15-06-16|0x019f
    ) {                                                                                   //15-06-16|0x019f
//*******************************************************************************         //10-29-97|0x019f
    switch(load_random(ArgFar, Addr))                            _SwitchGroup             //15-06-16|0x01a3
    return_test(basic_random_load_1);                                                     //15-06-16|0x01a4
}                                                                                         //15-06-16|0x01a5
//                                                                                        //05-24-97|0x01a5
//***************************************************************************             //10-03-22|0x01a8
//***************************************************************************             //10-03-22|0x01a9
//******                                                               ******             //10-03-22|0x01aa
//******              crypto_load(InputTokens)                         ******             //10-03-22|0x01ab
//******                                                               ******             //10-03-22|0x01ac
//***************************************************************************             //10-03-22|0x01ad
//***************************************************************************             //10-03-22|0x01ae
//*******************************************************************************         //10-29-97|0x01b3
//*******************************************************************************         //10-29-97|0x01b3
// crypto_load                                                                            //10-03-22|0x01b3
//*******************************************************************************         //10-29-97|0x01b3
//*******************************************************************************         //10-29-97|0x01b3
UINT CRYPTO::crypto_load(                                                                 //10-03-22|0x01b3
    STRING_DATA_FAR Addr                                                                  //10-03-22|0x01b3
    ) {                                                                                   //10-03-22|0x01b3
//*******************************************************************************         //10-29-97|0x01b3
//***************************************************************************             //10-03-22|0x01b7
//***************************************************************************             //10-03-22|0x01b8
    if(crypto_addr == 0)                                    ReturnSystemError             //10-03-22|0x01b9
//***************************************************************************             //10-03-22|0x01ba
    if(CryptoPosition != (CryptoIndex * CryptoSize))        ReturnSystemError             //10-03-22|0x01bb
    if(CryptoIndex    !=  CryptoDataIndex)                  ReturnSystemError             //10-03-22|0x01bc
//***************************************************************************             //10-03-22|0x01bd
//******                                                               ******             //10-03-22|0x01be
//****** Process Class State                                           ******             //10-03-22|0x01bf
//******                                                               ******             //10-03-22|0x01c0
//***************************************************************************             //10-03-22|0x01c1
    switch(CryptoClassState)                                                              //10-03-22|0x01c2
      {                                                                                   //10-03-22|0x01c3
        case CRYPTO_CLASS_OPENED:                                      break;             //10-03-22|0x01c4
        default:                       ReturnFinish("Illegal Random Load");               //10-03-22|0x01c5
        }                                                                                 //10-03-22|0x01c6
//***************************************************************************             //10-03-22|0x01c7
//******                                                               ******             //10-03-22|0x01c8
//****** LOAD THE GENERATOR FROM STRING                                ******             //10-03-22|0x01c9
//******                                                               ******             //10-03-22|0x01ca
//***************************************************************************             //10-03-22|0x01cb
    switch(LoadRandom)                                           _SwitchGroup             //15-06-16|0x01cc
//***************************************************************************             //10-03-29|0x01cd
    return_test(crypto_load_1);                                                           //10-03-22|0x01ce
}                                                                                         //10-03-22|0x01cf
//                                                                                        //05-24-97|0x01cf
//***************************************************************************             //15-06-16|0x01d2
//***************************************************************************             //15-06-16|0x01d3
//******                                                               ******             //15-06-16|0x01d4
//******             basic_get_random(Addr, Argfar)                    ******             //15-06-16|0x01d5
//******                                                               ******             //15-06-16|0x01d6
//***************************************************************************             //15-06-16|0x01d7
//***************************************************************************             //15-06-16|0x01d8
//*******************************************************************************         //10-29-97|0x01dd
//*******************************************************************************         //10-29-97|0x01dd
// basic_get_random                                                                       //15-06-16|0x01dd
//*******************************************************************************         //10-29-97|0x01dd
//*******************************************************************************         //10-29-97|0x01dd
UINT CRYPTO::basic_get_random(                                                            //15-06-16|0x01dd
    UCHAR_FAR RandomByteFar,                                                              //15-06-16|0x01dd
    CRYPTO_DATA_FAR ArgFar                                                                //15-06-16|0x01dd
    ) {                                                                                   //15-06-16|0x01dd
//*******************************************************************************         //10-29-97|0x01dd
//***************************************************************************             //15-06-16|0x01e1
//***************************************************************************              //15-06-16|0x01e2
//******                                                               ******             //15-06-16|0x01e3
//****** Process Data State                                            ******             //15-06-16|0x01e4
//******                                                               ******             //15-06-16|0x01e5
//***************************************************************************             //15-06-16|0x01e6
    switch(ArgDataState)                                                                  //15-06-16|0x01e7
      {                                                                                   //15-06-16|0x01e8
        case CRYPTO_DATA_LOAD:                                         break;             //15-06-16|0x01e9
        case CRYPTO_DATA_RANDOM:                                       break;             //15-06-16|0x01ea
        default:                   ReturnFinish("Illegal BasicGetRandom");                //15-06-16|0x01eb
        }                                                                                 //15-06-16|0x01ec
//--------------------------------------------------------------------------*             //15-06-16|0x01ed
    ArgDataState     = CRYPTO_DATA_RANDOM;                                                //15-06-16|0x01ee
//***************************************************************************             //15-06-16|0x01ef
    *RandomByteFar   = random_generator(ArgFar);                                          //15-06-16|0x01f0
     return_test(basic_get_random_1);                                                     //15-06-16|0x01f1
}                                                                                         //15-06-16|0x01f2
//                                                                                        //05-24-97|0x01f2
//***************************************************************************             //10-03-23|0x01f5
//***************************************************************************             //10-03-23|0x01f6
//******                                                               ******             //10-03-23|0x01f7
//******             crypto_get_random(Addr, NoIterations)             ******             //10-03-23|0x01f8
//******                                                               ******             //10-03-23|0x01f9
//***************************************************************************             //10-03-23|0x01fa
//***************************************************************************             //10-03-23|0x01fb
//*******************************************************************************         //10-29-97|0x0200
//*******************************************************************************         //10-29-97|0x0200
// crypto_get_random                                                                      //10-03-23|0x0200
//*******************************************************************************         //10-29-97|0x0200
//*******************************************************************************         //10-29-97|0x0200
UINT CRYPTO::crypto_get_random(                                                           //10-03-23|0x0200
    STRING_DATA_FAR Addr,                                                                 //10-03-23|0x0200
    UINT NoIterations                                                                     //10-03-23|0x0200
    ) {                                                                                   //10-03-23|0x0200
//*******************************************************************************         //10-29-97|0x0200
//***************************************************************************             //10-03-23|0x0204
//***************************************************************************             //10-03-23|0x0205
  WORDS work;                                                                        //10-03-23|0x0206
//***************************************************************************             //10-03-23|0x0207
//***************************************************************************             //10-03-23|0x0208
//***************************************************************************             //10-03-23|0x0209
    if(crypto_addr == 0)                                    ReturnSystemError             //10-03-23|0x020a
//***************************************************************************             //10-03-23|0x020b
    if(CryptoPosition != (CryptoIndex * CryptoSize))        ReturnSystemError             //10-03-23|0x020c
    if(CryptoIndex    !=  CryptoDataIndex)                  ReturnSystemError             //10-03-23|0x020d
//***************************************************************************             //10-03-23|0x020e
//******                                                               ******             //10-03-23|0x020f
//****** Process Class State                                           ******             //10-03-23|0x0210
//******                                                               ******             //10-03-23|0x0211
//***************************************************************************             //10-03-23|0x0212
    switch(CryptoClassState)                                                              //10-03-23|0x0213
      {                                                                                   //10-03-23|0x0214
        case CRYPTO_CLASS_OPENED:                                      break;             //10-03-23|0x0215
        default:                       ReturnFinish("Illegal Get Random");                //10-03-23|0x0216
        }                                                                                 //10-03-23|0x0217
//***************************************************************************             //10-03-23|0x0218
//******                                                               ******             //10-03-23|0x0219
//****** Process Data State                                            ******             //10-03-23|0x021a
//******                                                               ******             //10-03-23|0x021b
//***************************************************************************             //10-03-23|0x021c
    switch(CryptoDataState)                                                               //10-03-23|0x021d
      {                                                                                   //10-03-23|0x021e
        case CRYPTO_DATA_LOAD:                                         break;             //10-03-23|0x021f
        case CRYPTO_DATA_RANDOM:                                       break;             //10-03-23|0x0220
        default:                       ReturnFinish("Illegal Get Random");                //10-03-23|0x0221
        }                                                                                 //10-03-23|0x0222
//--------------------------------------------------------------------------*             //10-03-23|0x0223
    CryptoDataState     = CRYPTO_DATA_RANDOM;                                             //10-03-23|0x0224
//***************************************************************************             //10-03-23|0x0225
    if(AddrLength>=256)                                     ReturnSystemError             //10-03-23|0x0226
    if(AddrChar(AddrLength) != 0)                           ReturnSystemError             //10-03-23|0x0227
    if(AddrLength != 0)              ReturnFinish("Output String Not Empty");             //10-03-23|0x0228
//***************************************************************************             //10-03-23|0x0229
    if(NoIterations == 0)                  ReturnFinish("Zero Request");                  //10-03-23|0x022a
//***************************************************************************             //10-03-23|0x022b
//******                                                               ******             //10-03-23|0x022c
//****** LOAD THE STRING FROM THE GENERATOR                            ******             //10-03-23|0x022d
//******                                                               ******             //10-03-23|0x022e
//***************************************************************************             //10-03-23|0x022f
    while(NoIterations > 0)                                                               //10-03-23|0x0230
      {                                                                                   //10-03-23|0x0231
        --NoIterations;                                                                   //10-03-23|0x0232
        work.ulong      = 0;                                                              //10-03-23|0x0233
//---------------------------------------------------------------------------             //10-03-29|0x0234
        work.byte0      = RandomGenerator;                                                //15-06-16|0x0235
        work.byte2      = CryptoChain;                                                    //10-03-30|0x0236
        work.word1     += work.word0;                                                     //10-03-30|0x0237
        work.word0      = work.word1 / 62;                                                //10-03-30|0x0238
        work.word1      = work.word1 % 62;                                                //10-03-30|0x0239
        CryptoChain     = work.byte0;                                                     //10-03-30|0x023a
//***************************************************************************             //10-03-30|0x023b
        work.word0      = 0;                                                              //10-03-30|0x023c
        if(work.word1 < 10)                                                               //10-03-30|0x023d
          {                                                                               //10-03-30|0x023e
            work.word0   = work.word1;                                                    //10-03-30|0x023f
            work.char0  += '0';                                                           //10-03-30|0x0240
            }                                                                             //10-03-30|0x0241
//---------------------------------------------------------------------------             //10-03-30|0x0242
        if(work.word1 >= 10 && work.word1 < 36)                                           //10-03-30|0x0243
          {                                                                               //10-03-30|0x0244
            work.word0   = work.word1;                                                    //10-03-30|0x0245
            work.word0  -= 10;                                                            //10-03-30|0x0246
            work.char0  += 'A';                                                           //10-03-30|0x0247
            }                                                                             //10-03-30|0x0248
//---------------------------------------------------------------------------             //10-03-30|0x0249
        if(work.word1 >= 36)                                                              //10-03-30|0x024a
          {                                                                               //10-03-30|0x024b
            work.word0   = work.word1;                                                    //10-03-30|0x024c
            work.word0  -= 36;                                                            //10-03-30|0x024d
            work.char0  += 'a';                                                           //10-03-30|0x024e
            }                                                                             //10-03-30|0x024f
//***************************************************************************             //10-03-23|0x0250
        AddrChar(AddrLength++) = work.char0;                                              //10-03-23|0x0251
        if(AddrLength             >= 256)                   ReturnSystemError             //10-03-23|0x0252
        if(AddrChar(AddrLength)   != 0)                     ReturnSystemError             //10-03-23|0x0253
        }                                                                                 //10-03-23|0x0254
//***************************************************************************             //10-03-23|0x0255
    AddrType = I_NAME;                                                                    //10-03-23|0x0256
    return_test(crypto_get_random_1);                                                     //10-03-23|0x0257
}                                                                                         //10-03-23|0x0258
//                                                                                        //05-24-97|0x0258
//***************************************************************************             //10-03-23|0x025b
//***************************************************************************             //10-03-23|0x025c
//******                                                               ******             //10-03-23|0x025d
//******             crypto_compute_parity(Addr)                       ******             //10-03-23|0x025e
//******                                                               ******             //10-03-23|0x025f
//***************************************************************************             //10-03-23|0x0260
//***************************************************************************             //10-03-23|0x0261
//*******************************************************************************         //10-29-97|0x0266
//*******************************************************************************         //10-29-97|0x0266
// crypto_compute_parity                                                                  //10-03-23|0x0266
//*******************************************************************************         //10-29-97|0x0266
//*******************************************************************************         //10-29-97|0x0266
UINT CRYPTO::crypto_compute_parity(                                                       //10-03-23|0x0266
    STRING_DATA_FAR Addr                                                                  //10-03-23|0x0266
    ) {                                                                                   //10-03-23|0x0266
//*******************************************************************************         //10-29-97|0x0266
//***************************************************************************             //10-03-23|0x026a
//***************************************************************************             //10-03-23|0x026b
  WORDS work;                                                                        //10-03-23|0x026c
  UINT index;                                                                        //10-03-23|0x026d
//***************************************************************************             //10-03-23|0x026e
//***************************************************************************             //10-03-23|0x026f
    if(crypto_addr == 0)                                    ReturnSystemError             //10-03-23|0x0270
//***************************************************************************             //10-03-23|0x0271
    if(CryptoPosition != (CryptoIndex * CryptoSize))        ReturnSystemError             //10-03-23|0x0272
    if(CryptoIndex    !=  CryptoDataIndex)                  ReturnSystemError             //10-03-23|0x0273
//***************************************************************************             //10-03-23|0x0274
//******                                                               ******             //10-03-23|0x0275
//****** Process Class State                                           ******             //10-03-23|0x0276
//******                                                               ******             //10-03-23|0x0277
//***************************************************************************             //10-03-23|0x0278
    switch(CryptoClassState)                                                              //10-03-23|0x0279
      {                                                                                   //10-03-23|0x027a
        case CRYPTO_CLASS_OPENED:                                      break;             //10-03-23|0x027b
        default:                      ReturnFinish("Illegal Compute Parity");             //10-03-23|0x027c
        }                                                                                 //10-03-23|0x027d
//***************************************************************************             //10-03-23|0x027e
//******                                                               ******             //10-03-23|0x027f
//****** Process Data State                                            ******             //10-03-23|0x0280
//******                                                               ******             //10-03-23|0x0281
//***************************************************************************             //10-03-23|0x0282
    switch(CryptoDataState)                                                               //10-03-23|0x0283
      {                                                                                   //10-03-23|0x0284
        case CRYPTO_DATA_LOAD:                                         break;             //10-03-23|0x0285
        case CRYPTO_DATA_PARITY:                                       break;             //10-03-23|0x0286
        default:                      ReturnFinish("Illegal Compute Parity");             //10-03-23|0x0287
        }                                                                                 //10-03-23|0x0288
//--------------------------------------------------------------------------*             //10-03-23|0x0289
    CryptoDataState     = CRYPTO_DATA_PARITY;                                             //10-03-23|0x028a
//***************************************************************************             //10-03-23|0x028b
    if(AddrLength>=256)                                     ReturnSystemError             //10-03-23|0x028c
    if(AddrChar(AddrLength) != 0)                           ReturnSystemError             //10-03-23|0x028d
    if(AddrLength == 0)                  ReturnFinish("Output String Empty");             //10-03-23|0x028e
//***************************************************************************             //10-03-23|0x028f
//******                                                               ******             //10-03-23|0x0290
//****** COMPUTE THE PARITY FROM THE STRING THE GENERATOR              ******             //10-03-23|0x0291
//******                                                               ******             //10-03-23|0x0292
//***************************************************************************             //10-03-23|0x0293
    for(index=0; index<AddrLength; ++index)                                               //10-03-23|0x0294
      {                                                                                   //10-03-23|0x0295
        work.ulong   = 0;                                                                 //10-03-23|0x0296
        work.char0   = AddrChar(index);                                                   //10-03-23|0x0297
        work.byte0  ^= RandomGenerator;                                                   //15-06-16|0x0298
        work.byte0  ^= CryptoParity;                                                      //10-03-23|0x0299
        CryptoParity = work.byte0;                                                        //10-03-23|0x029a
        }                                                                                 //10-03-23|0x029b
//***************************************************************************             //10-03-23|0x029c
//***************************************************************************             //10-03-23|0x029d
    return_test(crypto_compute_parity_1);                                                 //10-03-23|0x029e
}                                                                                         //10-03-23|0x029f
//                                                                                        //05-24-97|0x029f
//***************************************************************************             //10-03-23|0x02a2
//***************************************************************************             //10-03-23|0x02a3
//******                                                               ******             //10-03-23|0x02a4
//******             crypto_get_parity(OutputAddr)                     ******             //10-03-23|0x02a5
//******                                                               ******             //10-03-23|0x02a6
//***************************************************************************             //10-03-23|0x02a7
//***************************************************************************             //10-03-23|0x02a8
//*******************************************************************************         //10-29-97|0x02ad
//*******************************************************************************         //10-29-97|0x02ad
// crypto_get_parity                                                                      //10-03-23|0x02ad
//*******************************************************************************         //10-29-97|0x02ad
//*******************************************************************************         //10-29-97|0x02ad
UINT CRYPTO::crypto_get_parity(                                                           //10-03-23|0x02ad
    UCHAR_FAR OutputAddr                                                                  //10-03-23|0x02ad
    ) {                                                                                   //10-03-23|0x02ad
//*******************************************************************************         //10-29-97|0x02ad
//***************************************************************************             //10-03-23|0x02b1
//***************************************************************************             //10-03-23|0x02b2
    if(crypto_addr == 0)                                    ReturnSystemError             //10-03-23|0x02b3
//***************************************************************************             //10-03-23|0x02b4
    if(CryptoPosition != (CryptoIndex * CryptoSize))        ReturnSystemError             //10-03-23|0x02b5
    if(CryptoIndex    !=  CryptoDataIndex)                  ReturnSystemError             //10-03-23|0x02b6
//***************************************************************************             //10-03-23|0x02b7
//******                                                               ******             //10-03-23|0x02b8
//****** Process Class State                                           ******             //10-03-23|0x02b9
//******                                                               ******             //10-03-23|0x02ba
//***************************************************************************             //10-03-23|0x02bb
    switch(CryptoClassState)                                                              //10-03-23|0x02bc
      {                                                                                   //10-03-23|0x02bd
        case CRYPTO_CLASS_OPENED:                                      break;             //10-03-23|0x02be
        default:                      ReturnFinish("Illegal Get Parity");                 //10-03-23|0x02bf
        }                                                                                 //10-03-23|0x02c0
//***************************************************************************             //10-03-23|0x02c1
//******                                                               ******             //10-03-23|0x02c2
//****** Process Data State                                            ******             //10-03-23|0x02c3
//******                                                               ******             //10-03-23|0x02c4
//***************************************************************************             //10-03-23|0x02c5
    switch(CryptoDataState)                                                               //10-03-23|0x02c6
      {                                                                                   //10-03-23|0x02c7
        case CRYPTO_DATA_PARITY:                                       break;             //10-03-23|0x02c8
        default:                      ReturnFinish("Illegal Get Parity");                 //10-03-23|0x02c9
        }                                                                                 //10-03-23|0x02ca
//***************************************************************************             //10-03-23|0x02cb
//******                                                               ******             //10-03-23|0x02cc
//****** COMPUTE THE PARITY FROM THE STRING THE GENERATOR              ******             //10-03-23|0x02cd
//******                                                               ******             //10-03-23|0x02ce
//***************************************************************************             //10-03-23|0x02cf
    *OutputAddr = CryptoParity;                                                           //10-03-23|0x02d0
//***************************************************************************             //10-03-23|0x02d1
//***************************************************************************             //10-03-23|0x02d2
    return_test(crypto_get_parity_1);                                                     //10-03-23|0x02d3
}                                                                                         //10-03-23|0x02d4
//                                                                                        //05-24-97|0x02d4
//***************************************************************************             //10-03-23|0x02d7
//***************************************************************************             //10-03-23|0x02d8
//******                                                               ******             //10-03-23|0x02d9
//******             crypto_encrypt(Out, In, Index)                    ******             //10-03-23|0x02da
//******                                                               ******             //10-03-23|0x02db
//***************************************************************************             //10-03-23|0x02dc
//***************************************************************************             //10-03-23|0x02dd
//*******************************************************************************         //10-29-97|0x02e2
//*******************************************************************************         //10-29-97|0x02e2
// crypto_encrypt                                                                         //10-03-23|0x02e2
//*******************************************************************************         //10-29-97|0x02e2
//*******************************************************************************         //10-29-97|0x02e2
UINT CRYPTO::crypto_encrypt(                                                              //10-03-23|0x02e2
    STRING_DATA_FAR Out,                                                                  //10-03-23|0x02e2
    STRING_DATA_FAR In                                                                    //10-03-23|0x02e2
    ) {                                                                                   //10-03-23|0x02e2
//*******************************************************************************         //10-29-97|0x02e2
//***************************************************************************             //10-03-23|0x02e6
//***************************************************************************             //10-03-23|0x02e7
  WORDS work;                                                                        //10-03-23|0x02e8
  UINT index;                                                                        //10-03-23|0x02e9
//***************************************************************************             //10-03-23|0x02ea
//***************************************************************************             //10-03-23|0x02eb
    if(crypto_addr    == 0)                                 ReturnSystemError             //10-03-23|0x02ec
//***************************************************************************             //10-03-23|0x02ed
    if(CryptoPosition != (CryptoIndex * CryptoSize))        ReturnSystemError             //10-03-23|0x02ee
    if(CryptoIndex    !=  CryptoDataIndex)                  ReturnSystemError             //10-03-23|0x02ef
//***************************************************************************             //10-03-23|0x02f0
//******                                                               ******             //10-03-23|0x02f1
//****** Process Class State                                           ******             //10-03-23|0x02f2
//******                                                               ******             //10-03-23|0x02f3
//***************************************************************************             //10-03-23|0x02f4
    switch(CryptoClassState)                                                              //10-03-23|0x02f5
      {                                                                                   //10-03-23|0x02f6
        case CRYPTO_CLASS_OPENED:                                      break;             //10-03-23|0x02f7
        default:                      ReturnFinish("Illegal Get Parity");                 //10-03-23|0x02f8
        }                                                                                 //10-03-23|0x02f9
//***************************************************************************             //10-03-23|0x02fa
//******                                                               ******             //10-03-23|0x02fb
//****** Process Data State                                            ******             //10-03-23|0x02fc
//******                                                               ******             //10-03-23|0x02fd
//***************************************************************************             //10-03-23|0x02fe
    switch(CryptoDataState)                                                               //10-03-23|0x02ff
      {                                                                                   //10-03-23|0x0300
        case CRYPTO_DATA_LOAD:                                         break;             //10-03-23|0x0301
        case CRYPTO_DATA_ENCRYPT:                                      break;             //10-03-23|0x0302
        default:                      ReturnFinish("Illegal Get Parity");                 //10-03-23|0x0303
        }                                                                                 //10-03-23|0x0304
//--------------------------------------------------------------------------*             //10-03-23|0x0305
    CryptoDataState     = CRYPTO_DATA_ENCRYPT;                                            //10-03-23|0x0306
//***************************************************************************             //10-03-23|0x0307
    if(InLength>=256)                                       ReturnSystemError             //10-03-23|0x0308
    if(InChar(InLength) != 0)                               ReturnSystemError             //10-03-23|0x0309
    if(InLength == 0)                  ReturnFinish("Input String Empty");                //10-03-23|0x030a
//***************************************************************************             //10-03-23|0x030b
    if(OutLength>=256)                                      ReturnSystemError             //10-03-23|0x030c
    if(OutChar(OutLength) != 0)                             ReturnSystemError             //10-03-23|0x030d
    if(OutLength > 0)                ReturnFinish("Output String Not Empty");             //10-03-23|0x030e
//***************************************************************************             //10-03-23|0x030f
//******                                                               ******             //10-03-23|0x0310
//****** ENCRYPT THE STRING                                            ******             //10-03-23|0x0311
//******                                                               ******             //10-03-23|0x0312
//***************************************************************************             //10-03-23|0x0313
    for(index=0; index<InLength; ++index)                                                 //10-03-23|0x0314
      {                                                                                   //10-03-23|0x0315
        work.ulong      = 0;                                                              //10-03-23|0x0316
//---------------------------------------------------------------------------             //10-03-29|0x0317
        work.byte0      = RandomGenerator;                                                //15-06-16|0x0318
        work.byte2      = CryptoChain;                                                    //10-03-29|0x0319
        work.word1     += work.word0;                                                     //10-03-29|0x031a
        work.word0      = work.word1 / 95;                                                //10-03-29|0x031b
        work.word1      = work.word1 % 95;                                                //10-03-29|0x031c
        CryptoChain     = work.byte0;                                                     //10-03-29|0x031d
//---------------------------------------------------------------------------             //10-03-29|0x031e
        work.word0      = 0;                                                              //10-03-29|0x031f
        work.byte0      = CryptoCodeRing;                                                 //10-03-29|0x0320
        work.word0     += work.word1;                                                     //10-03-29|0x0321
        work.word0      = work.word0 % 95;                                                //10-03-29|0x0322
        CryptoCodeRing  = work.byte0;                                                     //10-03-29|0x0323
//---------------------------------------------------------------------------             //10-03-29|0x0324
        work.word1      = 0;                                                              //10-03-29|0x0325
        work.char2      =  InChar(index);                                                 //10-03-29|0x0326
        work.word1     -= 32;                                                             //10-03-29|0x0327
        if(work.word1  >= 95)                               ReturnSystemError             //10-03-29|0x0328
//**************************************************************************-             //10-03-29|0x0329
        work.word1     += work.word0;                                                     //10-03-29|0x032a
        if(work.word1 >= 95)                                                              //10-03-29|0x032b
          {                                                                               //10-03-29|0x032c
            work.word1 -= 95;                                                             //10-03-29|0x032d
            }                                                                             //10-03-29|0x032e
        work.word1     += 32;                                                             //10-03-29|0x032f
//***************************************************************************             //10-03-29|0x0330
        OutChar(OutLength++) = work.char2;                                                //10-03-29|0x0331
        if(OutLength             >= 256)                    ReturnSystemError             //10-03-23|0x0332
        if(OutChar(OutLength)    != 0)                      ReturnSystemError             //10-03-23|0x0333
        }                                                                                 //10-03-23|0x0334
//***************************************************************************             //10-03-23|0x0335
    OutType = I_TOKEN;                                                                    //10-03-29|0x0336
    return_test(crypto_encrypt_1);                                                        //10-03-23|0x0337
}                                                                                         //10-03-23|0x0338
//                                                                                        //05-24-97|0x0338
//***************************************************************************             //10-03-23|0x033b
//***************************************************************************             //10-03-23|0x033c
//******                                                               ******             //10-03-23|0x033d
//******             crypto_decrypt(Out, In)                           ******             //10-03-23|0x033e
//******                                                               ******             //10-03-23|0x033f
//***************************************************************************             //10-03-23|0x0340
//***************************************************************************             //10-03-23|0x0341
//*******************************************************************************         //10-29-97|0x0346
//*******************************************************************************         //10-29-97|0x0346
// crypto_decrypt                                                                         //10-03-23|0x0346
//*******************************************************************************         //10-29-97|0x0346
//*******************************************************************************         //10-29-97|0x0346
UINT CRYPTO::crypto_decrypt(                                                              //10-03-23|0x0346
    STRING_DATA_FAR Out,                                                                  //10-03-23|0x0346
    STRING_DATA_FAR In                                                                    //10-03-23|0x0346
    ) {                                                                                   //10-03-23|0x0346
//*******************************************************************************         //10-29-97|0x0346
//***************************************************************************             //10-03-23|0x034a
//***************************************************************************             //10-03-23|0x034b
  WORDS work;                                                                        //10-03-23|0x034c
  UINT index;                                                                        //10-03-23|0x034d
//***************************************************************************             //10-03-23|0x034e
//***************************************************************************             //10-03-23|0x034f
//***************************************************************************             //10-03-23|0x0350
    if(crypto_addr    == 0)                                 ReturnSystemError             //10-03-23|0x0351
//***************************************************************************             //10-03-23|0x0352
    if(CryptoPosition != (CryptoIndex * CryptoSize))        ReturnSystemError             //10-03-23|0x0353
    if(CryptoIndex    !=  CryptoDataIndex)                  ReturnSystemError             //10-03-23|0x0354
//***************************************************************************             //10-03-23|0x0355
//******                                                               ******             //10-03-23|0x0356
//****** Process Class State                                           ******             //10-03-23|0x0357
//******                                                               ******             //10-03-23|0x0358
//***************************************************************************             //10-03-23|0x0359
    switch(CryptoClassState)                                                              //10-03-23|0x035a
      {                                                                                   //10-03-23|0x035b
        case CRYPTO_CLASS_OPENED:                                      break;             //10-03-23|0x035c
        default:                      ReturnFinish("Illegal Get Parity");                 //10-03-23|0x035d
        }                                                                                 //10-03-23|0x035e
//***************************************************************************             //10-03-23|0x035f
//******                                                               ******             //10-03-23|0x0360
//****** Process Data State                                            ******             //10-03-23|0x0361
//******                                                               ******             //10-03-23|0x0362
//***************************************************************************             //10-03-23|0x0363
    switch(CryptoDataState)                                                               //10-03-23|0x0364
      {                                                                                   //10-03-23|0x0365
        case CRYPTO_DATA_LOAD:                                         break;             //10-03-23|0x0366
        case CRYPTO_DATA_DECRYPT:                                      break;             //10-03-23|0x0367
        default:                      ReturnFinish("Illegal Get Parity");                 //10-03-23|0x0368
        }                                                                                 //10-03-23|0x0369
//--------------------------------------------------------------------------*             //10-03-23|0x036a
    CryptoDataState     = CRYPTO_DATA_DECRYPT;                                            //10-03-23|0x036b
//***************************************************************************             //10-03-23|0x036c
    if(InLength>=256)                                       ReturnSystemError             //10-03-23|0x036d
    if(InChar(InLength) != 0)                               ReturnSystemError             //10-03-23|0x036e
    if(InLength == 0)                  ReturnFinish("Input String Empty");                //10-03-23|0x036f
//***************************************************************************             //10-03-23|0x0370
    if(OutLength > 0)                ReturnFinish("Output String Not Empty");             //10-03-23|0x0371
    if(OutChar(OutLength) != 0)                             ReturnSystemError             //10-03-23|0x0372
//***************************************************************************             //10-03-23|0x0373
//******                                                               ******             //10-03-23|0x0374
//****** ENCRYPT THE STRING                                            ******             //10-03-23|0x0375
//******                                                               ******             //10-03-23|0x0376
//***************************************************************************             //10-03-23|0x0377
    for(index=0; index<InLength; ++index)                                                 //10-03-29|0x0378
      {                                                                                   //10-03-23|0x0379
        work.ulong      = 0;                                                              //10-03-23|0x037a
//---------------------------------------------------------------------------             //10-03-29|0x037b
        work.byte0      = RandomGenerator;                                                //15-06-16|0x037c
        work.byte2      = CryptoChain;                                                    //10-03-29|0x037d
        work.word1     += work.word0;                                                     //10-03-29|0x037e
        work.word0      = work.word1 / 95;                                                //10-03-29|0x037f
        work.word1      = work.word1 % 95;                                                //10-03-29|0x0380
        CryptoChain     = work.byte0;                                                     //10-03-29|0x0381
//---------------------------------------------------------------------------             //10-03-29|0x0382
        work.word0      = 0;                                                              //10-03-29|0x0383
        work.byte0      = CryptoCodeRing;                                                 //10-03-29|0x0384
        work.word0     += work.word1;                                                     //10-03-29|0x0385
        work.word0      = work.word0 % 95;                                                //10-03-29|0x0386
        CryptoCodeRing  = work.byte0;                                                     //10-03-29|0x0387
//---------------------------------------------------------------------------             //10-03-29|0x0388
        work.word1      = 0;                                                              //10-03-29|0x0389
        work.char2      = InChar(index);                                                  //10-03-29|0x038a
        work.word1     -= 32;                                                             //10-03-29|0x038b
        if(work.word1  >= 95)                               ReturnSystemError             //10-03-29|0x038c
//**************************************************************************-             //10-03-29|0x038d
        work.sint1     -= work.sint0;                                                     //10-03-29|0x038e
        if(work.sint1 <  0)                                                               //10-03-29|0x038f
          {                                                                               //10-03-29|0x0390
            work.word1 += 95;                                                             //10-03-29|0x0391
            }                                                                             //10-03-29|0x0392
        work.word1     += 32;                                                             //10-03-29|0x0393
//***************************************************************************             //10-03-29|0x0394
        OutChar(OutLength++) = work.char2;                                                //10-03-29|0x0395
        }                                                                                 //10-03-23|0x0396
//***************************************************************************             //10-03-23|0x0397
    OutType = I_TOKEN;                                                                    //10-03-23|0x0398
    return_test(crypto_decrypt_1);                                                        //10-03-23|0x0399
}                                                                                         //10-03-23|0x039a
//                                                                                        //05-24-97|0x039a
//***************************************************************************             //10-03-22|0x039d
//***************************************************************************             //10-03-22|0x039e
//******                                                               ******             //10-03-22|0x039f
//******               crypto_delete(Index)                            ******             //10-03-22|0x03a0
//******                                                               ******             //10-03-22|0x03a1
//***************************************************************************             //10-03-22|0x03a2
//***************************************************************************             //10-03-22|0x03a3
//*******************************************************************************         //10-29-97|0x03a7
//*******************************************************************************         //10-29-97|0x03a7
// crypto_delete                                                                          //10-03-22|0x03a7
//*******************************************************************************         //10-29-97|0x03a7
//*******************************************************************************         //10-29-97|0x03a7
UINT CRYPTO::crypto_delete(void) {                                                        //10-03-22|0x03a7
//*******************************************************************************         //10-29-97|0x03a7
//***************************************************************************             //10-03-22|0x03ab
//***************************************************************************             //10-03-22|0x03ac
//***************************************************************************             //10-03-22|0x03ad
    switch(FileCommitBinary(CryptoFileAddr))                     _SwitchGroup             //10-03-22|0x03ae
    switch(FileClose())                                          _SwitchGroup             //10-03-22|0x03af
    switch(FileDelete())                                         _SwitchGroup             //10-03-22|0x03b0
    switch(FileRelease())                                        _SwitchGroup             //10-03-22|0x03b1
//***************************************************************************             //10-03-22|0x03b2
    return_test(crypto_delete_1);                                                         //10-03-22|0x03b3
}                                                                                         //10-03-22|0x03b4
//                                                                                        //05-24-97|0x03b4
//***************************************************************************             //15-06-16|0x03b7
//***************************************************************************             //15-06-16|0x03b8
//******                                                               ******             //15-06-16|0x03b9
//******                  initial_randomCryptoDataFar)                 ******             //15-06-16|0x03ba
//******                                                               ******             //15-06-16|0x03bb
//***************************************************************************             //15-06-16|0x03bc
//***************************************************************************             //15-06-16|0x03bd
//*******************************************************************************         //10-29-97|0x03c1
//*******************************************************************************         //10-29-97|0x03c1
// initial_random                                                                         //15-06-16|0x03c1
//*******************************************************************************         //10-29-97|0x03c1
//*******************************************************************************         //10-29-97|0x03c1
void CRYPTO::initial_random(                                                              //15-06-16|0x03c1
    CRYPTO_DATA_FAR ArgFar                                                                //15-06-16|0x03c1
    ) {                                                                                   //15-06-16|0x03c1
//*******************************************************************************         //10-29-97|0x03c1
    RandomDataZero;                                                                       //15-06-16|0x03c4
    ArgRandomData(126)    = 0xff;                                                         //15-06-16|0x03c5
    ArgLoadIndex          = 0;                                                            //15-06-16|0x03c6
    ArgBit0Index          = 0;                                                            //15-06-16|0x03c7
    ArgBit126Index        = 126;                                                          //15-06-16|0x03c8
    ArgRotator            = 1;                                                            //15-06-16|0x03c9
    ArgDataState          = CRYPTO_DATA_CREATED;                                          //15-06-16|0x03ca
    ArgParity             = 0;                                                            //15-06-16|0x03cb
    TestSample(initial_random_1);                                                         //15-06-16|0x03cc
    return;                                                                               //15-06-16|0x03cd
//***************************************************************************             //15-06-16|0x03ce
//***************************************************************************             //15-06-16|0x03cf
}                                                                                         //15-06-16|0x03d0
//                                                                                        //05-24-97|0x03d0
//***************************************************************************             //15-06-16|0x03d3
//***************************************************************************             //15-06-16|0x03d4
//******                                                               ******             //15-06-16|0x03d5
//******              load_random(ArgFar, InputTokens)                 ******             //15-06-16|0x03d6
//******                                                               ******             //15-06-16|0x03d7
//***************************************************************************             //15-06-16|0x03d8
//***************************************************************************             //15-06-16|0x03d9
//*******************************************************************************         //10-29-97|0x03de
//*******************************************************************************         //10-29-97|0x03de
// load_random                                                                            //15-06-16|0x03de
//*******************************************************************************         //10-29-97|0x03de
//*******************************************************************************         //10-29-97|0x03de
UINT CRYPTO::load_random(                                                                 //15-06-16|0x03de
    CRYPTO_DATA_FAR ArgFar,                                                               //15-06-16|0x03de
    STRING_DATA_FAR Addr                                                                  //15-06-16|0x03de
    ) {                                                                                   //15-06-16|0x03de
//*******************************************************************************         //10-29-97|0x03de
  UINT i;                                                                            //15-06-16|0x03e1
  UINT j;                                                                            //15-06-16|0x03e2
  WORDS rotator;                                                                     //15-06-16|0x03e3
//***************************************************************************             //15-06-16|0x03e4
//***************************************************************************             //15-06-16|0x03e5
    if(AddrLength           >= 256)                         ReturnSystemError             //15-06-16|0x03e6
    if(AddrChar(AddrLength) != 0)                           ReturnSystemError             //15-06-16|0x03e7
    if(AddrLength           == 0)         ReturnFinish("Empty Input String");             //15-06-16|0x03e8
//***************************************************************************             //15-06-16|0x03e9
//******                                                               ******             //15-06-16|0x03ea
//****** Process Data State                                            ******             //15-06-16|0x03eb
//******                                                               ******             //15-06-16|0x03ec
//***************************************************************************             //15-06-16|0x03ed
    switch(ArgDataState)                                                                  //15-06-16|0x03ee
      {                                                                                   //15-06-16|0x03ef
        case CRYPTO_DATA_CREATED:                                      break;             //15-06-16|0x03f0
        case CRYPTO_DATA_LOAD:                                         break;             //15-06-16|0x03f1
        default:                       ReturnFinish("Illegal Random Load");               //15-06-16|0x03f2
        }                                                                                 //15-06-16|0x03f3
//--------------------------------------------------------------------------*             //15-06-16|0x03f4
    ArgDataState     = CRYPTO_DATA_LOAD;                                                  //15-06-16|0x03f5
//***************************************************************************             //15-06-16|0x03f6
    for(j=0; j<126;  j=j+AddrLength)                                                      //15-06-16|0x03f7
      {                                                                                   //15-06-16|0x03f8
//***************************************************************************             //15-06-16|0x03f9
        for(i=0; i<AddrLength;  ++i)                                                      //15-06-16|0x03fa
          {                                                                               //15-06-16|0x03fb
            rotator.ulong = 0;                                                            //15-06-16|0x03fc
            rotator.char0 = AddrChar(i);                                                  //15-06-16|0x03fd
//***************************************************************************             //15-06-16|0x03fe
            rotator.word0 *= ArgRotator;                                                  //15-06-16|0x03ff
            rotator.byte0 += rotator.byte1;                                               //15-06-16|0x0400
            ArgRotator     = (ArgRotator<128) ? ArgRotator*2 : 1;                         //15-06-16|0x0401
//***************************************************************************             //15-06-16|0x0402
            rotator.char2  = ArgRandomData(ArgLoadIndex);                                 //15-06-16|0x0403
            rotator.byte2 ^= rotator.byte0;                                               //15-06-16|0x0404
            ArgRandomData(ArgLoadIndex) = rotator.char2;                                  //15-06-16|0x0405
//***************************************************************************             //15-06-16|0x0406
            ArgLoadIndex = (ArgLoadIndex<125) ? ArgLoadIndex+1 : 0;                       //15-06-16|0x0407
            }                                                                             //15-06-16|0x0408
        }                                                                                 //15-06-16|0x0409
//***************************************************************************             //15-06-16|0x040a
    return_test(load_random_1);                                                           //15-06-16|0x040b
//***************************************************************************             //15-06-16|0x040c
//***************************************************************************             //15-06-16|0x040d
}                                                                                         //15-06-16|0x040e
//                                                                                        //05-24-97|0x040e
//***************************************************************************             //10-03-22|0x0411
//***************************************************************************             //10-03-23|0x0412
//******                                                               ******             //10-03-22|0x0413
//******                    random_generator(ArgFar)                   ******             //15-06-16|0x0414
//******                                                               ******             //10-03-22|0x0415
//***************************************************************************             //10-03-22|0x0416
//***************************************************************************             //10-03-22|0x0417
//*******************************************************************************         //10-29-97|0x041b
//*******************************************************************************         //10-29-97|0x041b
// random_generator                                                                       //15-06-16|0x041b
//*******************************************************************************         //10-29-97|0x041b
//*******************************************************************************         //10-29-97|0x041b
UCHAR CRYPTO::random_generator(                                                           //15-06-16|0x041b
    CRYPTO_DATA_FAR ArgFar                                                                //15-06-16|0x041b
    ) {                                                                                   //15-06-16|0x041b
//*******************************************************************************         //10-29-97|0x041b
//***************************************************************************             //10-03-22|0x041e
//***************************************************************************             //10-03-22|0x041f
  UCHAR work;                                                                        //10-03-22|0x0420
//***************************************************************************             //10-03-22|0x0421
//***************************************************************************             //10-03-22|0x0422
    work  =  ArgRandomData(ArgBit126Index);                                               //15-06-16|0x0423
    work ^=  ArgRandomData(ArgBit0Index);                                                 //15-06-16|0x0424
    ArgRandomData(ArgBit126Index) = work;                                                 //15-06-16|0x0425
//***************************************************************************             //10-03-22|0x0426
    ArgBit126Index = (ArgBit126Index > 0) ? ArgBit126Index-1 : 126;                       //15-06-16|0x0427
    ArgBit0Index   = (ArgBit0Index   > 0) ? ArgBit0Index  -1 : 126;                       //15-06-16|0x0428
//***************************************************************************             //10-03-22|0x0429
    TestSample(random_generator_1);                                                       //15-06-16|0x042a
    return(work);                                                                         //10-03-22|0x042b
//***************************************************************************             //10-03-22|0x042c
//***************************************************************************             //10-03-22|0x042d
}                                                                                         //10-03-22|0x042e
//                                                                                        //05-24-97|0x042e
//***************************************************************************             //10-03-23|0x0431
//***************************************************************************             //10-03-23|0x0432
//******                                                               ******             //10-03-23|0x0433
//******               crypto_read(Index)                              ******             //10-03-23|0x0434
//******                                                               ******             //10-03-23|0x0435
//***************************************************************************             //10-03-23|0x0436
//***************************************************************************             //10-03-23|0x0437
//*******************************************************************************         //10-29-97|0x043c
//*******************************************************************************         //10-29-97|0x043c
// crypto_read                                                                            //10-03-23|0x043c
//*******************************************************************************         //10-29-97|0x043c
//*******************************************************************************         //10-29-97|0x043c
UINT CRYPTO::crypto_read(                                                                 //10-03-23|0x043c
    SINT Index                                                                            //10-03-23|0x043c
    ) {                                                                                   //10-03-23|0x043c
//*******************************************************************************         //10-29-97|0x043c
//***************************************************************************             //10-03-23|0x043f
//***                                                                     ***             //10-03-23|0x0440
//***  Do we already have the proper record in memory                     ***             //10-03-23|0x0441
//***                                                                     ***             //10-03-23|0x0442
//***************************************************************************             //10-03-23|0x0443
    if(Index != CryptoIndex)                                                              //10-03-23|0x0444
      {                                                                                   //10-03-23|0x0445
//***************************************************************************             //10-03-23|0x0446
//***                                                                     ***             //10-03-23|0x0447
//***  We do not have the proper record in memory                         ***             //10-03-23|0x0448
//***-------------------------------------------------------------------- ***             //10-03-23|0x0449
//***  Read the record                                                    ***             //10-03-23|0x044a
//***                                                                     ***             //10-03-23|0x044b
//***************************************************************************             //10-03-23|0x044c
        CryptoIndex         =  Index;                                                     //10-03-23|0x044d
        CryptoPosition      =  Index * CryptoSize;                                        //10-03-23|0x044e
//***************************************************************************             //10-03-23|0x044f
        switch(FileCommitBinary(CryptoFileAddr))                 _SwitchGroup             //10-03-23|0x0450
        switch(FileReadData(CryptoDataAddr,CryptoPosition,CryptoSize))                    //10-03-23|0x0451
                                                                 _SwitchGroup             //10-03-23|0x0452
        switch(FileRelease())                                    _SwitchGroup             //10-03-23|0x0453
        }                                                                                 //10-03-23|0x0454
//***************************************************************************             //10-03-23|0x0455
    if(CryptoDataIndex    !=  CryptoIndex)                  ReturnSystemError             //10-03-23|0x0456
    return_test(crypto_read_1);                                                           //10-03-23|0x0457
}                                                                                         //10-03-23|0x0458
//                                                                                        //05-24-97|0x0458
//***************************************************************************             //10-03-22|0x045c
//***************************************************************************             //10-03-22|0x045d
//******                                                               ******             //10-03-22|0x045e
//******                          crypto_write(Index)                  ******             //10-03-22|0x045f
//******                                                               ******             //10-03-22|0x0460
//***************************************************************************             //10-03-22|0x0461
//***************************************************************************             //10-03-22|0x0462
//*******************************************************************************         //10-29-97|0x0467
//*******************************************************************************         //10-29-97|0x0467
// crypto_write                                                                           //10-03-22|0x0467
//*******************************************************************************         //10-29-97|0x0467
//*******************************************************************************         //10-29-97|0x0467
UINT CRYPTO::crypto_write(                                                                //10-03-22|0x0467
    SINT Index                                                                            //10-03-22|0x0467
    ) {                                                                                   //10-03-22|0x0467
//*******************************************************************************         //10-29-97|0x0467
//***************************************************************************             //10-03-22|0x046a
//***************************************************************************             //10-03-22|0x046b
    if((CryptoIndex != -1) && (CryptoIndex != Index))                                     //10-03-22|0x046c
      {                                                                                   //10-03-22|0x046d
        if(CryptoPosition != (CryptoIndex * CryptoSize))    ReturnSystemError             //10-03-22|0x046e
        if(CryptoIndex    !=  CryptoDataIndex)              ReturnSystemError             //10-03-22|0x046f
//***************************************************************************             //10-03-22|0x0470
        switch(FileCommitBinary(CryptoFileAddr))                 _SwitchGroup             //10-03-22|0x0471
        switch(FileWriteData(CryptoPosition, CryptoDataAddr, CryptoSize))                 //10-03-22|0x0472
                                                                 _SwitchGroup             //10-03-22|0x0473
        switch(FileRelease())                                    _SwitchGroup             //10-03-22|0x0474
        }                                                                                 //10-03-22|0x0475
    return_test(crypto_write_1);                                                          //10-03-22|0x0476
}                                                                                         //10-03-22|0x0477
//                                                                                        //05-24-97|0x0477
//***************************************************************************             //10-03-22|0x047a
//***************************************************************************             //10-03-22|0x047b
//******                                                               ******             //10-03-22|0x047c
//******                       TEST WRAPPERS                           ******             //10-03-22|0x047d
//******                                                               ******             //10-03-22|0x047e
//***************************************************************************             //10-03-22|0x047f
//***************************************************************************             //10-03-22|0x0480
//*******************************************************************************         //10-29-97|0x0481
//*******************************************************************************         //10-29-97|0x0481
// crypto_test_reset                                                                      //10-03-22|0x0481
//*******************************************************************************         //10-29-97|0x0481
//*******************************************************************************         //10-29-97|0x0481
UINT CRYPTO::crypto_test_reset(void) {                                                    //10-03-22|0x0481
//*******************************************************************************         //10-29-97|0x0481
//************************************************************************                //10-03-22|0x0481
    switch(BasicTestReset())                                                              //10-03-22|0x0481
      {                                                                                   //10-03-22|0x0481
        case Success:                                     return(Success);                //10-03-22|0x0481
        default:                                        ReturnSystemError;                //10-03-22|0x0481
        }                                                                                 //10-03-22|0x0481
}                                                                                         //10-03-22|0x0481
//                                                                                        //05-24-97|0x0481
//***************************************************************************             //10-03-22|0x0482
//*******************************************************************************         //10-29-97|0x0483
//*******************************************************************************         //10-29-97|0x0483
// crypto_test_read                                                                       //10-03-22|0x0483
//*******************************************************************************         //10-29-97|0x0483
//*******************************************************************************         //10-29-97|0x0483
UINT CRYPTO::crypto_test_read(void) {                                                     //10-03-22|0x0483
//*******************************************************************************         //10-29-97|0x0483
//************************************************************************                //10-03-22|0x0483
    switch(BasicTestRead(&test_samples[0], test_samples[0]))                              //10-03-22|0x0483
      {                                                                                   //10-03-22|0x0483
        case Success:                                     return(Success);                //10-03-22|0x0483
        default:                                        ReturnSystemError;                //10-03-22|0x0483
        }                                                                                 //10-03-22|0x0483
}                                                                                         //10-03-22|0x0483
//                                                                                        //05-24-97|0x0483
//***************************************************************************             //10-03-22|0x0484
//*******************************************************************************         //10-29-97|0x0485
//*******************************************************************************         //10-29-97|0x0485
// crypto_test_write                                                                      //10-03-22|0x0485
//*******************************************************************************         //10-29-97|0x0485
//*******************************************************************************         //10-29-97|0x0485
UINT CRYPTO::crypto_test_write(void) {                                                    //10-03-22|0x0485
//*******************************************************************************         //10-29-97|0x0485
//************************************************************************                //10-03-22|0x0485
    switch(BasicTestWrite(&test_samples[0]))                                              //10-03-22|0x0485
      {                                                                                   //10-03-22|0x0485
        case Success:                                     return(Success);                //10-03-22|0x0485
        default:                                        ReturnSystemError;                //10-03-22|0x0485
        }                                                                                 //10-03-22|0x0485
}                                                                                         //10-03-22|0x0485
//                                                                                        //05-24-97|0x0485
//***************************************************************************             //10-03-22|0x0486
//*******************************************************************************         //10-29-97|0x0487
//*******************************************************************************         //10-29-97|0x0487
// crypto_test_report                                                                     //10-03-22|0x0487
//*******************************************************************************         //10-29-97|0x0487
//*******************************************************************************         //10-29-97|0x0487
UINT CRYPTO::crypto_test_report(void) {                                                   //10-03-22|0x0487
//*******************************************************************************         //10-29-97|0x0487
//************************************************************************                //10-03-22|0x0487
    switch(BasicTestReport(&test_samples[0], "Crypto"))                                   //10-03-22|0x0487
      {                                                                                   //10-03-22|0x0487
        case Success:                                     return(Success);                //10-03-22|0x0487
        default:                                        ReturnSystemError;                //10-03-22|0x0487
        }                                                                                 //10-03-22|0x0487
}                                                                                         //10-03-22|0x0487
//                                                                                        //05-24-97|0x0487
//***************************************************************************             //10-03-22|0x048a
//***************************************************************************             //10-03-22|0x048b
//******                                                               ******             //10-03-22|0x048c
//******                        constructor                            ******             //10-03-22|0x048d
//******                                                               ******             //10-03-22|0x048e
//***************************************************************************             //10-03-22|0x048f
//***************************************************************************             //10-03-22|0x0490
//*******************************************************************************         //10-29-97|0x0491
//*******************************************************************************         //10-29-97|0x0491
// CONSTRUCTOR                                                                            //10-03-22|0x0491
//*******************************************************************************         //10-29-97|0x0491
//*******************************************************************************         //10-29-97|0x0491
CRYPTO::CRYPTO() {                                                                        //10-03-22|0x0491
//***************************************************************************             //10-03-22|0x0492
//***************************************************************************             //10-03-22|0x0493
    { ULONG i;                                                                            //10-03-22|0x0494
      test_samples[NoTestSamples] = TestIndex;                                            //10-03-22|0x0494
      i = 1;                                                                              //10-03-22|0x0494
      while(i<TestIndex)                                                                  //10-03-22|0x0494
        {                                                                                 //10-03-22|0x0494
          test_samples[i] = 0;                                                            //10-03-22|0x0494
          ++i;                                                                            //10-03-22|0x0494
          }                                                                               //10-03-22|0x0494
      }                                                                                   //10-03-22|0x0494
//***************************************************************************             //10-03-22|0x0495
}                                                                                         //10-03-22|0x0496
//                                                                                        //05-24-97|0x0496
//*******************************************************************************         //05-24-97|0x049a
//*******************************************************************************         //05-24-97|0x049a
//****                       END OF FILE                                     ****         //05-24-97|0x049a
//*******************************************************************************         //05-24-97|0x049a
//*******************************************************************************         //05-24-97|0x049a
